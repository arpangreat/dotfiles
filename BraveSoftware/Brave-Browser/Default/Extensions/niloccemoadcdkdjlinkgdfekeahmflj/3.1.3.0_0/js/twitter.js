!function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/",r(r.s=69)}({1:function(e,t,r){"use strict";r.d(t,"k",(function(){return n})),r.d(t,"a",(function(){return a})),r.d(t,"n",(function(){return i})),r.d(t,"l",(function(){return c})),r.d(t,"e",(function(){return o})),r.d(t,"g",(function(){return s})),r.d(t,"R",(function(){return u})),r.d(t,"S",(function(){return d})),r.d(t,"x",(function(){return l})),r.d(t,"y",(function(){return f})),r.d(t,"w",(function(){return h})),r.d(t,"z",(function(){return p})),r.d(t,"v",(function(){return b})),r.d(t,"c",(function(){return v})),r.d(t,"d",(function(){return g})),r.d(t,"b",(function(){return E})),r.d(t,"p",(function(){return m})),r.d(t,"q",(function(){return C})),r.d(t,"o",(function(){return A})),r.d(t,"D",(function(){return k})),r.d(t,"E",(function(){return w})),r.d(t,"C",(function(){return S})),r.d(t,"K",(function(){return _})),r.d(t,"M",(function(){return y})),r.d(t,"H",(function(){return T})),r.d(t,"L",(function(){return O})),r.d(t,"N",(function(){return x})),r.d(t,"I",(function(){return R})),r.d(t,"F",(function(){return I})),r.d(t,"G",(function(){return G})),r.d(t,"J",(function(){return L})),r.d(t,"P",(function(){return U})),r.d(t,"Q",(function(){return V})),r.d(t,"O",(function(){return M})),r.d(t,"W",(function(){return P})),r.d(t,"X",(function(){return j})),r.d(t,"Z",(function(){return N})),r.d(t,"Y",(function(){return D})),r.d(t,"ab",(function(){return F})),r.d(t,"cb",(function(){return $})),r.d(t,"bb",(function(){return z})),r.d(t,"i",(function(){return H})),r.d(t,"j",(function(){return W})),r.d(t,"h",(function(){return B})),r.d(t,"r",(function(){return K})),r.d(t,"t",(function(){return Q})),r.d(t,"u",(function(){return q})),r.d(t,"s",(function(){return Y})),r.d(t,"m",(function(){return Z})),r.d(t,"f",(function(){return J})),r.d(t,"A",(function(){return X})),r.d(t,"B",(function(){return ee})),r.d(t,"U",(function(){return te})),r.d(t,"V",(function(){return re})),r.d(t,"T",(function(){return ne}));var n="LOGGED_OUT_OF_POCKET",a="ARCHIVE_ITEM",i="REMOVE_ITEM",c="OPEN_POCKET",o="AUTH_CODE_RECEIVED",s="COLOR_MODE_CHANGE",u="TOGGLE_ON_SAVE_RECS",d="TOGGLE_TWITTER",l="SAVE_TO_POCKET_REQUEST",f="SAVE_TO_POCKET_SUCCESS",h="SAVE_TO_POCKET_FAILURE",p="SAVE_TO_POCKET_UPDATE",b="SAVE_TO_POCKET_COMPLETE",v="ARCHIVE_ITEM_REQUEST",g="ARCHIVE_ITEM_SUCCESS",E="ARCHIVE_ITEM_FAILURE",m="REMOVE_ITEM_REQUEST",C="REMOVE_ITEM_SUCCESS",A="REMOVE_ITEM_FAILURE",k="SUGGESTED_TAGS_REQUEST",w="SUGGESTED_TAGS_SUCCESS",S="SUGGESTED_TAGS_FAILURE",_="TAG_ACTIVATE",y="TAG_DEACTIVATE",T="TAGS_DEACTIVATE",O="TAG_ADD",x="TAG_REMOVE",R="TAGS_REMOVE",I="TAGS_ADDED_FAILURE",G="TAGS_ADDED_SUCCESS",L="TAGS_SYNC",U="TAG_SYNC_REQUEST",V="TAG_SYNC_SUCCESS",M="TAG_SYNC_FAILURE",P="UPDATE_STORED_TAGS",j="USER_LOG_IN",N="USER_LOG_IN_SUCCESS",D="USER_LOG_IN_FAILURE",F="USER_LOG_OUT",$="USER_LOG_OUT_SUCCESS",z="USER_LOG_IN_FAILURE",H="GET_RECS_REQUEST",W="GET_RECS_SUCCESS",B="GET_RECS_FAILURE",K="SAVE_REC",Q="SAVE_REC_REQUEST",q="SAVE_REC_SUCCESS",Y="SAVE_REC_FAILURE",Z="OPEN_REC",J="CHECK_TWITTER_INTEGRATION",X="START_TWITTER_INTEGRATION",ee="STOP_TWITTER_INTEGRATION",te="TWITTER_SAVE_REQUEST",re="TWITTER_SAVE_SUCCESS",ne="TWITTER_SAVE_FAILURE"},17:function(e,t,r){"use strict";var n=function(e){for(var t,r=0,n=0,a=e.length;a>=4;++n,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(n)|(255&e.charCodeAt(++n))<<8|(255&e.charCodeAt(++n))<<16|(255&e.charCodeAt(++n))<<24))+(59797*(t>>>16)<<16),r=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&r)+(59797*(r>>>16)<<16);switch(a){case 3:r^=(255&e.charCodeAt(n+2))<<16;case 2:r^=(255&e.charCodeAt(n+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(n)))+(59797*(r>>>16)<<16)}return(((r=1540483477*(65535&(r^=r>>>13))+(59797*(r>>>16)<<16))^r>>>15)>>>0).toString(36)},a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},i=r(24);r.d(t,"a",(function(){return b}));var c=/[A-Z]|^ms/g,o=/_EMO_([^_]+?)_([^]*?)_EMO_/g,s=function(e){return 45===e.charCodeAt(1)},u=function(e){return null!=e&&"boolean"!==typeof e},d=Object(i.a)((function(e){return s(e)?e:e.replace(c,"-$&").toLowerCase()})),l=function(e,t){switch(e){case"animation":case"animationName":if("string"===typeof t)return t.replace(o,(function(e,t,r){return h={name:t,styles:r,next:h},t}))}return 1===a[e]||s(e)||"number"!==typeof t||0===t?t:t+"px"};function f(e,t,r,n){if(null==r)return"";if(void 0!==r.__emotion_styles)return r;switch(typeof r){case"boolean":return"";case"object":if(1===r.anim)return h={name:r.name,styles:r.styles,next:h},r.name;if(void 0!==r.styles){var a=r.next;if(void 0!==a)for(;void 0!==a;)h={name:a.name,styles:a.styles,next:h},a=a.next;return r.styles+";"}return function(e,t,r){var n="";if(Array.isArray(r))for(var a=0;a<r.length;a++)n+=f(e,t,r[a],!1);else for(var i in r){var c=r[i];if("object"!==typeof c)null!=t&&void 0!==t[c]?n+=i+"{"+t[c]+"}":u(c)&&(n+=d(i)+":"+l(i,c)+";");else if(!Array.isArray(c)||"string"!==typeof c[0]||null!=t&&void 0!==t[c[0]]){var o=f(e,t,c,!1);switch(i){case"animation":case"animationName":n+=d(i)+":"+o+";";break;default:n+=i+"{"+o+"}"}}else for(var s=0;s<c.length;s++)u(c[s])&&(n+=d(i)+":"+l(i,c[s])+";")}return n}(e,t,r);case"function":if(void 0!==e){var i=h,c=r(e);return h=i,f(e,t,c,n)}break;case"string":}if(null==t)return r;var o=t[r];return void 0===o||n?r:o}var h,p=/label:\s*([^\s;\n{]+)\s*;/g;var b=function(e,t,r){if(1===e.length&&"object"===typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var a=!0,i="";h=void 0;var c=e[0];null==c||void 0===c.raw?(a=!1,i+=f(r,t,c,!1)):i+=c[0];for(var o=1;o<e.length;o++)i+=f(r,t,e[o],46===i.charCodeAt(i.length-1)),a&&(i+=c[o]);p.lastIndex=0;for(var s,u="";null!==(s=p.exec(i));)u+="-"+s[1];return{name:n(i)+u,styles:i,next:h}}},18:function(e,t,r){"use strict";r.d(t,"a",(function(){return n})),r.d(t,"b",(function(){return a}));function n(e,t,r){var n="";return r.split(" ").forEach((function(r){void 0!==e[r]?t.push(e[r]):n+=r+" "})),n}var a=function(e,t,r){var n=e.key+"-"+t.name;if(!1===r&&void 0===e.registered[n]&&(e.registered[n]=t.styles),void 0===e.inserted[t.name]){var a=t;do{e.insert("."+n,a,e.sheet,!0);a=a.next}while(void 0!==a)}}},23:function(e,t,r){"use strict";r.d(t,"a",(function(){return n}));var n=function(){function e(e){this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.before=null}var t=e.prototype;return t.insert=function(e){if(this.ctr%(this.isSpeedy?65e3:1)===0){var t,r=function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t}(this);t=0===this.tags.length?this.before:this.tags[this.tags.length-1].nextSibling,this.container.insertBefore(r,t),this.tags.push(r)}var n=this.tags[this.tags.length-1];if(this.isSpeedy){var a=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(n);try{var i=105===e.charCodeAt(1)&&64===e.charCodeAt(0);a.insertRule(e,i?0:a.cssRules.length)}catch(c){0}}else n.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}()},24:function(e,t,r){"use strict";t.a=function(e){var t={};return function(r){return void 0===t[r]&&(t[r]=e(r)),t[r]}}},25:function(e,t,r){"use strict";var n=r(23);var a=function(e){function t(e,t,n){var a=t.trim().split(p);t=a;var i=a.length,c=e.length;switch(c){case 0:case 1:var o=0;for(e=0===c?"":e[0]+" ";o<i;++o)t[o]=r(e,t[o],n).trim();break;default:var s=o=0;for(t=[];o<i;++o)for(var u=0;u<c;++u)t[s++]=r(e[u]+" ",a[o],n).trim()}return t}function r(e,t,r){var n=t.charCodeAt(0);switch(33>n&&(n=(t=t.trim()).charCodeAt(0)),n){case 38:return t.replace(b,"$1"+e.trim());case 58:return e.trim()+t.replace(b,"$1"+e.trim());default:if(0<1*r&&0<t.indexOf("\f"))return t.replace(b,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function n(e,t,r,i){var c=e+";",o=2*t+3*r+4*i;if(944===o){e=c.indexOf(":",9)+1;var s=c.substring(e,c.length-1).trim();return s=c.substring(0,e).trim()+s+";",1===x||2===x&&a(s,1)?"-webkit-"+s+s:s}if(0===x||2===x&&!a(c,1))return c;switch(o){case 1015:return 97===c.charCodeAt(10)?"-webkit-"+c+c:c;case 951:return 116===c.charCodeAt(3)?"-webkit-"+c+c:c;case 963:return 110===c.charCodeAt(5)?"-webkit-"+c+c:c;case 1009:if(100!==c.charCodeAt(4))break;case 969:case 942:return"-webkit-"+c+c;case 978:return"-webkit-"+c+"-moz-"+c+c;case 1019:case 983:return"-webkit-"+c+"-moz-"+c+"-ms-"+c+c;case 883:if(45===c.charCodeAt(8))return"-webkit-"+c+c;if(0<c.indexOf("image-set(",11))return c.replace(_,"$1-webkit-$2")+c;break;case 932:if(45===c.charCodeAt(4))switch(c.charCodeAt(5)){case 103:return"-webkit-box-"+c.replace("-grow","")+"-webkit-"+c+"-ms-"+c.replace("grow","positive")+c;case 115:return"-webkit-"+c+"-ms-"+c.replace("shrink","negative")+c;case 98:return"-webkit-"+c+"-ms-"+c.replace("basis","preferred-size")+c}return"-webkit-"+c+"-ms-"+c+c;case 964:return"-webkit-"+c+"-ms-flex-"+c+c;case 1023:if(99!==c.charCodeAt(8))break;return"-webkit-box-pack"+(s=c.substring(c.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+c+"-ms-flex-pack"+s+c;case 1005:return f.test(c)?c.replace(l,":-webkit-")+c.replace(l,":-moz-")+c:c;case 1e3:switch(t=(s=c.substring(13).trim()).indexOf("-")+1,s.charCodeAt(0)+s.charCodeAt(t)){case 226:s=c.replace(m,"tb");break;case 232:s=c.replace(m,"tb-rl");break;case 220:s=c.replace(m,"lr");break;default:return c}return"-webkit-"+c+"-ms-"+s+c;case 1017:if(-1===c.indexOf("sticky",9))break;case 975:switch(t=(c=e).length-10,o=(s=(33===c.charCodeAt(t)?c.substring(0,t):c).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|s.charCodeAt(7))){case 203:if(111>s.charCodeAt(8))break;case 115:c=c.replace(s,"-webkit-"+s)+";"+c;break;case 207:case 102:c=c.replace(s,"-webkit-"+(102<o?"inline-":"")+"box")+";"+c.replace(s,"-webkit-"+s)+";"+c.replace(s,"-ms-"+s+"box")+";"+c}return c+";";case 938:if(45===c.charCodeAt(5))switch(c.charCodeAt(6)){case 105:return s=c.replace("-items",""),"-webkit-"+c+"-webkit-box-"+s+"-ms-flex-"+s+c;case 115:return"-webkit-"+c+"-ms-flex-item-"+c.replace(k,"")+c;default:return"-webkit-"+c+"-ms-flex-line-pack"+c.replace("align-content","").replace(k,"")+c}break;case 973:case 989:if(45!==c.charCodeAt(3)||122===c.charCodeAt(4))break;case 931:case 953:if(!0===S.test(e))return 115===(s=e.substring(e.indexOf(":")+1)).charCodeAt(0)?n(e.replace("stretch","fill-available"),t,r,i).replace(":fill-available",":stretch"):c.replace(s,"-webkit-"+s)+c.replace(s,"-moz-"+s.replace("fill-",""))+c;break;case 962:if(c="-webkit-"+c+(102===c.charCodeAt(5)?"-ms-"+c:"")+c,211===r+i&&105===c.charCodeAt(13)&&0<c.indexOf("transform",10))return c.substring(0,c.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+c}return c}function a(e,t){var r=e.indexOf(1===t?":":"{"),n=e.substring(0,3!==t?r:10);return r=e.substring(r+1,e.length-1),L(2!==t?n:n.replace(w,"$1"),r,t)}function i(e,t){var r=n(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return r!==t+";"?r.replace(A," or ($1)").substring(4):"("+t+")"}function c(e,t,r,n,a,i,c,o,u,d){for(var l,f=0,h=t;f<G;++f)switch(l=I[f].call(s,e,h,r,n,a,i,c,o,u,d)){case void 0:case!1:case!0:case null:break;default:h=l}if(h!==t)return h}function o(e){return void 0!==(e=e.prefix)&&(L=null,e?"function"!==typeof e?x=1:(x=2,L=e):x=0),o}function s(e,r){var o=e;if(33>o.charCodeAt(0)&&(o=o.trim()),o=[o],0<G){var s=c(-1,r,o,o,T,y,0,0,0,0);void 0!==s&&"string"===typeof s&&(r=s)}var l=function e(r,o,s,l,f){for(var h,p,b,m,A,k=0,w=0,S=0,_=0,I=0,L=0,V=b=h=0,M=0,P=0,j=0,N=0,D=s.length,F=D-1,$="",z="",H="",W="";M<D;){if(p=s.charCodeAt(M),M===F&&0!==w+_+S+k&&(0!==w&&(p=47===w?10:47),_=S=k=0,D++,F++),0===w+_+S+k){if(M===F&&(0<P&&($=$.replace(d,"")),0<$.trim().length)){switch(p){case 32:case 9:case 59:case 13:case 10:break;default:$+=s.charAt(M)}p=59}switch(p){case 123:for(h=($=$.trim()).charCodeAt(0),b=1,N=++M;M<D;){switch(p=s.charCodeAt(M)){case 123:b++;break;case 125:b--;break;case 47:switch(p=s.charCodeAt(M+1)){case 42:case 47:e:{for(V=M+1;V<F;++V)switch(s.charCodeAt(V)){case 47:if(42===p&&42===s.charCodeAt(V-1)&&M+2!==V){M=V+1;break e}break;case 10:if(47===p){M=V+1;break e}}M=V}}break;case 91:p++;case 40:p++;case 34:case 39:for(;M++<F&&s.charCodeAt(M)!==p;);}if(0===b)break;M++}switch(b=s.substring(N,M),0===h&&(h=($=$.replace(u,"").trim()).charCodeAt(0)),h){case 64:switch(0<P&&($=$.replace(d,"")),p=$.charCodeAt(1)){case 100:case 109:case 115:case 45:P=o;break;default:P=R}if(N=(b=e(o,P,b,p,f+1)).length,0<G&&(A=c(3,b,P=t(R,$,j),o,T,y,N,p,f,l),$=P.join(""),void 0!==A&&0===(N=(b=A.trim()).length)&&(p=0,b="")),0<N)switch(p){case 115:$=$.replace(C,i);case 100:case 109:case 45:b=$+"{"+b+"}";break;case 107:b=($=$.replace(v,"$1 $2"))+"{"+b+"}",b=1===x||2===x&&a("@"+b,3)?"@-webkit-"+b+"@"+b:"@"+b;break;default:b=$+b,112===l&&(z+=b,b="")}else b="";break;default:b=e(o,t(o,$,j),b,l,f+1)}H+=b,b=j=P=V=h=0,$="",p=s.charCodeAt(++M);break;case 125:case 59:if(1<(N=($=(0<P?$.replace(d,""):$).trim()).length))switch(0===V&&(h=$.charCodeAt(0),45===h||96<h&&123>h)&&(N=($=$.replace(" ",":")).length),0<G&&void 0!==(A=c(1,$,o,r,T,y,z.length,l,f,l))&&0===(N=($=A.trim()).length)&&($="\0\0"),h=$.charCodeAt(0),p=$.charCodeAt(1),h){case 0:break;case 64:if(105===p||99===p){W+=$+s.charAt(M);break}default:58!==$.charCodeAt(N-1)&&(z+=n($,h,p,$.charCodeAt(2)))}j=P=V=h=0,$="",p=s.charCodeAt(++M)}}switch(p){case 13:case 10:47===w?w=0:0===1+h&&107!==l&&0<$.length&&(P=1,$+="\0"),0<G*U&&c(0,$,o,r,T,y,z.length,l,f,l),y=1,T++;break;case 59:case 125:if(0===w+_+S+k){y++;break}default:switch(y++,m=s.charAt(M),p){case 9:case 32:if(0===_+k+w)switch(I){case 44:case 58:case 9:case 32:m="";break;default:32!==p&&(m=" ")}break;case 0:m="\\0";break;case 12:m="\\f";break;case 11:m="\\v";break;case 38:0===_+w+k&&(P=j=1,m="\f"+m);break;case 108:if(0===_+w+k+O&&0<V)switch(M-V){case 2:112===I&&58===s.charCodeAt(M-3)&&(O=I);case 8:111===L&&(O=L)}break;case 58:0===_+w+k&&(V=M);break;case 44:0===w+S+_+k&&(P=1,m+="\r");break;case 34:case 39:0===w&&(_=_===p?0:0===_?p:_);break;case 91:0===_+w+S&&k++;break;case 93:0===_+w+S&&k--;break;case 41:0===_+w+k&&S--;break;case 40:if(0===_+w+k){if(0===h)switch(2*I+3*L){case 533:break;default:h=1}S++}break;case 64:0===w+S+_+k+V+b&&(b=1);break;case 42:case 47:if(!(0<_+k+S))switch(w){case 0:switch(2*p+3*s.charCodeAt(M+1)){case 235:w=47;break;case 220:N=M,w=42}break;case 42:47===p&&42===I&&N+2!==M&&(33===s.charCodeAt(N+2)&&(z+=s.substring(N,M+1)),m="",w=0)}}0===w&&($+=m)}L=I,I=p,M++}if(0<(N=z.length)){if(P=o,0<G&&(void 0!==(A=c(2,z,P,r,T,y,N,l,f,l))&&0===(z=A).length))return W+z+H;if(z=P.join(",")+"{"+z+"}",0!==x*O){switch(2!==x||a(z,2)||(O=0),O){case 111:z=z.replace(E,":-moz-$1")+z;break;case 112:z=z.replace(g,"::-webkit-input-$1")+z.replace(g,"::-moz-$1")+z.replace(g,":-ms-input-$1")+z}O=0}}return W+z+H}(R,o,r,0,0);return 0<G&&(void 0!==(s=c(-2,l,o,o,T,y,l.length,0,0,0))&&(l=s)),"",O=0,y=T=1,l}var u=/^\0+/g,d=/[\0\r\f]/g,l=/: */g,f=/zoo|gra/,h=/([,: ])(transform)/g,p=/,\r+?/g,b=/([\t\r\n ])*\f?&/g,v=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,E=/:(read-only)/g,m=/[svh]\w+-[tblr]{2}/,C=/\(\s*(.*)\s*\)/g,A=/([\s\S]*?);/g,k=/-self|flex-/g,w=/[^]*?(:[rp][el]a[\w-]+)[^]*/,S=/stretch|:\s*\w+\-(?:conte|avail)/,_=/([^-])(image-set\()/,y=1,T=1,O=0,x=1,R=[],I=[],G=0,L=null,U=0;return s.use=function e(t){switch(t){case void 0:case null:G=I.length=0;break;default:if("function"===typeof t)I[G++]=t;else if("object"===typeof t)for(var r=0,n=t.length;r<n;++r)e(t[r]);else U=0|!!t}return e},s.set=o,void 0!==e&&o(e),s};function i(e){e&&c.current.insert(e+"}")}var c={current:null},o=function(e,t,r,n,a,o,s,u,d,l){switch(e){case 1:switch(t.charCodeAt(0)){case 64:return c.current.insert(t+";"),"";case 108:if(98===t.charCodeAt(2))return""}break;case 2:if(0===u)return t+"/*|*/";break;case 3:switch(u){case 102:case 112:return c.current.insert(r[0]+t),"";default:return t+(0===l?"/*|*/":"")}case-2:t.split("/*|*/}").forEach(i)}};t.a=function(e){void 0===e&&(e={});var t,r=e.key||"css";void 0!==e.prefix&&(t={prefix:e.prefix});var i=new a(t);var s,u={};s=e.container||document.head;var d,l=document.querySelectorAll("style[data-emotion-"+r+"]");Array.prototype.forEach.call(l,(function(e){e.getAttribute("data-emotion-"+r).split(" ").forEach((function(e){u[e]=!0})),e.parentNode!==s&&s.appendChild(e)})),i.use(e.stylisPlugins)(o),d=function(e,t,r,n){var a=t.name;c.current=r,i(e,t.styles),n&&(f.inserted[a]=!0)};var f={key:r,sheet:new n.a({key:r,container:s,nonce:e.nonce,speedy:e.speedy}),nonce:e.nonce,inserted:u,registered:{},insert:d};return f}},4:function(e,t,r){"use strict";function n(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}r.d(t,"a",(function(){return n}))},69:function(e,t,r){e.exports=r(76)},76:function(e,t,r){"use strict";r.r(t);var n=r(1),a=r(4),i=r(25),c=r(17),o=r(18);function s(e,t){if(void 0===e.inserted[t.name])return e.insert("",t,e.sheet,!0)}function u(e,t,r){var n=[],a=Object(o.a)(e,n,r);return n.length<2?r:a+t(n)}var d=function e(t){for(var r="",n=0;n<t.length;n++){var a=t[n];if(null!=a){var i=void 0;switch(typeof a){case"boolean":break;case"object":if(Array.isArray(a))i=e(a);else for(var c in i="",a)a[c]&&c&&(i&&(i+=" "),i+=c);break;default:i=a}i&&(r&&(r+=" "),r+=i)}}return r},l=function(e){var t=Object(i.a)(e);t.sheet.speedy=function(e){this.isSpeedy=e},t.compat=!0;var r=function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var a=Object(c.a)(r,t.registered,void 0);return Object(o.b)(t,a,!1),t.key+"-"+a.name};return{css:r,cx:function(){for(var e=arguments.length,n=new Array(e),a=0;a<e;a++)n[a]=arguments[a];return u(t.registered,r,d(n))},injectGlobal:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var a=Object(c.a)(r,t.registered);s(t,a)},keyframes:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var a=Object(c.a)(r,t.registered),i="animation-"+a.name;return s(t,{name:a.name,styles:"@keyframes "+i+"{"+a.styles+"}"}),i},hydrate:function(e){e.forEach((function(e){t.inserted[e]=!0}))},flush:function(){t.registered={},t.inserted={},t.sheet.flush()},sheet:t.sheet,cache:t,getRegisteredStyles:o.a.bind(null,t.registered),merge:u.bind(null,t.registered,r)}}(),f=(l.flush,l.hydrate,l.cx,l.merge,l.getRegisteredStyles,l.injectGlobal);l.keyframes,l.css,l.sheet,l.cache;function h(){var e=Object(a.a)(["\n    .saveToPocketContainer{\n      flex-grow: 0.5;\n      align-items: center;\n      align-content: center;\n      display: flex;\n      justify-content: flex-start;\n    }\n\n    .saveToPocketButton{\n      cursor: pointer;\n      position: relative;\n      border-radius: 100%;\n      width: 35px;\n      height: 35px;\n      position: relative;\n      transition: background 200ms;\n\n      .list-view & {\n        margin-top: -2px;\n      }\n      .focus-view & {\n        margin-top: 5px;\n        zoom: 1.1;\n      }\n    \n      &:hover{\n        background: #ef405630;\n        .pocketIconStroke{\n          fill: #ef4056;\n        }\n      }\n\n      .savedToPocket & {\n        .pocketIconFill{\n          display: inline-block;\n        }\n        .pocketIconStroke{\n          display: none;\n        }\n      }\n\n      svg {\n        height: 16px;\n        vertical-align: bottom;\n        width: 16px;\n        position: relative;\n        top: 10px;\n        left: 9px;\n      }\n\n      .pocketIconFill{\n        display: none;\n        fill: #ef4056;\n      }\n\n      .pocketIconStroke{\n        display: inline-block;\n        fill: rgb(136, 153, 166);\n      }\n    }\n  "]);return h=function(){return e},e}var p=function(){var e=document.createElement("div");return e.classList.add("saveToPocketContainer"),e.innerHTML='\n    <div class="saveToPocketButton" type="button" data-nav="share_tweet_to_pocket">\n      <svg class="pocketIconFill" width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">\n        <path fill-rule="evenodd" clip-rule="evenodd" d="M14.1474 7.69474L9.85262 11.7368C9.63157 11.9895 9.2842 12.0842 9.03157 12.0842C8.71578 12.0842 8.39999 11.9895 8.14736 11.7368L3.91578 7.69474C3.47368 7.22105 3.41052 6.43158 3.91578 5.92631C4.38947 5.48421 5.17894 5.42105 5.65262 5.92631L9.03157 9.17895L12.4737 5.92631C12.9158 5.42105 13.7053 5.48421 14.1474 5.92631C14.5895 6.43158 14.5895 7.22105 14.1474 7.69474M16.3263 1H1.73684C0.789474 1 0 1.72632 0 2.67368V8.07368C0 12.9684 4.04211 17.0421 9.03158 17.0421C13.9895 17.0421 18 12.9684 18 8.07368V2.67368C18 1.72632 17.2421 1 16.3263 1"/>\n      </svg>\n      <svg class="pocketIconStroke" width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">\n        <path d="M1.87942 2.5C1.67164 2.5 1.5 2.67337 1.5 2.89083V7.66667C1.5 11.8566 4.85944 15.25 9 15.25C13.1406 15.25 16.5 11.8566 16.5 7.66667V2.89083C16.5 2.67337 16.3284 2.5 16.1206 2.5H1.87942ZM1.87942 1H16.1206C17.1602 1 18 1.8483 18 2.89083V7.66667C18 12.6817 13.9724 16.75 9 16.75C4.02761 16.75 0 12.6817 0 7.66667V2.89083C0 1.8483 0.839815 1 1.87942 1ZM12.2247 6.08969C12.5203 5.79957 12.9952 5.80405 13.2853 6.0997C13.5754 6.39535 13.5709 6.8702 13.2753 7.16031L9.5253 10.8402C9.23359 11.1264 8.76641 11.1264 8.4747 10.8402L4.7247 7.16031C4.42905 6.8702 4.42457 6.39535 4.71469 6.0997C5.0048 5.80405 5.47965 5.79957 5.7753 6.08969L9 9.25406L12.2247 6.08969Z"/>\n      </svg>\n    </div>\n  ',e}();function b(){var e=document.querySelectorAll("[role=group]:not(.PocketAdded)");if(e||!e.length)try{Array.from(e,v)}catch(r){var t=r.message;"legacyTwitter"!==t&&console.warn(t)}}function v(e){var t=function(e){var t=window.location.pathname,r=e.closest("article");if(r&&0===r.length)throw Error("legacyTwitter");var n=r.querySelector("time"),a=!!n&&n.parentElement,i=!!a&&a.getAttribute("href"),c=i?"https://twitter.com".concat(i):t,o="tweetDetail"===r.getAttribute("data-testid");return{permaLink:c,isFocusViewTweet:o}}(e),r=t.permaLink,n=function(e){var t=e.permaLink,r=e.isFocusViewTweet,n=p.cloneNode(!0);return n.id="pocketButton-".concat(Math.random().toString(36).substring(7)),n.setAttribute("data-permalink-path",t),n.classList.add(r?"focus-view":"list-view"),n}({permaLink:r,isFocusViewTweet:t.isFocusViewTweet});n.addEventListener("click",g.bind(this,n.id,r)),function(e,t){e.children[3].before(t),e.classList.add("PocketAdded")}(e,n)}function g(e,t,r){r.stopPropagation(),r.stopImmediatePropagation(),r.preventDefault();var a=function(e){var t=e.querySelector("[lang] > a"),r=e.querySelector("#tweet-rich-content-label a"),n=t?t.getAttribute("href"):!!r&&r.getAttribute("href");return!(!n||!n.match(/https?:/i))&&n}(document.getElementById(e).closest("article"));chrome.runtime.sendMessage({type:n.U,payload:{elementId:e,permaLink:t,tweetLink:a}})}function E(){chrome&&chrome.runtime.onMessage.addListener((function(e){w({name:e.action,message:e.payload})})),"undefined"!==typeof safari&&safari.self.addEventListener("message",w),f(h()),chrome.runtime.sendMessage({type:n.f})}r.d(t,"startIntegration",(function(){return A})),r.d(t,"stopIntegration",(function(){return k})),window.top===window&&("loading"===document.readyState?document.addEventListener("DOMContentLoaded",E):E());var m=new MutationObserver((function(){b()})),C={childList:!0,attributes:!1,characterData:!1,subtree:!0};function A(){var e=document.querySelector("#react-root");m.observe(e,C),b()}function k(){m.disconnect(),document.querySelectorAll("div.saveToPocketButton").forEach((function(e){return e.parentNode.removeChild(e)}))}function w(e){var t=e||{},r=t.message,a=t.name,i=void 0===a?"Unknown Action":a;switch(console.groupCollapsed("RECEIVE: ".concat(i)),console.log(r),console.groupEnd("RECEIVE: ".concat(i)),i){case n.A:return void A();case n.B:return void k();case n.V:return void function(e){var t=e.elementId,r=document.getElementById(t);r&&r.classList.add("savedToPocket")}(r);default:return}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,