!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=62)}({1:function(t,e,n){"use strict";n.d(e,"k",(function(){return r})),n.d(e,"a",(function(){return o})),n.d(e,"n",(function(){return i})),n.d(e,"l",(function(){return c})),n.d(e,"e",(function(){return a})),n.d(e,"g",(function(){return u})),n.d(e,"R",(function(){return s})),n.d(e,"S",(function(){return f})),n.d(e,"x",(function(){return d})),n.d(e,"y",(function(){return l})),n.d(e,"w",(function(){return p})),n.d(e,"z",(function(){return h})),n.d(e,"v",(function(){return v})),n.d(e,"c",(function(){return _})),n.d(e,"d",(function(){return g})),n.d(e,"b",(function(){return m})),n.d(e,"p",(function(){return b})),n.d(e,"q",(function(){return y})),n.d(e,"o",(function(){return E})),n.d(e,"D",(function(){return O})),n.d(e,"E",(function(){return w})),n.d(e,"C",(function(){return x})),n.d(e,"K",(function(){return S})),n.d(e,"M",(function(){return A})),n.d(e,"H",(function(){return T})),n.d(e,"L",(function(){return j})),n.d(e,"N",(function(){return C})),n.d(e,"I",(function(){return k})),n.d(e,"F",(function(){return I})),n.d(e,"G",(function(){return R})),n.d(e,"J",(function(){return U})),n.d(e,"P",(function(){return L})),n.d(e,"Q",(function(){return M})),n.d(e,"O",(function(){return P})),n.d(e,"W",(function(){return G})),n.d(e,"X",(function(){return F})),n.d(e,"Z",(function(){return N})),n.d(e,"Y",(function(){return V})),n.d(e,"ab",(function(){return D})),n.d(e,"cb",(function(){return B})),n.d(e,"bb",(function(){return W})),n.d(e,"i",(function(){return K})),n.d(e,"j",(function(){return Q})),n.d(e,"h",(function(){return Y})),n.d(e,"r",(function(){return z})),n.d(e,"t",(function(){return H})),n.d(e,"u",(function(){return q})),n.d(e,"s",(function(){return J})),n.d(e,"m",(function(){return X})),n.d(e,"f",(function(){return Z})),n.d(e,"A",(function(){return $})),n.d(e,"B",(function(){return tt})),n.d(e,"U",(function(){return et})),n.d(e,"V",(function(){return nt})),n.d(e,"T",(function(){return rt}));var r="LOGGED_OUT_OF_POCKET",o="ARCHIVE_ITEM",i="REMOVE_ITEM",c="OPEN_POCKET",a="AUTH_CODE_RECEIVED",u="COLOR_MODE_CHANGE",s="TOGGLE_ON_SAVE_RECS",f="TOGGLE_TWITTER",d="SAVE_TO_POCKET_REQUEST",l="SAVE_TO_POCKET_SUCCESS",p="SAVE_TO_POCKET_FAILURE",h="SAVE_TO_POCKET_UPDATE",v="SAVE_TO_POCKET_COMPLETE",_="ARCHIVE_ITEM_REQUEST",g="ARCHIVE_ITEM_SUCCESS",m="ARCHIVE_ITEM_FAILURE",b="REMOVE_ITEM_REQUEST",y="REMOVE_ITEM_SUCCESS",E="REMOVE_ITEM_FAILURE",O="SUGGESTED_TAGS_REQUEST",w="SUGGESTED_TAGS_SUCCESS",x="SUGGESTED_TAGS_FAILURE",S="TAG_ACTIVATE",A="TAG_DEACTIVATE",T="TAGS_DEACTIVATE",j="TAG_ADD",C="TAG_REMOVE",k="TAGS_REMOVE",I="TAGS_ADDED_FAILURE",R="TAGS_ADDED_SUCCESS",U="TAGS_SYNC",L="TAG_SYNC_REQUEST",M="TAG_SYNC_SUCCESS",P="TAG_SYNC_FAILURE",G="UPDATE_STORED_TAGS",F="USER_LOG_IN",N="USER_LOG_IN_SUCCESS",V="USER_LOG_IN_FAILURE",D="USER_LOG_OUT",B="USER_LOG_OUT_SUCCESS",W="USER_LOG_IN_FAILURE",K="GET_RECS_REQUEST",Q="GET_RECS_SUCCESS",Y="GET_RECS_FAILURE",z="SAVE_REC",H="SAVE_REC_REQUEST",q="SAVE_REC_SUCCESS",J="SAVE_REC_FAILURE",X="OPEN_REC",Z="CHECK_TWITTER_INTEGRATION",$="START_TWITTER_INTEGRATION",tt="STOP_TWITTER_INTEGRATION",et="TWITTER_SAVE_REQUEST",nt="TWITTER_SAVE_SUCCESS",rt="TWITTER_SAVE_FAILURE"},10:function(t,e,n){"use strict";var r=n(11);var o=n(21);function i(t){return function(t){if(Array.isArray(t))return Object(r.a)(t)}(t)||function(t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||Object(o.a)(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}n.d(e,"a",(function(){return i}))},11:function(t,e,n){"use strict";function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}n.d(e,"a",(function(){return r}))},16:function(t,e,n){"use strict";n.d(e,"b",(function(){return r})),n.d(e,"d",(function(){return o})),n.d(e,"a",(function(){return i})),n.d(e,"c",(function(){return c}));n(10);function r(t){return t.match(/^(?:https?:\/\/)?(?:[^@\n]+@)?(?:www\.)?([^:/\n?=]+)/im)[1]}function o(t){return"[object Function]"===Object.prototype.toString.call(t)}function i(t){return t.filter((function(t){return t&&"undefined"!==typeof t}))}function c(t){return!0===t||"true"===t||1===t||1===parseInt(t,10)}},21:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(11);function o(t,e){if(t){if("string"===typeof t)return Object(r.a)(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Object(r.a)(t,e):void 0}}},22:function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.d(e,"a",(function(){return r}))},28:function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o})),n.d(e,"c",(function(){return i}));var r="https://getpocket.com/signup?src=extension&route=/extension_login_success",o="https://getpocket.com/lo",i="chrome://extensions/configureCommands"},3:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(22);function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){Object(r.a)(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}},48:function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"===typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",c=r.toStringTag||"@@toStringTag";function a(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{a({},"")}catch(A){a=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var o=e&&e.prototype instanceof d?e:d,i=Object.create(o.prototype),c=new w(r||[]);return i._invoke=function(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return S()}for(n.method=o,n.arg=i;;){var c=n.delegate;if(c){var a=y(c,n);if(a){if(a===f)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(t,e,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(t,n,c),i}function s(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(A){return{type:"throw",arg:A}}}t.wrap=u;var f={};function d(){}function l(){}function p(){}var h={};h[o]=function(){return this};var v=Object.getPrototypeOf,_=v&&v(v(x([])));_&&_!==e&&n.call(_,o)&&(h=_);var g=p.prototype=d.prototype=Object.create(h);function m(t){["next","throw","return"].forEach((function(e){a(t,e,(function(t){return this._invoke(e,t)}))}))}function b(t,e){var r;this._invoke=function(o,i){function c(){return new e((function(r,c){!function r(o,i,c,a){var u=s(t[o],t,i);if("throw"!==u.type){var f=u.arg,d=f.value;return d&&"object"===typeof d&&n.call(d,"__await")?e.resolve(d.__await).then((function(t){r("next",t,c,a)}),(function(t){r("throw",t,c,a)})):e.resolve(d).then((function(t){f.value=t,c(f)}),(function(t){return r("throw",t,c,a)}))}a(u.arg)}(o,i,r,c)}))}return r=r?r.then(c,c):c()}}function y(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,y(t,e),"throw"===e.method))return f;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var r=s(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,f;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function w(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function x(t){if(t){var e=t[o];if(e)return e.call(t);if("function"===typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:S}}function S(){return{value:void 0,done:!0}}return l.prototype=g.constructor=p,p.constructor=l,l.displayName=a(p,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"===typeof t&&t.constructor;return!!e&&(e===l||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,a(t,c,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},m(b.prototype),b.prototype[i]=function(){return this},t.AsyncIterator=b,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var c=new b(u(e,n,r,o),i);return t.isGeneratorFunction(n)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},m(g),a(g,c,"Generator"),g[o]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=x,w.prototype={constructor:w,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return c.type="throw",c.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],c=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var a=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(a&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(a){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(c)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:x(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=r}catch(o){Function("r","regeneratorRuntime = r")(r)}},49:function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(r){"object"===typeof window&&(n=window)}t.exports=n},58:function(t,e,n){(function(n){var r;!function(n,o){t.exports=function(n){"use strict";var o,i=(n=n||{}).Base64,c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=function(t){for(var e={},n=0,r=t.length;n<r;n++)e[t.charAt(n)]=n;return e}(c),u=String.fromCharCode,s=function(t){if(t.length<2)return(e=t.charCodeAt(0))<128?t:e<2048?u(192|e>>>6)+u(128|63&e):u(224|e>>>12&15)+u(128|e>>>6&63)+u(128|63&e);var e=65536+1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320);return u(240|e>>>18&7)+u(128|e>>>12&63)+u(128|e>>>6&63)+u(128|63&e)},f=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,d=function(t){return t.replace(f,s)},l=function(t){var e=[0,2,1][t.length%3],n=t.charCodeAt(0)<<16|(t.length>1?t.charCodeAt(1):0)<<8|(t.length>2?t.charCodeAt(2):0);return[c.charAt(n>>>18),c.charAt(n>>>12&63),e>=2?"=":c.charAt(n>>>6&63),e>=1?"=":c.charAt(63&n)].join("")},p=n.btoa&&"function"==typeof n.btoa?function(t){return n.btoa(t)}:function(t){if(t.match(/[^\x00-\xFF]/))throw new RangeError("The string contains invalid characters.");return t.replace(/[\s\S]{1,3}/g,l)},h=function(t){return p(d(String(t)))},v=function(t){return t.replace(/[+\/]/g,(function(t){return"+"==t?"-":"_"})).replace(/=/g,"")},_=function(t,e){return e?v(h(t)):h(t)};n.Uint8Array&&(o=function(t,e){for(var n="",r=0,o=t.length;r<o;r+=3){var i=t[r],a=t[r+1],u=t[r+2],s=i<<16|a<<8|u;n+=c.charAt(s>>>18)+c.charAt(s>>>12&63)+("undefined"!=typeof a?c.charAt(s>>>6&63):"=")+("undefined"!=typeof u?c.charAt(63&s):"=")}return e?v(n):n});var g,m=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,b=function(t){switch(t.length){case 4:var e=((7&t.charCodeAt(0))<<18|(63&t.charCodeAt(1))<<12|(63&t.charCodeAt(2))<<6|63&t.charCodeAt(3))-65536;return u(55296+(e>>>10))+u(56320+(1023&e));case 3:return u((15&t.charCodeAt(0))<<12|(63&t.charCodeAt(1))<<6|63&t.charCodeAt(2));default:return u((31&t.charCodeAt(0))<<6|63&t.charCodeAt(1))}},y=function(t){return t.replace(m,b)},E=function(t){var e=t.length,n=e%4,r=(e>0?a[t.charAt(0)]<<18:0)|(e>1?a[t.charAt(1)]<<12:0)|(e>2?a[t.charAt(2)]<<6:0)|(e>3?a[t.charAt(3)]:0),o=[u(r>>>16),u(r>>>8&255),u(255&r)];return o.length-=[0,0,2,1][n],o.join("")},O=n.atob&&"function"==typeof n.atob?function(t){return n.atob(t)}:function(t){return t.replace(/\S{1,4}/g,E)},w=function(t){return O(String(t).replace(/[^A-Za-z0-9\+\/]/g,""))},x=function(t){return String(t).replace(/[-_]/g,(function(t){return"-"==t?"+":"/"})).replace(/[^A-Za-z0-9\+\/]/g,"")},S=function(t){return function(t){return y(O(t))}(x(t))};n.Uint8Array&&(g=function(t){return Uint8Array.from(w(x(t)),(function(t){return t.charCodeAt(0)}))});var A=function(){var t=n.Base64;return n.Base64=i,t};if(n.Base64={VERSION:"2.6.4",atob:w,btoa:p,fromBase64:S,toBase64:_,utob:d,encode:_,encodeURI:function(t){return _(t,!0)},btou:y,decode:S,noConflict:A,fromUint8Array:o,toUint8Array:g},"function"===typeof Object.defineProperty){var T=function(t){return{value:t,enumerable:!1,writable:!0,configurable:!0}};n.Base64.extendString=function(){Object.defineProperty(String.prototype,"fromBase64",T((function(){return S(this)}))),Object.defineProperty(String.prototype,"toBase64",T((function(t){return _(this,t)}))),Object.defineProperty(String.prototype,"toBase64URI",T((function(){return _(this,!0)})))}}n.Meteor&&(Base64=n.Base64);t.exports?t.exports.Base64=n.Base64:void 0===(r=function(){return n.Base64}.apply(e,[]))||(t.exports=r);return{Base64:n.Base64}}(n)}("undefined"!==typeof self?self:"undefined"!==typeof window?window:"undefined"!==typeof n?n:this)}).call(this,n(49))},6:function(t,e,n){"use strict";n.d(e,"l",(function(){return o})),n.d(e,"k",(function(){return i})),n.d(e,"j",(function(){return c})),n.d(e,"e",(function(){return a})),n.d(e,"c",(function(){return u})),n.d(e,"d",(function(){return s})),n.d(e,"g",(function(){return f})),n.d(e,"f",(function(){return d})),n.d(e,"h",(function(){return l})),n.d(e,"a",(function(){return p})),n.d(e,"i",(function(){return h})),n.d(e,"n",(function(){return v})),n.d(e,"m",(function(){return _})),n.d(e,"b",(function(){return g}));var r=n(9);function o(){Object(r.d)(a())}function i(t){return t.active&&c(t.url)}function c(t){return t.startsWith("chrome://")||t.startsWith("chrome-extension://")||t.startsWith("chrome-search://")}function a(){var t=h("base_URL");return t||v({base_URL:"https://getpocket.com/"}),t||"https://getpocket.com/"}function u(){return a()+function(){var t=h("base_api_version");return t||v({base_api_version:"v3/"}),t||"v3/"}()}function s(){return h("access_token")}function f(){var t=navigator.languages?navigator.languages[0]:navigator.language||navigator.userLanguage;return 0===(t="undefined"!==typeof t?t.toLowerCase():"en").indexOf("en")?"en":0===t.indexOf("de")?"de":0===t.indexOf("fr")?"fr":0===t.indexOf("it")?"it":0===t.indexOf("es_419")?"es_419":0===t.indexOf("es")?"es":0===t.indexOf("ja")?"ja":0===t.indexOf("ru")?"ru":0===t.indexOf("ko")?"ko":0===t.indexOf("nl")?"nl":0===t.indexOf("pl")?"pl":0===t.indexOf("pt_BR")?"pt_BR":0===t.indexOf("pt_PT")?"pt_PT":0===t.indexOf("zh_CN")?"zh_CN":0===t.indexOf("zh_TW")?"zh_TW":"en"}function d(t){return t.top_image_url?t.top_image_url:t.images[Object.keys(t.images)[0]].src}function l(t,e){if(t){var n=e?"".concat(e.width,"x").concat(e.height):"",r=encodeURIComponent(t.replace(/'/g,"%27")),o="".concat(r);return"".concat("https://pocket-image-cache.com","/").concat(n,"/filters:no_upscale()/").concat(o)}}function p(t,e){return t.filter((function(t){return t.name===e})).length}function h(t){return localStorage.getItem(t)}function v(t){Object.keys(t).forEach((function(e){localStorage.setItem(e,t[e])}))}function _(t){t.forEach((function(t){localStorage.removeItem(t)}))}function g(){chrome.tabs.query({url:"*://getpocket.com/extension_login_success"},(function(t){chrome.tabs.remove(t.map((function(t){return t.id})))}))}},62:function(t,e,n){t.exports=n(75)},7:function(t,e,n){t.exports=n(48)},75:function(t,e,n){"use strict";function r(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}n.r(e);var o=n(7),i=n.n(o),c=n(3);function a(t,e,n,r,o,i,c){try{var a=t[i](c),u=a.value}catch(s){return void n(s)}a.done?e(u):Promise.resolve(u).then(r,o)}function u(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function c(t){a(i,r,o,c,u,"next",t)}function u(t){a(i,r,o,c,u,"throw",t)}c(void 0)}))}}var s=n(10),f=n(9),d=n(58),l=n(6);function p(t,e){if(!CONSUMER_KEY)throw new Error("Invalid Auth Key");e||(t.data.access_token=Object(l.d)()),t.data.consumer_key=CONSUMER_KEY;var n=new Headers({"X-Accept":"application/json","Content-Type":"application/json"}),r=Object(f.b)("base_server_auth");r&&n.append("Authorization","Basic "+d.Base64.encode(r));var o={method:"POST",headers:n,body:JSON.stringify(t.data)};return fetch(Object(l.c)()+t.path,o).then(h).then((function(t){return t.json()}))}function h(t){if(!t.ok){var e=new Error("Request Error");throw e.name=401===t.status?"Auth":"Generic",e}return t}function v(t){return p({path:"send/",data:{actions:[Object(c.a)(Object(c.a)({action:"add",url:t.url,title:t.title},t.actionInfo),t.additionalParams)]}}).then((function(e){return e?{saveObject:t,status:"ok",response:e.action_results[0]}:void 0}))}function _(t){return p({path:"discover/recIt",data:{item_id:t,locale_lang:Object(l.g)(),count:3,module:"chrome_plugin"}}).then((function(t){return t}))}function g(t){return p({path:"send/",data:{actions:[{action:"add",url:t.url,title:t.title},{action:"itemrec_save",item_id:t.item_id,cxt_ui:"onsave_rec",cxt_view:"ext_recs",cxt_src_item:t.source_id,cxt_index:t.position}]}}).then((function(e){return e?{saveObject:t,status:"ok",response:e.action_results[0]}:void 0}))}function m(t){return p({path:"send/",data:{actions:[{action:"itemrec_open",item_id:t.item_id,cxt_ui:"onsave_rec",cxt_view:"ext_recs",cxt_src_item:t.source_id,cxt_index:t.position}]}}).then((function(e){return e?{saveObject:t,status:"ok",response:e.action_results[0]}:void 0}))}function b(t){return p({path:"suggested_tags/",data:{url:t.url,version:2}}).then((function(t){return t}))}function y(t,e,n){return p({path:"send/",data:{actions:[Object(c.a)({action:"tags_add",item_id:t,tags:e},n)]}}).then((function(t){return t?{status:"ok",response:t.action_results[0]}:void 0}))}function E(t){return p({path:"get/",data:{tags:1,taglist:1,account:1,since:t||0}}).then((function(t){return t}))}function O(t,e){return p({path:"send/",data:{actions:[Object(c.a)({action:"archive",item_id:t},e)]}}).then((function(t){return t?{status:"ok",response:t.action_results[0]}:void 0}))}function w(t,e){return p({path:"send/",data:{actions:[Object(c.a)({action:"delete",item_id:t},e)]}}).then((function(t){return t?{status:"ok",response:t.action_results[0]}:void 0}))}function x(t,e){return p({path:"oauth/authorize/",data:{guid:t.guid,token:e.token,user_id:e.userId,account:"1",grant_type:"extension"}},!0)}var S=n(16);function A(){return new Promise((function(t,e){return Promise.all([new Promise((function(t){return t(Object(f.b)("guid"))})),new Promise((function(t,e){try{Object(f.a)().get({url:Object(l.e)(),name:"sess_guid"},(function(e){return t(e)}))}catch(n){e("Error getting Cookies")}}))]).then((function(n){Object(S.a)(n).length?(n[0]&&t({source:"extension",guid:n[0]}),n[1]&&t({source:"site",guid:n[1].value})):p({path:"guid",data:{abt:1}}).then((function(e){return t({source:"server",guid:e.guid})})).catch((function(t){return e(t)}))})).catch((function(t){return e(t)}))}))}var T=n(1);function j(t,e){return C.apply(this,arguments)}function C(){return(C=u(i.a.mark((function t(e,n){var r,o,c,a,u;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=n.resolved_url,o=n.given_url,c=n.isLink,a=n.resolved_id,u=r||o,c||Object(f.f)(e,!0),k(e),R(u,e),a&&L(a,e);case 6:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function k(t){return I.apply(this,arguments)}function I(){return(I=u(i.a.mark((function t(e){var n,r,o,c,a,u,f;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=Object(l.i)("tags_fetched_timestamp")||0,t.next=3,E(r);case 3:o=t.sent,c=o&&o.tags||[],a=JSON.parse(Object(l.i)("tags_stored"))||[],u=Object(s.a)(new Set((n=[]).concat.apply(n,Object(s.a)(a).concat(Object(s.a)(c))))),f=JSON.stringify(u),Object(l.n)({tags_stored:f,tags_fetched_timestamp:Date.now()}),chrome.tabs.sendMessage(e,{action:T.W,payload:{response:{tags:u}}});case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function R(t,e){return U.apply(this,arguments)}function U(){return(U=u(i.a.mark((function t(e,n){var r;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("1"===Object(l.i)("premium_status")){t.next=2;break}return t.abrupt("return");case 2:return t.next=4,b({url:e});case 4:(r=t.sent)&&chrome.tabs.sendMessage(n,{action:T.E,payload:{response:r}});case 6:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function L(t,e){return M.apply(this,arguments)}function M(){return(M=u(i.a.mark((function t(e,n){var r;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(Object(S.c)(Object(l.i)("on_save_recommendations"))){t.next=2;break}return t.abrupt("return");case 2:return chrome.tabs.sendMessage(n,{action:T.i}),t.next=5,_(e);case 5:(r=t.sent)&&chrome.tabs.sendMessage(n,{action:T.j,payload:r});case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function P(){return(P=u(i.a.mark((function t(e,n){var r;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.id,t.next=3,g(n);case 3:t.sent&&chrome.tabs.sendMessage(r,{action:T.u,payload:n});case 5:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function G(){return(G=u(i.a.mark((function t(e,n){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:m(n);case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var F=n(28),N=null;function V(t){return D.apply(this,arguments)}function D(){return(D=u(i.a.mark((function t(e){var n,r,o,a,u,s,f,d,p;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=e.linkUrl,r=e.pageUrl,o=e.title,a=e.tabId,Object(l.i)("access_token")){t.next=4;break}return t.abrupt("return",z({linkUrl:n,pageUrl:r,title:o,tabId:a}));case 4:return chrome.tabs.sendMessage(a,{action:T.x}),u=n||r,t.prev=6,t.next=9,v({url:u,title:o,tabId:a});case 9:s=t.sent,f=s.response,d=f?{action:T.y,payload:f}:{action:T.w,payload:f},chrome.tabs.sendMessage(a,d),f&&j(a,Object(c.a)(Object(c.a)({},f),{},{isLink:Boolean(n)})),t.next=22;break;case 16:if(t.prev=16,t.t0=t.catch(6),"Auth"!==t.t0.name){t.next=20;break}return t.abrupt("return",z({linkUrl:n,pageUrl:r,title:o,tabId:a}));case 20:p={action:T.w},chrome.tabs.sendMessage(a,p);case 22:case"end":return t.stop()}}),t,null,[[6,16]])})))).apply(this,arguments)}function B(){return(B=u(i.a.mark((function t(e,n){var o,c,a,u,s,f;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=e.id,c=n.item_id,a=r(n,["item_id"]),chrome.tabs.sendMessage(o,{action:T.c}),t.next=5,O(c,a);case 5:u=t.sent,s=u.response,f=s?{action:T.d,payload:n}:{action:T.b,payload:n},chrome.tabs.sendMessage(o,f);case 9:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function W(){return(W=u(i.a.mark((function t(e,n){var o,c,a,u,s,d;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=e.id,c=n.item_id,a=r(n,["item_id"]),chrome.tabs.sendMessage(o,{action:T.p}),t.next=5,w(c,a);case 5:u=t.sent,s=u.response,d=s?{action:T.q,payload:n}:{action:T.o,payload:n},chrome.tabs.sendMessage(o,d),s&&Object(f.f)(o,!1);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function K(){return(K=u(i.a.mark((function t(e,n){var o,c,a,u,s,f,d;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=e.id,c=n.item_id,a=n.tags,u=r(n,["item_id","tags"]),chrome.tabs.sendMessage(o,{action:T.P}),t.next=5,y(c,a,u);case 5:s=t.sent,f=s.response,d=f?{action:T.Q,payload:n}:{action:T.O,payload:n},chrome.tabs.sendMessage(o,d);case 9:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Q(){return(Q=u(i.a.mark((function t(e,n){var r,o,c,a,u,s;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,A();case 2:return r=t.sent,t.next=5,x(r,n);case 5:o=t.sent,c=o.access_token,a=o.account,u=o.username,s=a.premium_status,Object(l.n)({access_token:c,premium_status:s,username:u}),Object(l.b)(),N&&V(N);case 11:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Y(t){window.open(F.b)}function z(t){N=t,window.open(F.a)}function H(t,e){var n=e.darkMode;Object(l.n)({darkMode:n}),function(t){var e="browser-action-icon".concat(t?"-dark":""),n="images/".concat(e,"-19.png"),r="images/".concat(e,"-38.png");chrome.browserAction.setIcon({path:{19:n,38:r}})}(n)}function q(){return(q=u(i.a.mark((function t(e,n){var r,o,c,a,u,s;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=n.permaLink,o=n.title,c=void 0!==o&&o,a=e.id,t.next=4,v({url:r,title:c,tabId:a});case 4:u=t.sent,s=u?{action:T.V,payload:n}:{action:T.T,payload:n},chrome.tabs.sendMessage(a,s);case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}chrome.runtime.onInstalled.addListener((function(){chrome.contextMenus.create({title:"Open Your Pocket List",id:"toolbarContextClick",contexts:["browser_action"]}),chrome.contextMenus.create({title:"Log Out",id:"toolbarContextClickLogOut",contexts:["browser_action"]}),chrome.contextMenus.create({title:"Save To Pocket",id:"pageContextClick",contexts:["page","frame","editable","image","video","audio","link","selection"]}),H(0,{darkMode:window.matchMedia("(prefers-color-scheme: dark)").matches}),"unset"===(Object(l.i)("sites_twitter")||"unset")&&Object(l.n)({sites_twitter:!0}),"unset"===(Object(l.i)("on_save_recommendations")||"unset")&&Object(l.n)({on_save_recommendations:!0})})),chrome.browserAction.onClicked.addListener((function(t){if(Object(l.k)(t))return Object(l.l)();var e=t.id,n=t.title;V({pageUrl:t.url,title:n,tabId:e})})),chrome.contextMenus.onClicked.addListener((function(t,e){var n=t.menuItemId,r=t.linkUrl,o=t.pageUrl,i=e.id,c=e.title;return"toolbarContextClick"===n?Object(l.l)():"toolbarContextClickLogOut"===n?Y():Object(l.j)(r||o)?Object(l.l)():V({linkUrl:r,pageUrl:o,title:c,tabId:i})})),chrome.tabs.onUpdated.addListener((function(t,e){"loading"===e.status&&e.url&&Object(f.f)(t,!1)})),chrome.runtime.onMessage.addListener((function(t,e){var n=t.type,r=t.payload,o=e.tab;switch(console.groupCollapsed("RECEIVE: ".concat(n)),console.log(t),console.groupEnd("RECEIVE: ".concat(n)),n){case T.g:return void H(0,r);case T.R:return void function(t,e){var n=e.isEnabled;Object(l.n)({on_save_recommendations:n})}(0,r);case T.S:return void function(t,e){var n=e.isEnabled;Object(l.n)({sites_twitter:n})}(0,r);case T.e:return void function(t,e){Q.apply(this,arguments)}(o,r);case T.X:return void z(o);case T.ab:return void Y();case T.k:return void Object(l.m)(["access_token"]);case T.c:return void function(t,e){B.apply(this,arguments)}(o,r);case T.p:return void function(t,e){W.apply(this,arguments)}(o,r);case T.J:return void function(t,e){K.apply(this,arguments)}(o,r);case T.l:return void l.l();case T.t:return void function(t,e){P.apply(this,arguments)}(o,r);case T.m:return void function(t,e){G.apply(this,arguments)}(o,r);case T.f:return void function(t){var e=t.id,n=Object(l.i)("sites_twitter");null===n&&(Object(l.n)({sites_twitter:!0}),n=!0);var r=Object(S.c)(n)?{action:T.A}:{action:T.B};chrome.tabs.sendMessage(e,r)}(o);case T.U:return void function(t,e){q.apply(this,arguments)}(o,r);default:return}}))},9:function(t,e,n){"use strict";n.d(e,"e",(function(){return r})),n.d(e,"a",(function(){return o})),n.d(e,"d",(function(){return i})),n.d(e,"c",(function(){return c})),n.d(e,"f",(function(){return u})),n.d(e,"b",(function(){return s}));n(16);function r(t){if("undefined"!==typeof safari)return safari.extension.dispatchMessage(t.type,t.payload);chrome.runtime.sendMessage(t)}function o(){return chrome.cookies}function i(t){chrome.tabs.query({active:!0,currentWindow:!0},(function(e){chrome.tabs.update(e[0].id,{url:t})}))}function c(t,e){var n=!0!==e;return chrome.tabs.create({url:t,active:n})}function a(t,e){var n=window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?"-dark":"",r="images/".concat(e).concat(n,"-19.png"),o="images/".concat(e).concat(n,"-38.png");chrome.browserAction.setIcon({tabId:t,path:{19:r,38:o}})}function u(t,e){a(t,e?"browser-action-icon-added":"browser-action-icon")}function s(t){return localStorage.getItem(t)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,