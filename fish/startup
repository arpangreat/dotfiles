Time	Sum	Command
478	25239	> builtin source /usr/share/fish/config.fish
30	30	-> set -g IFS \n\ \t
5	5	-> set -qg __fish_added_user_paths
4	4	-> set -g __fish_added_user_paths
6	6	-> function __fish_default_command_not_found_handler...
1	5	-> if not status --is-interactive...
4	4	--> not status --is-interactive
4	4	-> set -l __extra_completionsdir
3	3	-> set -l __extra_functionsdir
2	2	-> set -l __extra_confdir
4	83	-> if test -f $__fish_data_dir/__fish_build_paths.fish...
24	24	--> test -f $__fish_data_dir/__fish_build_paths.fish
40	55	--> source $__fish_data_dir/__fish_build_paths.fish
7	7	---> set __extra_completionsdir /usr/share/fish/vendor_completions.d
4	4	---> set __extra_functionsdir /usr/share/fish/vendor_functions.d
4	4	---> set __extra_confdir /usr/share/fish/vendor_conf.d
5	5	-> set -l xdg_data_dirs
8	222	-> if set -q XDG_DATA_DIRS...
2	2	--> set -q XDG_DATA_DIRS
8	8	--> set --path xdg_data_dirs $XDG_DATA_DIRS
127	204	--> set xdg_data_dirs (string replace -r '([^/])/$' '$1' -- $xdg_data_dirs)/fish
77	77	---> string replace -r '([^/])/$' '$1' -- $xdg_data_dirs
15	15	-> set -g __fish_vendor_completionsdirs
6	6	-> set -g __fish_vendor_functionsdirs
7	7	-> set -g __fish_vendor_confdirs
12	115	-> if not set -q FISH_UNIT_TESTS_RUNNING...
8	8	--> not set -q FISH_UNIT_TESTS_RUNNING
25	25	--> set __fish_vendor_completionsdirs $__fish_user_data_dir/vendor_completions.d $xdg_data_dirs/vendor_completions.d
9	9	--> set __fish_vendor_functionsdirs $__fish_user_data_dir/vendor_functions.d $xdg_data_dirs/vendor_functions.d
12	12	--> set __fish_vendor_confdirs $__fish_user_data_dir/vendor_conf.d $xdg_data_dirs/vendor_conf.d
2	16	--> if not contains -- $__extra_completionsdir $__fish_vendor_completionsdirs...
14	14	---> not contains -- $__extra_completionsdir $__fish_vendor_completionsdirs
1	22	--> if not contains -- $__extra_functionsdir $__fish_vendor_functionsdirs...
21	21	---> not contains -- $__extra_functionsdir $__fish_vendor_functionsdirs
1	11	--> if not contains -- $__extra_confdir $__fish_vendor_confdirs...
10	10	---> not contains -- $__extra_confdir $__fish_vendor_confdirs
4	28	-> if not set -q fish_function_path...
5	5	--> not set -q fish_function_path
19	19	--> set fish_function_path $__fish_config_dir/functions $__fish_sysconf_dir/functions $__fish_vendor_functionsdirs $__fish_data_dir/functions
19	45	-> if not set -q fish_complete_path...
6	6	--> not set -q fish_complete_path
20	20	--> set fish_complete_path $__fish_config_dir/completions $__fish_sysconf_dir/completions $__fish_vendor_completionsdirs $__fish_data_dir/completions $__fish_user_data_dir/generated_completions
10	10	-> function __fish_reconstruct_path -d "Update PATH when fish_user_paths changes" --on-variable fish_user_paths...
12	12	-> function fish_sigtrap_handler --on-signal TRAP --no-scope-shadowing --description "TRAP handler: debug prompt"...
5	5	-> function __fish_on_interactive --on-event fish_prompt --on-event fish_read...
71	345	-> __fish_set_locale
204	210	--> source /usr/share/fish/functions/__fish_set_locale.fish
6	6	---> function __fish_set_locale...
11	11	--> set -l LOCALE_VARS
8	8	--> set -a LOCALE_VARS LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE
6	6	--> set -a LOCALE_VARS LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS
5	5	--> set -a LOCALE_VARS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION
21	34	--> for locale_var in $LOCALE_VARS LC_ALL...
1	13	---> if set -q $locale_var...
7	7	----> set -q $locale_var
5	5	----> return 0
1	5	-> if status --is-login...
4	4	--> status --is-login
20	1731	-> __fish_reconstruct_path
6	6	--> set -l new_user_path
86	290	--> for path in (string split : -- $fish_user_paths)...
29	29	---> string split : -- $fish_user_paths
5	40	---> if not contains -- $path $new_user_path...
29	29	----> not contains -- $path $new_user_path
6	6	----> set -a new_user_path $path
3	16	---> if not contains -- $path $new_user_path...
8	8	----> not contains -- $path $new_user_path
5	5	----> set -a new_user_path $path
2	14	---> if not contains -- $path $new_user_path...
7	7	----> not contains -- $path $new_user_path
5	5	----> set -a new_user_path $path
2	16	---> if not contains -- $path $new_user_path...
8	8	----> not contains -- $path $new_user_path
6	6	----> set -a new_user_path $path
3	17	---> if not contains -- $path $new_user_path...
8	8	----> not contains -- $path $new_user_path
6	6	----> set -a new_user_path $path
3	21	---> if not contains -- $path $new_user_path...
12	12	----> not contains -- $path $new_user_path
6	6	----> set -a new_user_path $path
1	12	---> if not contains -- $path $new_user_path...
7	7	----> not contains -- $path $new_user_path
4	4	----> set -a new_user_path $path
1	13	---> if not contains -- $path $new_user_path...
8	8	----> not contains -- $path $new_user_path
4	4	----> set -a new_user_path $path
2	13	---> if not contains -- $path $new_user_path...
7	7	----> not contains -- $path $new_user_path
4	4	----> set -a new_user_path $path
1	13	---> if not contains -- $path $new_user_path...
8	8	----> not contains -- $path $new_user_path
4	4	----> set -a new_user_path $path
2	122	--> if test (count $new_user_path) -lt (count $fish_user_paths)...
59	120	---> test (count $new_user_path) -lt (count $fish_user_paths)
50	50	----> count $new_user_path
11	11	----> count $fish_user_paths
21	21	--> set -l local_path $PATH
6	6	--> for x in $__fish_added_user_paths...
4	4	--> set -g __fish_added_user_paths
4	1242	--> if set -q fish_user_paths...
3	3	---> set -q fish_user_paths
162	1235	---> for x in (string split ":" -- $fish_user_paths[-1..1])...
26	26	----> string split ":" -- $fish_user_paths[-1..1]
6	116	----> if set -l idx (contains --index -- $x $local_path)...
59	98	-----> set -l idx (contains --index -- $x $local_path)
39	39	------> contains --index -- $x $local_path
12	12	-----> set -e local_path[$idx]
8	8	----> set -p local_path $x
6	119	----> if set -l idx (contains --index -- $x $local_path)...
65	104	-----> set -l idx (contains --index -- $x $local_path)
39	39	------> contains --index -- $x $local_path
9	9	-----> set -e local_path[$idx]
9	9	----> set -p local_path $x
5	70	----> if set -l idx (contains --index -- $x $local_path)...
37	57	-----> set -l idx (contains --index -- $x $local_path)
20	20	------> contains --index -- $x $local_path
8	8	-----> set -e local_path[$idx]
7	7	----> set -p local_path $x
12	137	----> if set -l idx (contains --index -- $x $local_path)...
74	104	-----> set -l idx (contains --index -- $x $local_path)
30	30	------> contains --index -- $x $local_path
21	21	-----> set -e local_path[$idx]
12	12	----> set -p local_path $x
4	115	----> if set -l idx (contains --index -- $x $local_path)...
68	101	-----> set -l idx (contains --index -- $x $local_path)
33	33	------> contains --index -- $x $local_path
10	10	-----> set -e local_path[$idx]
10	10	----> set -p local_path $x
6	94	----> if set -l idx (contains --index -- $x $local_path)...
46	78	-----> set -l idx (contains --index -- $x $local_path)
32	32	------> contains --index -- $x $local_path
10	10	-----> set -e local_path[$idx]
10	10	----> set -p local_path $x
4	80	----> if set -l idx (contains --index -- $x $local_path)...
41	65	-----> set -l idx (contains --index -- $x $local_path)
24	24	------> contains --index -- $x $local_path
11	11	-----> set -e local_path[$idx]
10	10	----> set -p local_path $x
5	73	----> if set -l idx (contains --index -- $x $local_path)...
37	59	-----> set -l idx (contains --index -- $x $local_path)
22	22	------> contains --index -- $x $local_path
9	9	-----> set -e local_path[$idx]
9	9	----> set -p local_path $x
5	101	----> if set -l idx (contains --index -- $x $local_path)...
59	87	-----> set -l idx (contains --index -- $x $local_path)
28	28	------> contains --index -- $x $local_path
9	9	-----> set -e local_path[$idx]
6	6	----> set -p local_path $x
3	56	----> if set -l idx (contains --index -- $x $local_path)...
30	47	-----> set -l idx (contains --index -- $x $local_path)
17	17	------> contains --index -- $x $local_path
6	6	-----> set -e local_path[$idx]
5	5	----> set -p local_path $x
20	20	--> set -xg PATH $local_path
4	4	-> function __fish_expand_pid_args...
11	33	-> for jobbltn in bg wait disown...
5	5	--> function $jobbltn -V jobbltn...
12	12	--> function $jobbltn -V jobbltn...
5	5	--> function $jobbltn -V jobbltn...
2	2	-> function fg...
1	1	-> function kill...
6	6	-> set -l sourcelist
135	22022	-> for file in $__fish_config_dir/conf.d/*.fish $__fish_sysconf_dir/conf.d/*.fish $__fish_vendor_confdirs/*.fish...
40	71	--> set -l basename (string replace -r '^.*/' '' -- $file)
31	31	---> string replace -r '^.*/' '' -- $file
7	7	--> contains -- $basename $sourcelist
6	6	--> set sourcelist $sourcelist $basename
17	17	--> test -f $file -a -r $file
62	145	--> source $file
24	24	---> contains $HOME/.local/bin $PATH
59	59	---> command -qv fig
33	50	--> set -l basename (string replace -r '^.*/' '' -- $file)
17	17	---> string replace -r '^.*/' '' -- $file
7	7	--> contains -- $basename $sourcelist
5	5	--> set sourcelist $sourcelist $basename
13	13	--> test -f $file -a -r $file
38	82	--> source $file
17	17	---> contains $HOME/.local/bin $PATH
27	27	---> command -qv fig
28	41	--> set -l basename (string replace -r '^.*/' '' -- $file)
13	13	---> string replace -r '^.*/' '' -- $file
7	7	--> contains -- $basename $sourcelist
6	6	--> set sourcelist $sourcelist $basename
11	11	--> test -f $file -a -r $file
52	136	--> source $file
30	42	---> abbr nv nvim
12	12	----> source /usr/share/fish/functions/abbr.fish
4	4	---> abbr e emacs
3	3	---> abbr h hx
4	4	---> abbr en emacs -nw
3	3	---> abbr ec emacsclient
2	2	---> abbr g git
3	3	---> abbr lg lazygit
3	3	---> abbr .. cd ../
6	6	---> abbr ... cd ../../
4	4	---> abbr .... cd ../../../
4	4	---> abbr ..... cd ../../../../
3	3	---> abbr open xdg-open
3	3	---> abbr man batman
38	67	--> set -l basename (string replace -r '^.*/' '' -- $file)
29	29	---> string replace -r '^.*/' '' -- $file
8	8	--> contains -- $basename $sourcelist
6	6	--> set sourcelist $sourcelist $basename
12	12	--> test -f $file -a -r $file
235	8511	--> source $file
43	780	---> set -l install_dir (dirname (status dirname))
728	737	----> dirname (status dirname)
9	9	-----> status dirname
10	10	---> set -x FORGIT_INSTALL_DIR "$install_dir/conf.d"
7	7	---> set -x FORGIT "$FORGIT_INSTALL_DIR/bin/git-forgit"
2	12	---> if not test -e "$FORGIT"...
10	10	----> not test -e "$FORGIT"
3	3	---> function forgit::warn...
5	5	---> set unexported_vars 0
1716	5490	---> set | awk -F ' ' '{ print $1 }' | grep FORGIT_ | while read var
    if not set -x | grep -q "^$var\b"
        if test $unexported_vars = 0
            forgit::warn "Config options have to be exported in future versions of forgit."
            forgit::warn "Please update your config accordingly:"
        end
        forgit::warn "  set -x $var \"$$var\""
        set unexported_vars (math $unexported_vars + 1)
        set -x $var $$var
    end
end
33	975	----> source /usr/share/fish/functions/grep.fish
13	942	-----> if echo | command grep --color=auto "" >/dev/null 2>&1...
924	924	------> echo | command grep --color=auto "" >/dev/null 2>&1
5	5	------> function grep...
1444	1444	----> command grep --color=auto $argv
34	34	----> read var
2	1301	----> if not set -x | grep -q "^$var\b"...
228	1299	-----> not set -x | grep -q "^$var\b"
1071	1071	------> command grep --color=auto $argv
20	20	----> read var
84	1020	---> alias git-forgit "$FORGIT"
187	196	----> source /usr/share/fish/functions/alias.fish
9	9	-----> function alias --description 'Creates a function wrapping a command'...
29	29	----> set -l options h/help s/save
16	16	----> argparse -n alias --max-args=2 $options -- $argv
1	6	----> if set -q _flag_help...
5	5	-----> set -q _flag_help
4	4	----> set -l name
4	4	----> set -l body
3	3	----> set -l prefix
7	22	----> if not set -q argv[1]...
3	3	-----> not set -q argv[1]
2	2	-----> not set -q argv[2]
6	6	-----> set name $argv[1]
4	4	-----> set body $argv[2]
3	15	----> if test -z "$name"...
8	8	-----> test -z "$name"
4	4	-----> test -z "$body"
157	157	----> printf '%s\n' $body | read -l --list words
27	27	----> set -l first_word $words[1]
13	13	----> set -l last_word $words[-1]
3	17	----> if test $first_word = $name...
14	14	-----> test $first_word = $name
141	188	----> set -l cmd_string (string escape -- "alias $argv")
47	47	-----> string escape -- "alias $argv"
9	9	----> set -l wraps
5	92	----> if test $first_word != $name...
14	14	-----> test $first_word != $name
6	6	-----> test $last_word != $name
53	67	-----> set wraps --wraps (string escape -- $body)
14	14	------> string escape -- $body
113	126	----> echo "function $name $wraps --description $cmd_string; $prefix $body \$argv
        end" | source
13	13	-----> function git-forgit --wraps /home/arpangreat/.config/fish/conf.d/bin/git-forgit --description 'alias git-forgit /home/arpangreat/.config/fish/conf.d/bin/git-forgit'...
2	12	----> if set -q _flag_save...
10	10	-----> set -q _flag_save
31	949	---> if test -z "$FORGIT_NO_ALIASES"...
13	13	----> test -z "$FORGIT_NO_ALIASES"
96	121	----> abbr -a -- (string collect $forgit_add; or string collect "ga") git-forgit add
15	15	-----> string collect $forgit_add
10	10	-----> string collect "ga"
56	70	----> abbr -a -- (string collect $forgit_reset_head; or string collect "grh") git-forgit reset_head
9	9	-----> string collect $forgit_reset_head
5	5	-----> string collect "grh"
37	48	----> abbr -a -- (string collect $forgit_log; or string collect "glo") git-forgit log
7	7	-----> string collect $forgit_log
4	4	-----> string collect "glo"
36	45	----> abbr -a -- (string collect $forgit_diff; or string collect "gd") git-forgit diff
6	6	-----> string collect $forgit_diff
3	3	-----> string collect "gd"
30	40	----> abbr -a -- (string collect $forgit_ignore; or string collect "gi") git-forgit ignore
6	6	-----> string collect $forgit_ignore
4	4	-----> string collect "gi"
33	41	----> abbr -a -- (string collect $forgit_checkout_file; or string collect "gcf") git-forgit checkout_file
5	5	-----> string collect $forgit_checkout_file
3	3	-----> string collect "gcf"
36	45	----> abbr -a -- (string collect $forgit_checkout_branch; or string collect "gcb") git-forgit checkout_branch
5	5	-----> string collect $forgit_checkout_branch
4	4	-----> string collect "gcb"
30	39	----> abbr -a -- (string collect $forgit_branch_delete; or string collect "gbd") git-forgit branch_delete
5	5	-----> string collect $forgit_branch_delete
4	4	-----> string collect "gbd"
37	48	----> abbr -a -- (string collect $forgit_clean; or string collect "gclean") git-forgit clean
6	6	-----> string collect $forgit_clean
5	5	-----> string collect "gclean"
44	53	----> abbr -a -- (string collect $forgit_stash_show; or string collect "gss") git-forgit stash_show
5	5	-----> string collect $forgit_stash_show
4	4	-----> string collect "gss"
51	77	----> abbr -a -- (string collect $forgit_stash_push; or string collect "gsp") git-forgit stash_push
6	6	-----> string collect $forgit_stash_push
20	20	-----> string collect "gsp"
41	52	----> abbr -a -- (string collect $forgit_cherry_pick; or string collect "gcp") git-forgit cherry_pick_from_branch
7	7	-----> string collect $forgit_cherry_pick
4	4	-----> string collect "gcp"
33	43	----> abbr -a -- (string collect $forgit_rebase; or string collect "grb") git-forgit rebase
6	6	-----> string collect $forgit_rebase
4	4	-----> string collect "grb"
30	38	----> abbr -a -- (string collect $forgit_fixup; or string collect "gfu") git-forgit fixup
5	5	-----> string collect $forgit_fixup
3	3	-----> string collect "gfu"
28	36	----> abbr -a -- (string collect $forgit_checkout_commit; or string collect "gco") git-forgit checkout_commit
5	5	-----> string collect $forgit_checkout_commit
3	3	-----> string collect "gco"
32	41	----> abbr -a -- (string collect $forgit_revert_commit; or string collect "grc") git-forgit revert_commit
6	6	-----> string collect $forgit_revert_commit
3	3	-----> string collect "grc"
30	36	----> abbr -a -- (string collect $forgit_blame; or string collect "gbl") git-forgit blame
4	4	-----> string collect $forgit_blame
2	2	-----> string collect "gbl"
25	32	----> abbr -a -- (string collect $forgit_checkout_tag; or string collect "gct") git-forgit checkout_tag
4	4	-----> string collect $forgit_checkout_tag
3	3	-----> string collect "gct"
32	62	--> set -l basename (string replace -r '^.*/' '' -- $file)
30	30	---> string replace -r '^.*/' '' -- $file
11	11	--> contains -- $basename $sourcelist
7	7	--> set sourcelist $sourcelist $basename
20	20	--> test -f $file -a -r $file
69	142	--> source $file
6	6	---> function _plugin-bang-bang_key_bindings --on-variable fish_key_bindings...
3	3	---> function _plugin-bang-bang_uninstall --on-event plugin-bang-bang_uninstall...
11	64	---> _plugin-bang-bang_key_bindings
27	27	----> bind --erase !
5	5	----> bind --erase '$'
12	21	----> switch "$fish_key_bindings"...
5	5	-----> bind --mode insert ! __history_previous_command
4	4	-----> bind --mode insert '$' __history_previous_command_arguments
33	49	--> set -l basename (string replace -r '^.*/' '' -- $file)
16	16	---> string replace -r '^.*/' '' -- $file
9	9	--> contains -- $basename $sourcelist
8	8	--> set sourcelist $sourcelist $basename
14	14	--> test -f $file -a -r $file
66	12181	--> source $file
10	12115	---> if type -q flatpak...
75	75	----> type -q flatpak
12	12	----> set -x --path XDG_DATA_DIRS $XDG_DATA_DIRS
4	4	----> set -q XDG_DATA_DIRS[1]
3	3	----> set -q XDG_DATA_HOME
8	8	----> set -l XDG_DATA_HOME $HOME/.local/share
5	5	----> set -l installations $XDG_DATA_HOME/flatpak
3	11955	----> begin...
4	4	-----> set -le G_MESSAGES_DEBUG
5	5	-----> set -lx GIO_USE_VFS local
117	11943	-----> set installations $installations (flatpak --installations)
11826	11826	------> flatpak --installations
18	43	----> for dir in {$installations[-1..1]}/exports/share...
2	18	-----> if not contains $dir $XDG_DATA_DIRS...
16	16	------> not contains $dir $XDG_DATA_DIRS
0	7	-----> if not contains $dir $XDG_DATA_DIRS...
7	7	------> not contains $dir $XDG_DATA_DIRS
42	84	--> set -l basename (string replace -r '^.*/' '' -- $file)
42	42	---> string replace -r '^.*/' '' -- $file
9	9	--> contains -- $basename $sourcelist
8	8	--> set sourcelist $sourcelist $basename
15	15	--> test -f $file -a -r $file
54	60	--> source $file
1	6	---> if status --is-login...
5	5	----> status --is-login
15	15	> builtin source /etc/fish/config.fish
263	115929	> builtin source /home/arpangreat/.config/fish/config.fish
2348	4594	-> starship init fish | source
-466	2246	--> source (/usr/bin/starship init fish --print-full-init | psub)
151	1836	---> /usr/bin/starship init fish --print-full-init | psub
149	157	----> source /usr/share/fish/functions/psub.fish
8	8	-----> function psub --description "Read from stdin into a file and output the filename. Remove the file when the command that called psub exits."...
15	15	----> set -l options -x 'f,F' -x 'F,s' h/help f/file F/fifo 's/suffix=' T-testing
28	28	----> argparse -n psub --max-args=0 $options -- $argv
2	6	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
5	5	----> set -l dirname
4	4	----> set -l filename
3	3	----> set -l funcname
0	4	----> if not status --is-command-substitution...
4	4	-----> not status --is-command-substitution
4	4	----> set -l tmpdir /tmp
2	2	----> set -q TMPDIR
12	1254	----> if set -q _flag_fifo...
2	2	-----> set -q _flag_fifo
6	6	-----> test -z "$_flag_suffix"
43	541	-----> set filename (mktemp $tmpdir/.psub.XXXXXXXXXX)
498	498	------> mktemp $tmpdir/.psub.XXXXXXXXXX
693	693	-----> command cat >$filename
18	18	----> echo $filename
2	7	----> if set -q _flag_testing...
5	5	-----> set -q _flag_testing
7	168	----> while true
...
21	21	-----> true
44	69	-----> set funcname __fish_psub_(random)
25	25	------> random
4	71	-----> if not functions $funcname >/dev/null 2>/dev/null...
64	64	------> not functions $funcname >/dev/null 2>/dev/null
3	3	------> break
10	10	----> function $funcname --on-job-exit caller --inherit-variable filename --inherit-variable dirname --inherit-variable funcname...
2	2	---> function fish_prompt...
2	2	---> function fish_right_prompt...
9	9	---> set -g VIRTUAL_ENV_DISABLE_PROMPT 1
4	4	---> builtin functions -e fish_mode_prompt
19	19	---> set -gx STARSHIP_SHELL "fish"
3	3	---> function reset-transient --on-event fish_postexec...
1	1	---> function transient_execute...
3	3	---> function enable_transience --description 'enable transient prompt keybindings'...
4	4	---> function disable_transience --description 'remove transient prompt keybindings'...
32	144	---> set -gx STARSHIP_SESSION_KEY (string sub -s1 -l16 (random)(random)(random)(random)(random)0000000000000000)
92	112	----> string sub -s1 -l16 (random)(random)(random)(random)(random)0000000000000000
6	6	-----> random
5	5	-----> random
3	3	-----> random
3	3	-----> random
3	3	-----> random
12	685	---> __fish_psub_31629 JOB_EXIT 0 0
656	656	----> command rm $filename
0	11	----> if test -n "$dirname"...
11	11	-----> test -n "$dirname"
6	6	----> functions -e $funcname
3	3	-> function fish_greeting...
4	4	-> function fish_hybrid_key_bindings --description \
    "Vi-style bindings that inherit emacs-style bindings in all modes"...
16	54	-> set -g fish_key_bindings fish_hybrid_key_bindings
10	38	--> _plugin-bang-bang_key_bindings VARIABLE SET fish_key_bindings
6	6	---> bind --erase !
4	4	---> bind --erase '$'
9	18	---> switch "$fish_key_bindings"...
5	5	----> bind --mode insert ! __history_previous_command
4	4	----> bind --mode insert '$' __history_previous_command_arguments
2	2	-> function ya...
2405	2588	-> fzf --fish | source
13	13	--> status is-interactive
3	3	--> function fzf_key_bindings...
28	167	--> fzf_key_bindings
1	1	---> function __fzf_defaults...
8	8	---> function fzf-file-widget -d "List files and folders"...
3	3	---> function fzf-history-widget -d "Show command history"...
2	2	---> function fzf-cd-widget -d "Change directory"...
1	1	---> function __fzfcmd...
10	10	---> bind \cr fzf-history-widget
8	22	---> if not set -q FZF_CTRL_T_COMMAND...
5	5	----> not set -q FZF_CTRL_T_COMMAND
9	9	----> bind \ct fzf-file-widget
2	9	---> if not set -q FZF_ALT_C_COMMAND...
3	3	----> not set -q FZF_ALT_C_COMMAND
4	4	----> bind \ec fzf-cd-widget
4	76	---> if bind -M insert > /dev/null 2>&1...
49	49	----> bind -M insert > /dev/null 2>&1
6	6	----> bind -M insert \cr fzf-history-widget
2	9	----> if not set -q FZF_CTRL_T_COMMAND...
3	3	-----> not set -q FZF_CTRL_T_COMMAND
4	4	-----> bind -M insert \ct fzf-file-widget
1	8	----> if not set -q FZF_ALT_C_COMMAND...
3	3	-----> not set -q FZF_ALT_C_COMMAND
4	4	-----> bind -M insert \ec fzf-cd-widget
4	4	---> function __fzf_parse_commandline -d 'Parse the current command line token and return split of existing filepath, fzf query, and optional -option= prefix'...
3	3	---> function __fzf_get_dir -d 'Find the longest existing filepath from input string'...
7	7	-> set fish_vi_force_cursor
4	4	-> set fish_cursor_default block
4	4	-> set fish_cursor_insert line
5	5	-> set fish_cursor_replace_one underscore
4	4	-> set fish_cursor_visual block
1	8	-> if status --is-interactive...
3	3	--> status --is-interactive
4	4	--> not set -q TMUX
5	5	-> set -gx EDITOR nvim
5	5	-> set -gx MANPAGER "sh -c 'col -bx | bat -l man'"
5	5	-> set -g DENO_INSTALL "/home/arpangreat/.deno"
81	1459	-> fish_add_path $DENO_INSTALL/bin:$PATH
163	168	--> source /usr/share/fish/functions/fish_add_path.fish
5	5	---> function fish_add_path --description "Add paths to the PATH"...
39	39	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	4	--> if set -q _flag_help...
3	3	---> set -q _flag_help
7	7	--> set -l scope $_flag_global $_flag_universal
2	7	--> if not set -q scope[1]...
3	3	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
4	4	--> set -l var fish_user_paths
3	3	--> set -q _flag_path
6	6	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
3	3	--> set mode -p
3	3	--> set -l newpaths
2	2	--> set -l indexes
59	1095	--> for path in $argv...
63	88	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
25	25	----> builtin realpath -s -- $path 2>/dev/null
6	37	---> if not test -d "$p"...
20	20	----> not test -d "$p"
2	7	----> if set -q _flag_verbose...
5	5	-----> set -q _flag_verbose
4	4	----> continue
46	72	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
26	26	----> builtin realpath -s -- $path 2>/dev/null
4	26	---> if not test -d "$p"...
13	13	----> not test -d "$p"
2	6	----> if set -q _flag_verbose...
4	4	-----> set -q _flag_verbose
3	3	----> continue
29	46	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
17	17	----> builtin realpath -s -- $path 2>/dev/null
2	14	---> if not test -d "$p"...
7	7	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
24	38	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
3	13	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
24	38	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
3	13	---> if not test -d "$p"...
6	6	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
23	36	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
13	13	----> builtin realpath -s -- $path 2>/dev/null
5	16	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	4	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
24	39	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
2	13	---> if not test -d "$p"...
7	7	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
24	37	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
13	13	----> builtin realpath -s -- $path 2>/dev/null
1	12	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
24	39	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
3	13	---> if not test -d "$p"...
6	6	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
24	37	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
13	13	----> builtin realpath -s -- $path 2>/dev/null
3	12	---> if not test -d "$p"...
5	5	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
23	35	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
12	12	----> builtin realpath -s -- $path 2>/dev/null
2	12	---> if not test -d "$p"...
6	6	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
25	38	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
13	13	----> builtin realpath -s -- $path 2>/dev/null
3	13	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
23	36	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
13	13	----> builtin realpath -s -- $path 2>/dev/null
1	12	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
23	35	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
12	12	----> builtin realpath -s -- $path 2>/dev/null
3	26	---> if not test -d "$p"...
6	6	----> not test -d "$p"
0	10	----> if set -q _flag_verbose...
10	10	-----> set -q _flag_verbose
7	7	----> continue
24	36	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
12	12	----> builtin realpath -s -- $path 2>/dev/null
1	12	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
23	36	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
13	13	----> builtin realpath -s -- $path 2>/dev/null
1	12	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
23	35	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
12	12	----> builtin realpath -s -- $path 2>/dev/null
3	13	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
23	35	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
12	12	----> builtin realpath -s -- $path 2>/dev/null
1	11	---> if not test -d "$p"...
5	5	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
2	2	----> continue
16	16	--> set -l newvar $$var
1	3	--> if set -q _flag_move...
2	2	---> set -q _flag_move
5	5	--> set $mode newvar $newpaths
4	11	--> if set -q newpaths[1]...
3	3	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
2	2	---> return 1
5	5	-> set -g JAVA_HOME /usr/lib/jvm/default
6	6	-> set -g GOPATH $HOME/go
5	5	-> set -g LLVM_ROOT $HOME/llvm-project
4	4	-> set -g CHROME_EXECUTABLE /usr/bin/brave
4	4	-> set -g ANDROID_HOME /home/arpangreat/Android/Sdk
4	4	-> set -g BUN_INSTALL "/home/arpangreat/.bun"
3	3	-> set -g SFML_INCLUDE_DIR /usr/include/SFML/
3	3	-> set -g SFML_LIBS_DIR /usr/lib/SFML/
5	5	-> set -g LD_LIBRARY_PATH /usr/lib/SFML/
17	2782	-> set -Ua fish_user_paths /home/arpangreat/.rye/env
15	2765	--> __fish_reconstruct_path VARIABLE SET fish_user_paths
285	285	---> set -l new_user_path
88	382	---> for path in (string split : -- $fish_user_paths)...
63	63	----> string split : -- $fish_user_paths
4	28	----> if not contains -- $path $new_user_path...
13	13	-----> not contains -- $path $new_user_path
11	11	-----> set -a new_user_path $path
3	20	----> if not contains -- $path $new_user_path...
9	9	-----> not contains -- $path $new_user_path
8	8	-----> set -a new_user_path $path
4	18	----> if not contains -- $path $new_user_path...
8	8	-----> not contains -- $path $new_user_path
6	6	-----> set -a new_user_path $path
3	17	----> if not contains -- $path $new_user_path...
8	8	-----> not contains -- $path $new_user_path
6	6	-----> set -a new_user_path $path
3	19	----> if not contains -- $path $new_user_path...
9	9	-----> not contains -- $path $new_user_path
7	7	-----> set -a new_user_path $path
4	23	----> if not contains -- $path $new_user_path...
11	11	-----> not contains -- $path $new_user_path
8	8	-----> set -a new_user_path $path
5	23	----> if not contains -- $path $new_user_path...
10	10	-----> not contains -- $path $new_user_path
8	8	-----> set -a new_user_path $path
3	20	----> if not contains -- $path $new_user_path...
11	11	-----> not contains -- $path $new_user_path
6	6	-----> set -a new_user_path $path
2	23	----> if not contains -- $path $new_user_path...
13	13	-----> not contains -- $path $new_user_path
8	8	-----> set -a new_user_path $path
3	25	----> if not contains -- $path $new_user_path...
14	14	-----> not contains -- $path $new_user_path
8	8	-----> set -a new_user_path $path
2	15	----> if not contains -- $path $new_user_path...
13	13	-----> not contains -- $path $new_user_path
8	2083	---> if test (count $new_user_path) -lt (count $fish_user_paths)...
68	111	----> test (count $new_user_path) -lt (count $fish_user_paths)
24	24	-----> count $new_user_path
19	19	-----> count $fish_user_paths
35	1961	----> set fish_user_paths $new_user_path
30	1926	-----> __fish_reconstruct_path VARIABLE SET fish_user_paths
440	440	------> set -l new_user_path
66	234	------> for path in (string split : -- $fish_user_paths)...
45	45	-------> string split : -- $fish_user_paths
3	18	-------> if not contains -- $path $new_user_path...
9	9	--------> not contains -- $path $new_user_path
6	6	--------> set -a new_user_path $path
2	11	-------> if not contains -- $path $new_user_path...
5	5	--------> not contains -- $path $new_user_path
4	4	--------> set -a new_user_path $path
2	11	-------> if not contains -- $path $new_user_path...
5	5	--------> not contains -- $path $new_user_path
4	4	--------> set -a new_user_path $path
2	11	-------> if not contains -- $path $new_user_path...
5	5	--------> not contains -- $path $new_user_path
4	4	--------> set -a new_user_path $path
2	11	-------> if not contains -- $path $new_user_path...
6	6	--------> not contains -- $path $new_user_path
3	3	--------> set -a new_user_path $path
2	12	-------> if not contains -- $path $new_user_path...
6	6	--------> not contains -- $path $new_user_path
4	4	--------> set -a new_user_path $path
2	12	-------> if not contains -- $path $new_user_path...
6	6	--------> not contains -- $path $new_user_path
4	4	--------> set -a new_user_path $path
2	12	-------> if not contains -- $path $new_user_path...
6	6	--------> not contains -- $path $new_user_path
4	4	--------> set -a new_user_path $path
1	11	-------> if not contains -- $path $new_user_path...
6	6	--------> not contains -- $path $new_user_path
4	4	--------> set -a new_user_path $path
1	14	-------> if not contains -- $path $new_user_path...
8	8	--------> not contains -- $path $new_user_path
5	5	--------> set -a new_user_path $path
1	83	------> if test (count $new_user_path) -lt (count $fish_user_paths)...
53	82	-------> test (count $new_user_path) -lt (count $fish_user_paths)
17	17	--------> count $new_user_path
12	12	--------> count $fish_user_paths
26	26	------> set -l local_path $PATH
7	7	------> for x in $__fish_added_user_paths...
7	7	------> set -g __fish_added_user_paths
4	1070	------> if set -q fish_user_paths...
5	5	-------> set -q fish_user_paths
89	1061	-------> for x in (string split ":" -- $fish_user_paths[-1..1])...
36	36	--------> string split ":" -- $fish_user_paths[-1..1]
5	84	--------> if set -l idx (contains --index -- $x $local_path)...
39	68	---------> set -l idx (contains --index -- $x $local_path)
29	29	----------> contains --index -- $x $local_path
11	11	---------> set -e local_path[$idx]
10	10	--------> set -p local_path $x
7	99	--------> if set -l idx (contains --index -- $x $local_path)...
57	81	---------> set -l idx (contains --index -- $x $local_path)
24	24	----------> contains --index -- $x $local_path
11	11	---------> set -e local_path[$idx]
10	10	--------> set -p local_path $x
7	95	--------> if set -l idx (contains --index -- $x $local_path)...
46	71	---------> set -l idx (contains --index -- $x $local_path)
25	25	----------> contains --index -- $x $local_path
17	17	---------> set -e local_path[$idx]
8	8	--------> set -p local_path $x
6	82	--------> if set -l idx (contains --index -- $x $local_path)...
44	64	---------> set -l idx (contains --index -- $x $local_path)
20	20	----------> contains --index -- $x $local_path
12	12	---------> set -e local_path[$idx]
11	11	--------> set -p local_path $x
5	86	--------> if set -l idx (contains --index -- $x $local_path)...
42	70	---------> set -l idx (contains --index -- $x $local_path)
28	28	----------> contains --index -- $x $local_path
11	11	---------> set -e local_path[$idx]
12	12	--------> set -p local_path $x
5	79	--------> if set -l idx (contains --index -- $x $local_path)...
37	63	---------> set -l idx (contains --index -- $x $local_path)
26	26	----------> contains --index -- $x $local_path
11	11	---------> set -e local_path[$idx]
11	11	--------> set -p local_path $x
5	80	--------> if set -l idx (contains --index -- $x $local_path)...
39	64	---------> set -l idx (contains --index -- $x $local_path)
25	25	----------> contains --index -- $x $local_path
11	11	---------> set -e local_path[$idx]
10	10	--------> set -p local_path $x
4	75	--------> if set -l idx (contains --index -- $x $local_path)...
36	60	---------> set -l idx (contains --index -- $x $local_path)
24	24	----------> contains --index -- $x $local_path
11	11	---------> set -e local_path[$idx]
10	10	--------> set -p local_path $x
4	76	--------> if set -l idx (contains --index -- $x $local_path)...
38	62	---------> set -l idx (contains --index -- $x $local_path)
24	24	----------> contains --index -- $x $local_path
10	10	---------> set -e local_path[$idx]
11	11	--------> set -p local_path $x
3	77	--------> if set -l idx (contains --index -- $x $local_path)...
38	63	---------> set -l idx (contains --index -- $x $local_path)
25	25	----------> contains --index -- $x $local_path
11	11	---------> set -e local_path[$idx]
10	10	--------> set -p local_path $x
29	29	------> set -xg PATH $local_path
3	3	----> return
8	8	-> set -g BROWSER /usr/bin/floorp
9	9	-> set -x DEBUGINFOD_URLS "https://debuginfod.archlinux.org"
36	328	-> fish_add_path $GOPATH/go/bin
28	28	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
3	8	--> if set -q _flag_help...
5	5	---> set -q _flag_help
10	10	--> set -l scope $_flag_global $_flag_universal
3	13	--> if not set -q scope[1]...
5	5	---> not set -q scope[1]
5	5	---> not set -q fish_user_paths
6	6	--> set -l var fish_user_paths
4	4	--> set -q _flag_path
10	10	--> set -l mode $_flag_prepend $_flag_append
11	11	--> set -q mode[1]
6	6	--> set mode -p
5	5	--> set -l newpaths
5	5	--> set -l indexes
14	126	--> for path in $argv...
51	83	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
32	32	----> builtin realpath -s -- $path 2>/dev/null
4	29	---> if not test -d "$p"...
14	14	----> not test -d "$p"
2	7	----> if set -q _flag_verbose...
5	5	-----> set -q _flag_verbose
4	4	----> continue
24	24	--> set -l newvar $$var
1	6	--> if set -q _flag_move...
5	5	---> set -q _flag_move
11	11	--> set $mode newvar $newpaths
7	19	--> if set -q newpaths[1]...
5	5	---> set -q newpaths[1]
3	3	---> set -q indexes[1]
4	4	---> return 1
30	381	-> fish_add_path /usr/local/go/bin/
26	26	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
2	7	--> if set -q _flag_help...
5	5	---> set -q _flag_help
10	10	--> set -l scope $_flag_global $_flag_universal
2	12	--> if not set -q scope[1]...
5	5	---> not set -q scope[1]
5	5	---> not set -q fish_user_paths
6	6	--> set -l var fish_user_paths
5	5	--> set -q _flag_path
9	9	--> set -l mode $_flag_prepend $_flag_append
4	4	--> set -q mode[1]
6	6	--> set mode -p
4	4	--> set -l newpaths
5	5	--> set -l indexes
15	205	--> for path in $argv...
70	98	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
28	28	----> builtin realpath -s -- $path 2>/dev/null
2	16	---> if not test -d "$p"...
14	14	----> not test -d "$p"
5	76	---> if set -l ind (contains -i -- $p $$var)...
39	64	----> set -l ind (contains -i -- $p $$var)
25	25	-----> contains -i -- $p $$var
2	7	----> if set -q _flag_move...
5	5	-----> set -q _flag_move
18	18	--> set -l newvar $$var
1	5	--> if set -q _flag_move...
4	4	---> set -q _flag_move
9	9	--> set $mode newvar $newpaths
7	20	--> if set -q newpaths[1]...
5	5	---> set -q newpaths[1]
4	4	---> set -q indexes[1]
4	4	---> return 1
33	240	-> fish_add_path $HOME/.cargo/env
25	25	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	6	--> if set -q _flag_help...
5	5	---> set -q _flag_help
9	9	--> set -l scope $_flag_global $_flag_universal
2	12	--> if not set -q scope[1]...
5	5	---> not set -q scope[1]
5	5	---> not set -q fish_user_paths
6	6	--> set -l var fish_user_paths
4	4	--> set -q _flag_path
10	10	--> set -l mode $_flag_prepend $_flag_append
4	4	--> set -q mode[1]
4	4	--> set mode -p
5	5	--> set -l newpaths
4	4	--> set -l indexes
13	89	--> for path in $argv...
37	59	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
22	22	----> builtin realpath -s -- $path 2>/dev/null
3	17	---> if not test -d "$p"...
9	9	----> not test -d "$p"
1	4	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
11	11	--> set -l newvar $$var
1	3	--> if set -q _flag_move...
2	2	---> set -q _flag_move
5	5	--> set $mode newvar $newpaths
3	10	--> if set -q newpaths[1]...
3	3	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
2	2	---> return 1
22	207	-> fish_add_path $HOME/.cargo/bin
14	14	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
0	3	--> if set -q _flag_help...
3	3	---> set -q _flag_help
4	4	--> set -l scope $_flag_global $_flag_universal
1	5	--> if not set -q scope[1]...
2	2	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
3	3	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
4	4	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
2	2	--> set mode -p
2	2	--> set -l newpaths
2	2	--> set -l indexes
8	114	--> for path in $argv...
29	45	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
16	16	----> builtin realpath -s -- $path 2>/dev/null
0	8	---> if not test -d "$p"...
8	8	----> not test -d "$p"
3	53	---> if set -l ind (contains -i -- $p $$var)...
32	46	----> set -l ind (contains -i -- $p $$var)
14	14	-----> contains -i -- $p $$var
1	4	----> if set -q _flag_move...
3	3	-----> set -q _flag_move
10	10	--> set -l newvar $$var
1	3	--> if set -q _flag_move...
2	2	---> set -q _flag_move
5	5	--> set $mode newvar $newpaths
3	10	--> if set -q newpaths[1]...
3	3	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
2	2	---> return 1
20	211	-> fish_add_path $HOME/.opam/default/bin
14	14	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
0	3	--> if set -q _flag_help...
3	3	---> set -q _flag_help
4	4	--> set -l scope $_flag_global $_flag_universal
1	6	--> if not set -q scope[1]...
3	3	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
3	3	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
5	5	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
2	2	--> set mode -p
2	2	--> set -l newpaths
2	2	--> set -l indexes
8	120	--> for path in $argv...
29	46	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
17	17	----> builtin realpath -s -- $path 2>/dev/null
1	9	---> if not test -d "$p"...
8	8	----> not test -d "$p"
3	57	---> if set -l ind (contains -i -- $p $$var)...
37	51	----> set -l ind (contains -i -- $p $$var)
14	14	-----> contains -i -- $p $$var
1	3	----> if set -q _flag_move...
2	2	-----> set -q _flag_move
9	9	--> set -l newvar $$var
1	3	--> if set -q _flag_move...
2	2	---> set -q _flag_move
5	5	--> set $mode newvar $newpaths
2	9	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
3	3	---> return 1
18	192	-> fish_add_path /home/arpangreat/.local/bin
14	14	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	3	--> if set -q _flag_help...
2	2	---> set -q _flag_help
5	5	--> set -l scope $_flag_global $_flag_universal
1	6	--> if not set -q scope[1]...
3	3	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
3	3	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
5	5	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
2	2	--> set mode -p
2	2	--> set -l newpaths
2	2	--> set -l indexes
8	102	--> for path in $argv...
28	43	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
1	8	---> if not test -d "$p"...
7	7	----> not test -d "$p"
3	43	---> if set -l ind (contains -i -- $p $$var)...
23	37	----> set -l ind (contains -i -- $p $$var)
14	14	-----> contains -i -- $p $$var
1	3	----> if set -q _flag_move...
2	2	-----> set -q _flag_move
9	9	--> set -l newvar $$var
0	2	--> if set -q _flag_move...
2	2	---> set -q _flag_move
5	5	--> set $mode newvar $newpaths
4	10	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
2	2	---> return 1
16	195	-> fish_add_path /home/arpangreat/.local/share/nvim/mason/bin
13	13	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	3	--> if set -q _flag_help...
2	2	---> set -q _flag_help
5	5	--> set -l scope $_flag_global $_flag_universal
2	6	--> if not set -q scope[1]...
2	2	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
3	3	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
4	4	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
3	3	--> set mode -p
2	2	--> set -l newpaths
2	2	--> set -l indexes
8	109	--> for path in $argv...
28	46	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
18	18	----> builtin realpath -s -- $path 2>/dev/null
0	9	---> if not test -d "$p"...
9	9	----> not test -d "$p"
3	46	---> if set -l ind (contains -i -- $p $$var)...
24	40	----> set -l ind (contains -i -- $p $$var)
16	16	-----> contains -i -- $p $$var
1	3	----> if set -q _flag_move...
2	2	-----> set -q _flag_move
9	9	--> set -l newvar $$var
0	2	--> if set -q _flag_move...
2	2	---> set -q _flag_move
5	5	--> set $mode newvar $newpaths
3	9	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
2	2	---> return 1
19	153	-> fish_add_path /home/arpangreat/.ghcup/bin
13	13	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	3	--> if set -q _flag_help...
2	2	---> set -q _flag_help
4	4	--> set -l scope $_flag_global $_flag_universal
0	5	--> if not set -q scope[1]...
2	2	---> not set -q scope[1]
3	3	---> not set -q fish_user_paths
2	2	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
5	5	--> set -l mode $_flag_prepend $_flag_append
1	1	--> set -q mode[1]
2	2	--> set mode -p
3	3	--> set -l newpaths
2	2	--> set -l indexes
7	64	--> for path in $argv...
27	42	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
3	15	---> if not test -d "$p"...
7	7	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
2	2	----> continue
12	12	--> set -l newvar $$var
1	3	--> if set -q _flag_move...
2	2	---> set -q _flag_move
4	4	--> set $mode newvar $newpaths
4	9	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
1	1	---> set -q indexes[1]
2	2	---> return 1
56	1195	-> fish_add_path $HOME/.tmux/plugins/t-smart-tmux-session-manager/bin:$PATH
33	33	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	3	--> if set -q _flag_help...
2	2	---> set -q _flag_help
4	4	--> set -l scope $_flag_global $_flag_universal
1	5	--> if not set -q scope[1]...
2	2	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
3	3	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
4	4	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
3	3	--> set mode -p
3	3	--> set -l newpaths
3	3	--> set -l indexes
51	1042	--> for path in $argv...
29	47	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
18	18	----> builtin realpath -s -- $path 2>/dev/null
3	28	---> if not test -d "$p"...
10	10	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
12	12	----> continue
36	55	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
19	19	----> builtin realpath -s -- $path 2>/dev/null
3	17	---> if not test -d "$p"...
8	8	----> not test -d "$p"
1	4	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
2	2	----> continue
26	41	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
2	14	---> if not test -d "$p"...
7	7	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
25	39	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
3	14	---> if not test -d "$p"...
7	7	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
23	37	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
2	13	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
23	37	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
1	13	---> if not test -d "$p"...
7	7	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
25	40	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
2	15	---> if not test -d "$p"...
8	8	----> not test -d "$p"
1	4	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
24	39	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
2	13	---> if not test -d "$p"...
7	7	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
23	38	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
3	13	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
27	41	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
2	14	---> if not test -d "$p"...
7	7	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
24	39	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
3	13	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
24	38	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
3	14	---> if not test -d "$p"...
7	7	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
32	49	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
17	17	----> builtin realpath -s -- $path 2>/dev/null
3	14	---> if not test -d "$p"...
7	7	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
24	38	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
3	13	---> if not test -d "$p"...
6	6	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
24	37	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
13	13	----> builtin realpath -s -- $path 2>/dev/null
4	15	---> if not test -d "$p"...
7	7	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
24	38	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
3	13	---> if not test -d "$p"...
6	6	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
1	1	----> continue
23	37	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
2	13	---> if not test -d "$p"...
7	7	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
25	39	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
14	14	----> builtin realpath -s -- $path 2>/dev/null
2	13	---> if not test -d "$p"...
7	7	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
1	1	----> continue
12	12	--> set -l newvar $$var
1	3	--> if set -q _flag_move...
2	2	---> set -q _flag_move
6	6	--> set $mode newvar $newpaths
4	11	--> if set -q newpaths[1]...
3	3	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
2	2	---> return 1
22	168	-> fish_add_path $BUN_INSTALL/bin
20	20	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	3	--> if set -q _flag_help...
2	2	---> set -q _flag_help
5	5	--> set -l scope $_flag_global $_flag_universal
0	6	--> if not set -q scope[1]...
3	3	---> not set -q scope[1]
3	3	---> not set -q fish_user_paths
3	3	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
5	5	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
3	3	--> set mode -p
2	2	--> set -l newpaths
2	2	--> set -l indexes
7	65	--> for path in $argv...
29	44	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
1	14	---> if not test -d "$p"...
7	7	----> not test -d "$p"
2	4	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
10	10	--> set -l newvar $$var
1	3	--> if set -q _flag_move...
2	2	---> set -q _flag_move
5	5	--> set $mode newvar $newpaths
4	10	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
2	2	---> return 1
14	196	-> fish_add_path $HOME/.local/share/nvim/mason/bin
14	14	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
0	3	--> if set -q _flag_help...
3	3	---> set -q _flag_help
4	4	--> set -l scope $_flag_global $_flag_universal
2	6	--> if not set -q scope[1]...
2	2	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
3	3	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
5	5	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
3	3	--> set mode -p
3	3	--> set -l newpaths
3	3	--> set -l indexes
9	106	--> for path in $argv...
27	42	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
1	9	---> if not test -d "$p"...
8	8	----> not test -d "$p"
2	46	---> if set -l ind (contains -i -- $p $$var)...
25	40	----> set -l ind (contains -i -- $p $$var)
15	15	-----> contains -i -- $p $$var
1	4	----> if set -q _flag_move...
3	3	-----> set -q _flag_move
10	10	--> set -l newvar $$var
1	3	--> if set -q _flag_move...
2	2	---> set -q _flag_move
5	5	--> set $mode newvar $newpaths
4	10	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
2	2	---> return 1
20	190	-> fish_add_path $HOME/.ruby/bin
13	13	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
0	3	--> if set -q _flag_help...
3	3	---> set -q _flag_help
5	5	--> set -l scope $_flag_global $_flag_universal
1	5	--> if not set -q scope[1]...
2	2	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
2	2	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
5	5	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
3	3	--> set mode -p
3	3	--> set -l newpaths
2	2	--> set -l indexes
8	101	--> for path in $argv...
26	42	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
16	16	----> builtin realpath -s -- $path 2>/dev/null
0	7	---> if not test -d "$p"...
7	7	----> not test -d "$p"
3	44	---> if set -l ind (contains -i -- $p $$var)...
24	38	----> set -l ind (contains -i -- $p $$var)
14	14	-----> contains -i -- $p $$var
0	3	----> if set -q _flag_move...
3	3	-----> set -q _flag_move
9	9	--> set -l newvar $$var
0	2	--> if set -q _flag_move...
2	2	---> set -q _flag_move
4	4	--> set $mode newvar $newpaths
5	9	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
1	1	---> set -q indexes[1]
1	1	---> return 1
16	188	-> fish_add_path $JAVA_HOME/bin
13	13	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
0	3	--> if set -q _flag_help...
3	3	---> set -q _flag_help
5	5	--> set -l scope $_flag_global $_flag_universal
1	5	--> if not set -q scope[1]...
2	2	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
2	2	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
5	5	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
3	3	--> set mode -p
3	3	--> set -l newpaths
3	3	--> set -l indexes
8	100	--> for path in $argv...
26	41	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
1	9	---> if not test -d "$p"...
8	8	----> not test -d "$p"
3	42	---> if set -l ind (contains -i -- $p $$var)...
22	36	----> set -l ind (contains -i -- $p $$var)
14	14	-----> contains -i -- $p $$var
1	3	----> if set -q _flag_move...
2	2	-----> set -q _flag_move
9	9	--> set -l newvar $$var
1	3	--> if set -q _flag_move...
2	2	---> set -q _flag_move
5	5	--> set $mode newvar $newpaths
3	9	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
2	2	---> return 1
14	184	-> fish_add_path /usr/bin/flutter/bin
12	12	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	3	--> if set -q _flag_help...
2	2	---> set -q _flag_help
5	5	--> set -l scope $_flag_global $_flag_universal
1	5	--> if not set -q scope[1]...
2	2	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
2	2	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
4	4	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
3	3	--> set mode -p
3	3	--> set -l newpaths
3	3	--> set -l indexes
8	102	--> for path in $argv...
26	41	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
1	8	---> if not test -d "$p"...
7	7	----> not test -d "$p"
3	45	---> if set -l ind (contains -i -- $p $$var)...
23	39	----> set -l ind (contains -i -- $p $$var)
16	16	-----> contains -i -- $p $$var
0	3	----> if set -q _flag_move...
3	3	-----> set -q _flag_move
9	9	--> set -l newvar $$var
0	2	--> if set -q _flag_move...
2	2	---> set -q _flag_move
4	4	--> set $mode newvar $newpaths
5	9	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
1	1	---> set -q indexes[1]
1	1	---> return 1
18	161	-> fish_add_path $HOME/Downloads/RustRover-2024.1/bin
13	13	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
0	2	--> if set -q _flag_help...
2	2	---> set -q _flag_help
4	4	--> set -l scope $_flag_global $_flag_universal
1	5	--> if not set -q scope[1]...
2	2	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
2	2	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
5	5	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
2	2	--> set mode -p
2	2	--> set -l newpaths
3	3	--> set -l indexes
12	74	--> for path in $argv...
31	47	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
16	16	----> builtin realpath -s -- $path 2>/dev/null
2	15	---> if not test -d "$p"...
8	8	----> not test -d "$p"
0	3	----> if set -q _flag_verbose...
3	3	-----> set -q _flag_verbose
2	2	----> continue
10	10	--> set -l newvar $$var
0	2	--> if set -q _flag_move...
2	2	---> set -q _flag_move
5	5	--> set $mode newvar $newpaths
4	10	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
2	2	---> return 1
21	156	-> fish_add_path $KITTY_INSTALLATION_DIR:$HOME/kitty
13	13	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
0	2	--> if set -q _flag_help...
2	2	---> set -q _flag_help
4	4	--> set -l scope $_flag_global $_flag_universal
1	5	--> if not set -q scope[1]...
2	2	---> not set -q scope[1]
2	2	---> not set -q fish_user_paths
2	2	--> set -l var fish_user_paths
2	2	--> set -q _flag_path
5	5	--> set -l mode $_flag_prepend $_flag_append
2	2	--> set -q mode[1]
2	2	--> set mode -p
3	3	--> set -l newpaths
3	3	--> set -l indexes
7	65	--> for path in $argv...
28	43	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
15	15	----> builtin realpath -s -- $path 2>/dev/null
3	15	---> if not test -d "$p"...
7	7	----> not test -d "$p"
1	3	----> if set -q _flag_verbose...
2	2	-----> set -q _flag_verbose
2	2	----> continue
12	12	--> set -l newvar $$var
0	2	--> if set -q _flag_move...
2	2	---> set -q _flag_move
4	4	--> set $mode newvar $newpaths
4	9	--> if set -q newpaths[1]...
2	2	---> set -q newpaths[1]
1	1	---> set -q indexes[1]
2	2	---> return 1
1187	2248	-> zoxide init fish --cmd cd | source
4	4	--> function __zoxide_pwd...
3	188	--> if ! builtin functions --query __zoxide_cd_internal...
31	31	---> ! builtin functions --query __zoxide_cd_internal
4	154	---> if builtin functions --query cd...
27	143	----> builtin functions --query cd
111	116	-----> source /usr/share/fish/functions/cd.fish
5	5	------> function cd --description "Change directory"...
7	7	----> builtin functions --copy cd __zoxide_cd_internal
1	1	--> function __zoxide_cd...
3	3	--> function __zoxide_hook --on-variable PWD...
3	15	--> if test -z $__zoxide_z_prefix...
5	5	---> test -z $__zoxide_z_prefix
7	7	---> set __zoxide_z_prefix 'z!'
41	50	--> set __zoxide_z_prefix_regex ^(string escape --style=regex $__zoxide_z_prefix)
9	9	---> string escape --style=regex $__zoxide_z_prefix
1	1	--> function __zoxide_z...
3	3	--> function __zoxide_z_complete...
33	33	--> complete --command __zoxide_z --no-files --arguments '(__zoxide_z_complete)'
1	1	--> function __zoxide_zi...
118	118	--> abbr --erase cd &>/dev/null
25	342	--> alias cd=__zoxide_z
6	6	---> set -l options h/help s/save
13	13	---> argparse -n alias --max-args=2 $options -- $argv
1	4	---> if set -q _flag_help...
3	3	----> set -q _flag_help
4	4	---> set -l name
4	4	---> set -l body
3	3	---> set -l prefix
8	69	---> if not set -q argv[1]...
3	3	----> not set -q argv[1]
3	3	----> not set -q argv[2]
33	45	----> set -l tmp (string split -m 1 "=" -- $argv) ""
12	12	-----> string split -m 1 "=" -- $argv
6	6	----> set name $tmp[1]
4	4	----> set body $tmp[2]
2	11	---> if test -z "$name"...
5	5	----> test -z "$name"
4	4	----> test -z "$body"
52	52	---> printf '%s\n' $body | read -l --list words
8	8	---> set -l first_word $words[1]
5	5	---> set -l last_word $words[-1]
0	6	---> if test $first_word = $name...
6	6	----> test $first_word = $name
29	37	---> set -l cmd_string (string escape -- "alias $argv")
8	8	----> string escape -- "alias $argv"
3	3	---> set -l wraps
3	42	---> if test $first_word != $name...
6	6	----> test $first_word != $name
4	4	----> test $last_word != $name
24	29	----> set wraps --wraps (string escape -- $body)
5	5	-----> string escape -- $body
39	45	---> echo "function $name $wraps --description $cmd_string; $prefix $body \$argv
        end" | source
6	6	----> function cd --wraps __zoxide_z --description 'alias cd=__zoxide_z'...
2	5	---> if set -q _flag_save...
3	3	----> set -q _flag_save
14	14	--> abbr --erase cdi &>/dev/null
20	288	--> alias cdi=__zoxide_zi
5	5	---> set -l options h/help s/save
10	10	---> argparse -n alias --max-args=2 $options -- $argv
1	3	---> if set -q _flag_help...
2	2	----> set -q _flag_help
3	3	---> set -l name
2	2	---> set -l body
3	3	---> set -l prefix
6	67	---> if not set -q argv[1]...
3	3	----> not set -q argv[1]
2	2	----> not set -q argv[2]
37	47	----> set -l tmp (string split -m 1 "=" -- $argv) ""
10	10	-----> string split -m 1 "=" -- $argv
5	5	----> set name $tmp[1]
4	4	----> set body $tmp[2]
1	10	---> if test -z "$name"...
5	5	----> test -z "$name"
4	4	----> test -z "$body"
26	26	---> printf '%s\n' $body | read -l --list words
6	6	---> set -l first_word $words[1]
4	4	---> set -l last_word $words[-1]
1	6	---> if test $first_word = $name...
5	5	----> test $first_word = $name
26	33	---> set -l cmd_string (string escape -- "alias $argv")
7	7	----> string escape -- "alias $argv"
3	3	---> set -l wraps
4	40	---> if test $first_word != $name...
4	4	----> test $first_word != $name
4	4	----> test $last_word != $name
23	28	----> set wraps --wraps (string escape -- $body)
5	5	-----> string escape -- $body
38	43	---> echo "function $name $wraps --description $cmd_string; $prefix $body \$argv
        end" | source
5	5	----> function cdi --wraps __zoxide_zi --description 'alias cdi=__zoxide_zi'...
0	4	---> if set -q _flag_save...
4	4	----> set -q _flag_save
86	21844	-> eval (batpipe)
21723	21723	--> batpipe
19	19	--> set -x LESSOPEN "|/usr/bin/batpipe %s"
5	5	--> set -e LESSCLOSE
7	7	--> set -x LESS "$LESS -R"
4	4	--> set -x BATPIPE "color"
514	579	-> source $HOME/kitty/shell-integration/fish/vendor_conf.d/kitty-shell-integration.fish
1	9	--> if set -q KITTY_FISH_XDG_DATA_DIR...
8	8	---> set -q KITTY_FISH_XDG_DATA_DIR
4	4	--> status is-interactive
29	29	--> not functions -q __ksi_schedule
5	5	--> set -q fish_killring
7	7	--> function __ksi_schedule --on-event fish_prompt -d "Setup kitty integration after other scripts have run, we hope"...
5	5	--> function edit-in-kitty --wraps "kitten edit-in-kitty" -d "Edit the specified file in a kitty overlay window with your locally installed editor"...
3	3	--> function __ksi_transmit_data -d "Transmit data to kitty using chunked DCS escapes"...
3	3	--> function clone-in-kitty -d "Clone the current fish session into a new kitty window"...
2521	2551	-> v complete setup fish | source
6	6	--> function __v_completions...
24	24	--> complete -f -c v -a "(__v_completions)"
21842	43045	-> jj util completion fish | source
9	9	--> function __fish_jj_global_optspecs...
1	1	--> function __fish_jj_needs_command...
2	2	--> function __fish_jj_using_subcommand...
38	38	--> complete -c jj -n "__fish_jj_needs_command" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
11	11	--> complete -c jj -n "__fish_jj_needs_command" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_needs_command" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_needs_command" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_needs_command" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_needs_command" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -s V -l version -d 'Print version'
9	9	--> complete -c jj -n "__fish_jj_needs_command" -f -a "abandon" -d 'Abandon a revision'
9	9	--> complete -c jj -n "__fish_jj_needs_command" -f -a "backout" -d 'Apply the reverse of a revision on top of another revision'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "branch" -d 'Manage branches'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "cat" -d 'Print contents of files in a revision'
9	9	--> complete -c jj -n "__fish_jj_needs_command" -f -a "checkout" -d 'Create a new, empty change and edit it in the working copy (DEPRECATED, use `jj new`)'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "chmod" -d 'Sets or removes the executable bit for paths in the repo'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "commit" -d 'Update the description and create a new change on top'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -f -a "ci" -d 'Update the description and create a new change on top'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "config" -d 'Manage config options'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "debug" -d 'Low-level commands not intended for users'
9	9	--> complete -c jj -n "__fish_jj_needs_command" -f -a "describe" -d 'Update the change description or other metadata'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "desc" -d 'Update the change description or other metadata'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "diff" -d 'Compare file contents between two revisions'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "diffedit" -d 'Touch up the content changes in a revision with a diff editor'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "duplicate" -d 'Create a new change with the same content as an existing one'
13	13	--> complete -c jj -n "__fish_jj_needs_command" -f -a "edit" -d 'Sets the specified revision as the working-copy revision'
13	13	--> complete -c jj -n "__fish_jj_needs_command" -f -a "file" -d 'File operations'
27	27	--> complete -c jj -n "__fish_jj_needs_command" -f -a "files" -d 'List files in a revision (DEPRECATED use `jj file list`)'
15	15	--> complete -c jj -n "__fish_jj_needs_command" -f -a "fix" -d 'Update files with formatting fixes or other changes'
15	15	--> complete -c jj -n "__fish_jj_needs_command" -f -a "git" -d 'Commands for working with Git remotes and the underlying Git repo'
15	15	--> complete -c jj -n "__fish_jj_needs_command" -f -a "init" -d 'Create a new repo in the given directory'
14	14	--> complete -c jj -n "__fish_jj_needs_command" -f -a "interdiff" -d 'Compare the changes of two commits'
10	10	--> complete -c jj -n "__fish_jj_needs_command" -f -a "log" -d 'Show revision history'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "merge" -d 'Merge work from multiple branches (DEPRECATED, use `jj new`)'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -f -a "move" -d 'Move changes from one revision into another (DEPRECATED, use `jj squash`)'
15	15	--> complete -c jj -n "__fish_jj_needs_command" -f -a "new" -d 'Create a new, empty change and (by default) edit it in the working copy'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "next" -d 'Move the working-copy commit to the child revision'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "obslog" -d 'Show how a change has evolved over time'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "operation" -d 'Commands for working with the operation log'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "op" -d 'Commands for working with the operation log'
9	9	--> complete -c jj -n "__fish_jj_needs_command" -f -a "parallelize" -d 'Parallelize revisions by making them siblings'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "prev" -d 'Change the working copy revision relative to the parent revision'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "rebase" -d 'Move revisions to different parent(s)'
9	9	--> complete -c jj -n "__fish_jj_needs_command" -f -a "resolve" -d 'Resolve a conflicted file with an external merge tool'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "restore" -d 'Restore paths from another revision'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "revert" -d 'A dummy command that accepts any arguments'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -f -a "root" -d 'Show the current workspace root directory'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -f -a "run" -d '(**Stub**, does not work yet) Run a command across a set of revisions.'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "show" -d 'Show commit description and changes in a revision'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "sparse" -d 'Manage which paths from the working-copy commit are present in the working copy'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "split" -d 'Split a revision in two'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -f -a "squash" -d 'Move changes from a revision into another revision'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -f -a "status" -d 'Show high-level repo status'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -f -a "st" -d 'Show high-level repo status'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -f -a "tag" -d 'Manage tags'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "util" -d 'Infrequently used commands such as for generating shell completions'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -f -a "undo" -d 'Undo an operation (shortcut for `jj op undo`)'
7	7	--> complete -c jj -n "__fish_jj_needs_command" -f -a "unsquash" -d 'Move changes from a revision\'s parent into the revision'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "untrack" -d 'Stop tracking specified paths in the working copy'
11	11	--> complete -c jj -n "__fish_jj_needs_command" -f -a "version" -d 'Display version information'
9	9	--> complete -c jj -n "__fish_jj_needs_command" -f -a "workspace" -d 'Commands for working with workspaces'
8	8	--> complete -c jj -n "__fish_jj_needs_command" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -s s -l summary -d 'Do not print every abandoned commit on a separate line'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -s r -d 'Ignored (but lets you pass `-r` for consistency with other commands)'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand abandon" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand backout" -s r -l revisions -d 'The revision(s) to apply the reverse of' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand backout" -s d -l destination -d 'The revision to apply the reverse changes on top of' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand backout" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand backout" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand backout" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand backout" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand backout" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand backout" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand backout" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand backout" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand backout" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand backout" -s h -l help -d 'Print help (see more with \'--help\')'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
21	21	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
18	18	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
38	38	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
19	19	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
20	20	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -l ignore-immutable -d 'Allow rewriting immutable commits'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -l debug -d 'Enable debug logging'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -l quiet -d 'Silence non-primary command output'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -l no-pager -d 'Disable the pager'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -s h -l help -d 'Print help (see more with \'--help\')'
18	18	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "create" -d 'Create a new branch'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "c" -d 'Create a new branch'
19	19	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "delete" -d 'Delete an existing branch and propagate the deletion to remotes on the next push'
18	18	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "d" -d 'Delete an existing branch and propagate the deletion to remotes on the next push'
18	18	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "forget" -d 'Forget everything about a branch, including its local and remote targets'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "f" -d 'Forget everything about a branch, including its local and remote targets'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "list" -d 'List branches and their targets'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "l" -d 'List branches and their targets'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "move" -d 'Move existing branches to target revision'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "m" -d 'Move existing branches to target revision'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "rename" -d 'Rename `old` branch name to `new` branch name'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "r" -d 'Rename `old` branch name to `new` branch name'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "set" -d 'Create or update a branch to point to a certain commit'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "s" -d 'Create or update a branch to point to a certain commit'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "track" -d 'Start tracking given remote branches'
25	25	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "t" -d 'Start tracking given remote branches'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "untrack" -d 'Stop tracking given remote branches'
20	20	--> complete -c jj -n "__fish_jj_using_subcommand branch; and not __fish_seen_subcommand_from create c delete d forget f list l move m rename r set s track t untrack help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -s r -l revision -l to -d 'The branch\'s target revision' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -l at-operation -l at-op -d 'Operation to load the repo at' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -l color -d 'When to colorize output (always, never, debug, auto)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -l config-toml -d 'Additional configuration options (can be repeated)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -l ignore-immutable -d 'Allow rewriting immutable commits'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from create" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -s r -l revision -l to -d 'The branch\'s target revision' -r
15	15	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
18	18	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -l at-operation -l at-op -d 'Operation to load the repo at' -r
16	16	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from c" -s h -l help -d 'Print help (see more with \'--help\')'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from delete" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from delete" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from delete" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from delete" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from delete" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from delete" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from delete" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from delete" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from delete" -l no-pager -d 'Disable the pager'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from delete" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from d" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from d" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from d" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from d" -l config-toml -d 'Additional configuration options (can be repeated)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from d" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from d" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from d" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from d" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from d" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from d" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from forget" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from forget" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from forget" -l color -d 'When to colorize output (always, never, debug, auto)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from forget" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from forget" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from forget" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from forget" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from forget" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from forget" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from forget" -s h -l help -d 'Print help (see more with \'--help\')'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from f" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from f" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from f" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from f" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from f" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from f" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from f" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from f" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from f" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from f" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -s r -l revisions -d 'Show branches whose local targets are in the given revisions' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -s T -l template -d 'Render each branch using the given template' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -s a -l all-remotes -d 'Show all tracking and non-tracking remote branches including the ones whose targets are synchronized with the local branches'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -s t -l tracked -d 'Show remote tracked branches only. Omits local Git-tracking branches by default'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -s c -l conflicted -d 'Show conflicted branches only'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -s r -l revisions -d 'Show branches whose local targets are in the given revisions' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -s T -l template -d 'Render each branch using the given template' -r
15	15	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -s a -l all-remotes -d 'Show all tracking and non-tracking remote branches including the ones whose targets are synchronized with the local branches'
22	22	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -s t -l tracked -d 'Show remote tracked branches only. Omits local Git-tracking branches by default'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -s c -l conflicted -d 'Show conflicted branches only'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -l ignore-immutable -d 'Allow rewriting immutable commits'
25	25	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from l" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -l from -d 'Move branches from the given revisions' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -l to -d 'Move branches to this revision' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -s B -l allow-backwards -d 'Allow moving branches backwards or sideways'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from move" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -l from -d 'Move branches from the given revisions' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -l to -d 'Move branches to this revision' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -l config-toml -d 'Additional configuration options (can be repeated)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -s B -l allow-backwards -d 'Allow moving branches backwards or sideways'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from m" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from rename" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from rename" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from rename" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from rename" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from rename" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from rename" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from rename" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from rename" -l quiet -d 'Silence non-primary command output'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from rename" -l no-pager -d 'Disable the pager'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from rename" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from r" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from r" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from r" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from r" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from r" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from r" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from r" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from r" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from r" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from r" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -s r -l revision -l to -d 'The branch\'s target revision' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -s B -l allow-backwards -d 'Allow moving the branch backwards or sideways'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from set" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -s r -l revision -l to -d 'The branch\'s target revision' -r
16	16	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -s B -l allow-backwards -d 'Allow moving the branch backwards or sideways'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from s" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from track" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from track" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from track" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from track" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from track" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from track" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from track" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from track" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from track" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from track" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from t" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
17	17	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from t" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from t" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from t" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from t" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
37	37	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from t" -l ignore-immutable -d 'Allow rewriting immutable commits'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from t" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from t" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from t" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from t" -s h -l help -d 'Print help (see more with \'--help\')'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from untrack" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from untrack" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from untrack" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from untrack" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from untrack" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from untrack" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from untrack" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from untrack" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from untrack" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from untrack" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from help" -f -a "create" -d 'Create a new branch'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from help" -f -a "delete" -d 'Delete an existing branch and propagate the deletion to remotes on the next push'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from help" -f -a "forget" -d 'Forget everything about a branch, including its local and remote targets'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from help" -f -a "list" -d 'List branches and their targets'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from help" -f -a "move" -d 'Move existing branches to target revision'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from help" -f -a "rename" -d 'Rename `old` branch name to `new` branch name'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from help" -f -a "set" -d 'Create or update a branch to point to a certain commit'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from help" -f -a "track" -d 'Start tracking given remote branches'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from help" -f -a "untrack" -d 'Stop tracking given remote branches'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand branch; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand cat" -s r -l revision -d 'The revision to get the file contents from' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand cat" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
7	7	--> complete -c jj -n "__fish_jj_using_subcommand cat" -l at-operation -l at-op -d 'Operation to load the repo at' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand cat" -l color -d 'When to colorize output (always, never, debug, auto)' -r
37	37	--> complete -c jj -n "__fish_jj_using_subcommand cat" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand cat" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand cat" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand cat" -l debug -d 'Enable debug logging'
35	35	--> complete -c jj -n "__fish_jj_using_subcommand cat" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand cat" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand cat" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -s m -l message -d 'The change description to use' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -s r -d 'Ignored (but lets you pass `-r` for consistency with other commands)'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand checkout" -s h -l help -d 'Print help (see more with \'--help\')'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -s r -l revision -d 'The revision to update' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -l config-toml -d 'Additional configuration options (can be repeated)' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -l debug -d 'Enable debug logging'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -l quiet -d 'Silence non-primary command output'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -l no-pager -d 'Disable the pager'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand chmod" -s h -l help -d 'Print help (see more with \'--help\')'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand commit" -l tool -d 'Specify diff editor to be used (implies --interactive)' -r
16	16	--> complete -c jj -n "__fish_jj_using_subcommand commit" -s m -l message -d 'The change description to use (don\'t open editor)' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand commit" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand commit" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand commit" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand commit" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand commit" -s i -l interactive -d 'Interactively choose which changes to include in the first commit'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand commit" -l reset-author -d 'Reset the author to the configured user'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand commit" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand commit" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand commit" -l debug -d 'Enable debug logging'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand commit" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand commit" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand commit" -s h -l help -d 'Print help (see more with \'--help\')'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand ci" -l tool -d 'Specify diff editor to be used (implies --interactive)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand ci" -s m -l message -d 'The change description to use (don\'t open editor)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand ci" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand ci" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand ci" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand ci" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand ci" -s i -l interactive -d 'Interactively choose which changes to include in the first commit'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand ci" -l reset-author -d 'Reset the author to the configured user'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand ci" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand ci" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand ci" -l debug -d 'Enable debug logging'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand ci" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand ci" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand ci" -s h -l help -d 'Print help (see more with \'--help\')'
18	18	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
19	19	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
46	46	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
15	15	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -l ignore-immutable -d 'Allow rewriting immutable commits'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -l debug -d 'Enable debug logging'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -l quiet -d 'Silence non-primary command output'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -l no-pager -d 'Disable the pager'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "edit" -d 'Start an editor on a jj config file'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "e" -d 'Start an editor on a jj config file'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "get" -d 'Get the value of a given config option.'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "g" -d 'Get the value of a given config option.'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "list" -d 'List variables set in config file, along with their values'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "l" -d 'List variables set in config file, along with their values'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "path" -d 'Print the path to the config file'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "p" -d 'Print the path to the config file'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "set" -d 'Update config file to set the given option to a given value'
38	38	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "s" -d 'Update config file to set the given option to a given value'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand config; and not __fish_seen_subcommand_from edit e get g list l path p set s help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -l user -d 'Target the user-level config'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -l repo -d 'Target the repo-level config'
31	31	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from edit" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -l user -d 'Target the user-level config'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -l repo -d 'Target the repo-level config'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from e" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from get" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from get" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from get" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from get" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from get" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from get" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from get" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from get" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from get" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from get" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from g" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from g" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from g" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from g" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from g" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from g" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from g" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from g" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from g" -l no-pager -d 'Disable the pager'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from g" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -s T -l template -d 'Render each variable using the given template' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l color -d 'When to colorize output (always, never, debug, auto)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l include-defaults -d 'Whether to explicitly include built-in default values in the list'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l include-overridden -d 'Allow printing overridden values'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l user -d 'Target the user-level config'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l repo -d 'Target the repo-level config'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -l no-pager -d 'Disable the pager'
18	18	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -s T -l template -d 'Render each variable using the given template' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l at-operation -l at-op -d 'Operation to load the repo at' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l color -d 'When to colorize output (always, never, debug, auto)' -r
19	19	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l config-toml -d 'Additional configuration options (can be repeated)' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l include-defaults -d 'Whether to explicitly include built-in default values in the list'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l include-overridden -d 'Allow printing overridden values'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l user -d 'Target the user-level config'
37	37	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l repo -d 'Target the repo-level config'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from l" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -l user -d 'Target the user-level config'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -l repo -d 'Target the repo-level config'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -l ignore-immutable -d 'Allow rewriting immutable commits'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from path" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -l color -d 'When to colorize output (always, never, debug, auto)' -r
42	42	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -l user -d 'Target the user-level config'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -l repo -d 'Target the repo-level config'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from p" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -l user -d 'Target the user-level config'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -l repo -d 'Target the repo-level config'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from set" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -l color -d 'When to colorize output (always, never, debug, auto)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -l user -d 'Target the user-level config'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -l repo -d 'Target the repo-level config'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from s" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "edit" -d 'Start an editor on a jj config file'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "get" -d 'Get the value of a given config option.'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "list" -d 'List variables set in config file, along with their values'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "path" -d 'Print the path to the config file'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "set" -d 'Update config file to set the given option to a given value'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
24	24	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
19	19	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
18	18	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
17	17	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
18	18	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -l ignore-immutable -d 'Allow rewriting immutable commits'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -l debug -d 'Enable debug logging'
23	23	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -l quiet -d 'Silence non-primary command output'
18	18	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -l no-pager -d 'Disable the pager'
18	18	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -s h -l help -d 'Print help (see more with \'--help\')'
18	18	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "copy-detection" -d 'Rebuild commit index'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "fileset" -d 'Parse fileset expression'
45	45	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "index" -d 'Show commit index stats'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "local-working-copy" -d 'Show information about the local working copy state'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "operation" -d 'Show information about an operation and its view'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "view" -d 'Show information about an operation and its view'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "reindex" -d 'Rebuild commit index'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "revset" -d 'Evaluate revset to full commit IDs'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "snapshot" -d 'Trigger a snapshot in the op log'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "template" -d 'Parse a template'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "tree" -d 'List the recursive entries of a tree'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "watchman"
15	15	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "working-copy" -d 'Show information about the working copy state'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand debug; and not __fish_seen_subcommand_from copy-detection fileset index local-working-copy operation view reindex revset snapshot template tree watchman working-copy help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from copy-detection" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from copy-detection" -l at-operation -l at-op -d 'Operation to load the repo at' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from copy-detection" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from copy-detection" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from copy-detection" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from copy-detection" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from copy-detection" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from copy-detection" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from copy-detection" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from copy-detection" -s h -l help -d 'Print help (see more with \'--help\')'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from fileset" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from fileset" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from fileset" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from fileset" -l config-toml -d 'Additional configuration options (can be repeated)' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from fileset" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from fileset" -l ignore-immutable -d 'Allow rewriting immutable commits'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from fileset" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from fileset" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from fileset" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from fileset" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from index" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from index" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from index" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from index" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from index" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from index" -l ignore-immutable -d 'Allow rewriting immutable commits'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from index" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from index" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from index" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from index" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from local-working-copy" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from local-working-copy" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from local-working-copy" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from local-working-copy" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from local-working-copy" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from local-working-copy" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from local-working-copy" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from local-working-copy" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from local-working-copy" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from local-working-copy" -s h -l help -d 'Print help (see more with \'--help\')'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -l display -r -f -a "{operation\t'Show only the operation details',id\t'Show the operation id only',view\t'Show only the view details',all\t'Show both the view and the operation'}"
13	13	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
41	41	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -l config-toml -d 'Additional configuration options (can be repeated)' -r
35	35	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from operation" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -l display -r -f -a "{operation\t'Show only the operation details',id\t'Show the operation id only',view\t'Show only the view details',all\t'Show both the view and the operation'}"
13	13	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -l ignore-immutable -d 'Allow rewriting immutable commits'
20	20	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -l quiet -d 'Silence non-primary command output'
47	47	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from view" -s h -l help -d 'Print help (see more with \'--help\')'
47	47	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from reindex" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from reindex" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from reindex" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from reindex" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from reindex" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from reindex" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from reindex" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from reindex" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from reindex" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from reindex" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from revset" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from revset" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from revset" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from revset" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from revset" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from revset" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from revset" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from revset" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from revset" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from revset" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from snapshot" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
11	11	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from snapshot" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from snapshot" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from snapshot" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from snapshot" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from snapshot" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from snapshot" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from snapshot" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from snapshot" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from snapshot" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from template" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from template" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from template" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from template" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from template" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from template" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from template" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from template" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from template" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from template" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -s r -l revision -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -l id -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -l dir -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from tree" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -f -a "status" -d 'Check whether `watchman` is enabled and whether it\'s correctly installed'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -f -a "query-clock"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -f -a "query-changed-files"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -f -a "reset-clock"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from watchman" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from working-copy" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from working-copy" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from working-copy" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from working-copy" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from working-copy" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from working-copy" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from working-copy" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from working-copy" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from working-copy" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from working-copy" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "copy-detection" -d 'Rebuild commit index'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "fileset" -d 'Parse fileset expression'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "index" -d 'Show commit index stats'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "local-working-copy" -d 'Show information about the local working copy state'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "operation" -d 'Show information about an operation and its view'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "reindex" -d 'Rebuild commit index'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "revset" -d 'Evaluate revset to full commit IDs'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "snapshot" -d 'Trigger a snapshot in the op log'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "template" -d 'Parse a template'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "tree" -d 'List the recursive entries of a tree'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "watchman"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "working-copy" -d 'Show information about the working copy state'
42	42	--> complete -c jj -n "__fish_jj_using_subcommand debug; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand describe" -s m -l message -d 'The change description to use (don\'t open editor)' -r
37	37	--> complete -c jj -n "__fish_jj_using_subcommand describe" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand describe" -s r -d 'Ignored (but lets you pass `-r` for consistency with other commands)'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l stdin -d 'Read the change description from stdin'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l no-edit -d 'Don\'t open an editor'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l reset-author -d 'Reset the author to the configured user'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand describe" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand describe" -s h -l help -d 'Print help (see more with \'--help\')'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -s m -l message -d 'The change description to use (don\'t open editor)' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand desc" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -s r -d 'Ignored (but lets you pass `-r` for consistency with other commands)'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l stdin -d 'Read the change description from stdin'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l no-edit -d 'Don\'t open an editor'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l reset-author -d 'Reset the author to the configured user'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand desc" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand diff" -s r -l revision -d 'Show changes in this revision, compared to its parent(s)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l from -d 'Show changes from this revision' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l to -d 'Show changes to this revision' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l tool -d 'Generate diff by external command' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l context -d 'Number of lines of context to show' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand diff" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand diff" -s s -l summary -d 'For each path, show only whether it was modified, added, or deleted'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l stat -d 'Show a histogram of the changes'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l types -d 'For each path, show only its type before and after'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l name-only -d 'For each path, show only its path'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l git -d 'Show a Git-format diff'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l color-words -d 'Show a word-level diff with changes indicated only by color'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diff" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand diff" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -s r -l revision -d 'The revision to touch up. Defaults to @ if neither --to nor --from are specified' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l from -d 'Show changes from this revision. Defaults to @ if --to is specified' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l to -d 'Edit changes in this revision. Defaults to @ if --from is specified' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l tool -d 'Specify diff editor to be used' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand diffedit" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -l config-toml -d 'Additional configuration options (can be repeated)' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -s r -d 'Ignored (but lets you pass `-r` for consistency with other commands)'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -l ignore-immutable -d 'Allow rewriting immutable commits'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -l debug -d 'Enable debug logging'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -l quiet -d 'Silence non-primary command output'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -l no-pager -d 'Disable the pager'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand duplicate" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand edit" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand edit" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand edit" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand edit" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand edit" -s r -d 'Ignored (but lets you pass `-r` for consistency with other commands)'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand edit" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand edit" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand edit" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand edit" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand edit" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand edit" -s h -l help -d 'Print help (see more with \'--help\')'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
13	13	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -l ignore-immutable -d 'Allow rewriting immutable commits'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -l no-pager -d 'Disable the pager'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -s h -l help -d 'Print help (see more with \'--help\')'
18	18	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -f -a "chmod" -d 'Sets or removes the executable bit for paths in the repo'
46	46	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -f -a "list" -d 'List files in a revision'
40	40	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -f -a "show" -d 'Print contents of files in a revision'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -f -a "untrack" -d 'Stop tracking specified paths in the working copy'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand file; and not __fish_seen_subcommand_from chmod list show untrack help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -s r -l revision -d 'The revision to update' -r
64	64	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
13	13	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -l at-operation -l at-op -d 'Operation to load the repo at' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -l color -d 'When to colorize output (always, never, debug, auto)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -l no-pager -d 'Disable the pager'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from chmod" -s h -l help -d 'Print help (see more with \'--help\')'
19	19	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -s r -l revision -d 'The revision to list files in' -r
15	15	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -s r -l revision -d 'The revision to get the file contents from' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
24	24	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from show" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from untrack" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from untrack" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from untrack" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from untrack" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from untrack" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from untrack" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from untrack" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from untrack" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from untrack" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from untrack" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from help" -f -a "chmod" -d 'Sets or removes the executable bit for paths in the repo'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from help" -f -a "list" -d 'List files in a revision'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from help" -f -a "show" -d 'Print contents of files in a revision'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from help" -f -a "untrack" -d 'Stop tracking specified paths in the working copy'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand file; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand files" -s r -l revision -d 'The revision to list files in' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand files" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand files" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand files" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand files" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand files" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand files" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand files" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand files" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand files" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand files" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand fix" -s s -l source -d 'Fix files in the specified revision(s) and their descendants. If no revisions are specified, this defaults to the `revsets.fix` setting, or `reachable(@, mutable())` if it is not set' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand fix" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand fix" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand fix" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand fix" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand fix" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand fix" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand fix" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand fix" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand fix" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand fix" -s h -l help -d 'Print help (see more with \'--help\')'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
99	99	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -l ignore-immutable -d 'Allow rewriting immutable commits'
47	47	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -l debug -d 'Enable debug logging'
38	38	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -l quiet -d 'Silence non-primary command output'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -l no-pager -d 'Disable the pager'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -f -a "clone" -d 'Create a new repo backed by a clone of a Git repo'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -f -a "export" -d 'Update the underlying Git repo with changes made in the repo'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -f -a "fetch" -d 'Fetch from a Git remote'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -f -a "import" -d 'Update repo with changes made in the underlying Git repo'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -f -a "init" -d 'Create a new Git backed repo'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -f -a "push" -d 'Push to a Git remote'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -f -a "remote" -d 'Manage Git remotes'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -f -a "submodule" -d 'FOR INTERNAL USE ONLY Interact with git submodules'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand git; and not __fish_seen_subcommand_from clone export fetch import init push remote submodule help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -l color -d 'When to colorize output (always, never, debug, auto)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -l colocate -d 'Whether or not to colocate the Jujutsu repo with the git repo'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from clone" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from export" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from export" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from export" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from export" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from export" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from export" -l ignore-immutable -d 'Allow rewriting immutable commits'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from export" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from export" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from export" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from export" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -s b -l branch -d 'Fetch only some of the branches' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -l remote -d 'The remote to fetch from (only named remotes are supported, can be repeated)' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -l at-operation -l at-op -d 'Operation to load the repo at' -r
15	15	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -l color -d 'When to colorize output (always, never, debug, auto)' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -l all-remotes -d 'Fetch from all remotes'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from fetch" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from import" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from import" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from import" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from import" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from import" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from import" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from import" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from import" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from import" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from import" -s h -l help -d 'Print help (see more with \'--help\')'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -l git-repo -d 'Specifies a path to an **existing** git repository to be used as the backing git repo for the newly created `jj` repo' -r -f -a "(__fish_complete_directories)"
12	12	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -l config-toml -d 'Additional configuration options (can be repeated)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -l colocate -d 'Specifies that the `jj` repo should also be a valid `git` repo, allowing the use of both `jj` and `git` commands in the same directory'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from init" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l remote -d 'The remote to push to (only named remotes are supported)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -s b -l branch -d 'Push only this branch, or branches matching a pattern (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -s r -l revisions -d 'Push branches pointing to these commits (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -s c -l change -d 'Push this commit by creating a branch based on its change ID (can be repeated)' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l all -d 'Push all branches (including deleted branches)'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l tracked -d 'Push all tracked branches (including deleted branches)'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l deleted -d 'Push all deleted branches'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l allow-empty-description -d 'Allow pushing commits with empty descriptions'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l allow-private -d 'Allow pushing commits that are private'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l dry-run -d 'Only display what will change on the remote'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from push" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -f -a "add" -d 'Add a Git remote'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -f -a "list" -d 'List Git remotes'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -f -a "remove" -d 'Remove a Git remote and forget its branches'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -f -a "rename" -d 'Rename a Git remote'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -f -a "set-url" -d 'Set the URL of a Git remote'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from remote" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -l color -d 'When to colorize output (always, never, debug, auto)' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -f -a "print-gitmodules" -d 'Print the relevant contents from .gitmodules. For debugging purposes only'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from submodule" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from help" -f -a "clone" -d 'Create a new repo backed by a clone of a Git repo'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from help" -f -a "export" -d 'Update the underlying Git repo with changes made in the repo'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from help" -f -a "fetch" -d 'Fetch from a Git remote'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from help" -f -a "import" -d 'Update repo with changes made in the underlying Git repo'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from help" -f -a "init" -d 'Create a new Git backed repo'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from help" -f -a "push" -d 'Push to a Git remote'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from help" -f -a "remote" -d 'Manage Git remotes'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from help" -f -a "submodule" -d 'FOR INTERNAL USE ONLY Interact with git submodules'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand git; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand init" -l git-repo -d 'DEPRECATED: Use `jj git init` Path to a git repo the jj repo will be backed by' -r -f -a "(__fish_complete_directories)"
13	13	--> complete -c jj -n "__fish_jj_using_subcommand init" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand init" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand init" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand init" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand init" -l git -d 'DEPRECATED: Use `jj git init` Use the Git backend, creating a jj repo backed by a Git repo'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand init" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand init" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand init" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand init" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand init" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand init" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l from -d 'Show changes from this revision' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l to -d 'Show changes to this revision' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l tool -d 'Generate diff by external command' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l context -d 'Number of lines of context to show' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -s s -l summary -d 'For each path, show only whether it was modified, added, or deleted'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l stat -d 'Show a histogram of the changes'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l types -d 'For each path, show only its type before and after'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l name-only -d 'For each path, show only its path'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l git -d 'Show a Git-format diff'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l color-words -d 'Show a word-level diff with changes indicated only by color'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand interdiff" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand log" -s r -l revisions -d 'Which revisions to show. If no paths nor revisions are specified, this defaults to the `revsets.log` setting, or `@ | ancestors(immutable_heads().., 2) | trunk()` if it is not set' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand log" -s n -l limit -d 'Limit number of revisions to show' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand log" -s l -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand log" -s T -l template -d 'Render each revision using the given template' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand log" -l tool -d 'Generate diff by external command' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand log" -l context -d 'Number of lines of context to show' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand log" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand log" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand log" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand log" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand log" -l reversed -d 'Show revisions in the opposite order (older revisions first)'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand log" -l no-graph -d 'Don\'t show the graph, show a flat list of revisions'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand log" -s p -l patch -d 'Show patch'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand log" -s s -l summary -d 'For each path, show only whether it was modified, added, or deleted'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand log" -l stat -d 'Show a histogram of the changes'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand log" -l types -d 'For each path, show only its type before and after'
20	20	--> complete -c jj -n "__fish_jj_using_subcommand log" -l name-only -d 'For each path, show only its path'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand log" -l git -d 'Show a Git-format diff'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand log" -l color-words -d 'Show a word-level diff with changes indicated only by color'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand log" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand log" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand log" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand log" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand log" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand log" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand merge" -s m -l message -d 'The change description to use' -r
18	18	--> complete -c jj -n "__fish_jj_using_subcommand merge" -s A -l insert-after -l after -d 'Insert the new change after the given commit(s)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand merge" -s B -l insert-before -l before -d 'Insert the new change before the given commit(s)' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand merge" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand merge" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand merge" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand merge" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand merge" -s r -d 'Ignored (but lets you pass `-r` for consistency with other commands)'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand merge" -l no-edit -d 'Do not edit the newly created change'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand merge" -l edit -d 'No-op flag to pair with --no-edit'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand merge" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand merge" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand merge" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand merge" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand merge" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand merge" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand move" -s f -l from -d 'Move part of this change into the destination' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand move" -s t -l to -d 'Move part of the source into this change' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand move" -l tool -d 'Specify diff editor to be used (implies --interactive)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand move" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand move" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand move" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand move" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand move" -s i -l interactive -d 'Interactively choose which parts to move'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand move" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand move" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand move" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand move" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand move" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand move" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand new" -s m -l message -d 'The change description to use' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand new" -s A -l insert-after -l after -d 'Insert the new change after the given commit(s)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand new" -s B -l insert-before -l before -d 'Insert the new change before the given commit(s)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand new" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand new" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand new" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand new" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand new" -s r -d 'Ignored (but lets you pass `-r` for consistency with other commands)'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand new" -l no-edit -d 'Do not edit the newly created change'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand new" -l edit -d 'No-op flag to pair with --no-edit'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand new" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand new" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand new" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand new" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand new" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand new" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand next" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand next" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand next" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand next" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand next" -s e -l edit -d 'Instead of creating a new working-copy commit on top of the target commit (like `jj new`), edit the target commit directly (like `jj edit`)'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand next" -s n -l no-edit -d 'The inverse of `--edit`'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand next" -l conflict -d 'Jump to the next conflicted descendant'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand next" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand next" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand next" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand next" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand next" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand next" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -s r -l revision -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -s n -l limit -d 'Limit number of revisions to show' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -s l -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -s T -l template -d 'Render each revision using the given template' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l tool -d 'Generate diff by external command' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l context -d 'Number of lines of context to show' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l at-operation -l at-op -d 'Operation to load the repo at' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l no-graph -d 'Don\'t show the graph, show a flat list of revisions'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -s p -l patch -d 'Show patch compared to the previous version of this change'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -s s -l summary -d 'For each path, show only whether it was modified, added, or deleted'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l stat -d 'Show a histogram of the changes'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l types -d 'For each path, show only its type before and after'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l name-only -d 'For each path, show only its path'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l git -d 'Show a Git-format diff'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l color-words -d 'Show a word-level diff with changes indicated only by color'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand obslog" -s h -l help -d 'Print help (see more with \'--help\')'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
14	14	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l ignore-immutable -d 'Allow rewriting immutable commits'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l no-pager -d 'Disable the pager'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "abandon" -d 'Abandon operation history'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "diff" -d 'Compare changes to the repository between two operations'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "log" -d 'Show the operation log'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "restore" -d 'Create a new operation that restores the repo to an earlier state'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "show" -d 'Show changes to the repository in an operation'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "undo" -d 'Create a new operation that undoes an earlier operation'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand operation; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from abandon" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
11	11	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from abandon" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from abandon" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from abandon" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from abandon" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
20	20	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from abandon" -l ignore-immutable -d 'Allow rewriting immutable commits'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from abandon" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from abandon" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from abandon" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from abandon" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l operation -l op -d 'Show repository changes in this operation, compared to its parent' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l from -d 'Show repository changes from this operation' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l to -d 'Show repository changes to this operation' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l tool -d 'Generate diff by external command' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l context -d 'Number of lines of context to show' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l no-graph -d 'Don\'t show the graph, show a flat list of modified changes'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -s p -l patch -d 'Show patch of modifications to changes'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -s s -l summary -d 'For each path, show only whether it was modified, added, or deleted'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l stat -d 'Show a histogram of the changes'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l types -d 'For each path, show only its type before and after'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l name-only -d 'For each path, show only its path'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l git -d 'Show a Git-format diff'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l color-words -d 'Show a word-level diff with changes indicated only by color'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l ignore-immutable -d 'Allow rewriting immutable commits'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from diff" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -s n -l limit -d 'Limit number of operations to show' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -s l -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -s T -l template -d 'Render each operation using the given template' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -l config-toml -d 'Additional configuration options (can be repeated)' -r
46	46	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -l no-graph -d 'Don\'t show the graph, show a flat list of operations'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -l ignore-immutable -d 'Allow rewriting immutable commits'
42	42	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -l debug -d 'Enable debug logging'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from log" -s h -l help -d 'Print help (see more with \'--help\')'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -l what -d 'What portions of the local state to restore (can be repeated)' -r -f -a "{repo\t'The jj repo state and local branches',remote-tracking\t'The remote-tracking branches. Do not restore these if you\'d like to push after the undo'}"
14	14	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from restore" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l tool -d 'Generate diff by external command' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l context -d 'Number of lines of context to show' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
11	11	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l no-graph -d 'Don\'t show the graph, show a flat list of modified changes'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -s p -l patch -d 'Show patch of modifications to changes'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -s s -l summary -d 'For each path, show only whether it was modified, added, or deleted'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l stat -d 'Show a histogram of the changes'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l types -d 'For each path, show only its type before and after'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l name-only -d 'For each path, show only its path'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l git -d 'Show a Git-format diff'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l color-words -d 'Show a word-level diff with changes indicated only by color'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from show" -s h -l help -d 'Print help (see more with \'--help\')'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -l what -d 'What portions of the local state to restore (can be repeated)' -r -f -a "{repo\t'The jj repo state and local branches',remote-tracking\t'The remote-tracking branches. Do not restore these if you\'d like to push after the undo'}"
13	13	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from undo" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from help" -f -a "abandon" -d 'Abandon operation history'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from help" -f -a "diff" -d 'Compare changes to the repository between two operations'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from help" -f -a "log" -d 'Show the operation log'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from help" -f -a "restore" -d 'Create a new operation that restores the repo to an earlier state'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from help" -f -a "show" -d 'Show changes to the repository in an operation'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from help" -f -a "undo" -d 'Create a new operation that undoes an earlier operation'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand operation; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
14	14	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
18	18	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
17	17	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l ignore-immutable -d 'Allow rewriting immutable commits'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l debug -d 'Enable debug logging'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -l no-pager -d 'Disable the pager'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "abandon" -d 'Abandon operation history'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "diff" -d 'Compare changes to the repository between two operations'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "log" -d 'Show the operation log'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "restore" -d 'Create a new operation that restores the repo to an earlier state'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "show" -d 'Show changes to the repository in an operation'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "undo" -d 'Create a new operation that undoes an earlier operation'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand op; and not __fish_seen_subcommand_from abandon diff log restore show undo help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
19	19	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from abandon" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from abandon" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from abandon" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from abandon" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from abandon" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from abandon" -l ignore-immutable -d 'Allow rewriting immutable commits'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from abandon" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from abandon" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from abandon" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from abandon" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l operation -l op -d 'Show repository changes in this operation, compared to its parent' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l from -d 'Show repository changes from this operation' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l to -d 'Show repository changes to this operation' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l tool -d 'Generate diff by external command' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l context -d 'Number of lines of context to show' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l color -d 'When to colorize output (always, never, debug, auto)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l no-graph -d 'Don\'t show the graph, show a flat list of modified changes'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -s p -l patch -d 'Show patch of modifications to changes'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -s s -l summary -d 'For each path, show only whether it was modified, added, or deleted'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l stat -d 'Show a histogram of the changes'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l types -d 'For each path, show only its type before and after'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l name-only -d 'For each path, show only its path'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l git -d 'Show a Git-format diff'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l color-words -d 'Show a word-level diff with changes indicated only by color'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from diff" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -s n -l limit -d 'Limit number of operations to show' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -s l -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -s T -l template -d 'Render each operation using the given template' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -l no-graph -d 'Don\'t show the graph, show a flat list of operations'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -l ignore-immutable -d 'Allow rewriting immutable commits'
40	40	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -l quiet -d 'Silence non-primary command output'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -l no-pager -d 'Disable the pager'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from log" -s h -l help -d 'Print help (see more with \'--help\')'
24	24	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -l what -d 'What portions of the local state to restore (can be repeated)' -r -f -a "{repo\t'The jj repo state and local branches',remote-tracking\t'The remote-tracking branches. Do not restore these if you\'d like to push after the undo'}"
16	16	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
43	43	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from restore" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l tool -d 'Generate diff by external command' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l context -d 'Number of lines of context to show' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l config-toml -d 'Additional configuration options (can be repeated)' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l no-graph -d 'Don\'t show the graph, show a flat list of modified changes'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -s p -l patch -d 'Show patch of modifications to changes'
42	42	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -s s -l summary -d 'For each path, show only whether it was modified, added, or deleted'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l stat -d 'Show a histogram of the changes'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l types -d 'For each path, show only its type before and after'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l name-only -d 'For each path, show only its path'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l git -d 'Show a Git-format diff'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l color-words -d 'Show a word-level diff with changes indicated only by color'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from show" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -l what -d 'What portions of the local state to restore (can be repeated)' -r -f -a "{repo\t'The jj repo state and local branches',remote-tracking\t'The remote-tracking branches. Do not restore these if you\'d like to push after the undo'}"
14	14	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from undo" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from help" -f -a "abandon" -d 'Abandon operation history'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from help" -f -a "diff" -d 'Compare changes to the repository between two operations'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from help" -f -a "log" -d 'Show the operation log'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from help" -f -a "restore" -d 'Create a new operation that restores the repo to an earlier state'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from help" -f -a "show" -d 'Show changes to the repository in an operation'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from help" -f -a "undo" -d 'Create a new operation that undoes an earlier operation'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand op; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand parallelize" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand parallelize" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand parallelize" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand parallelize" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand parallelize" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand parallelize" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand parallelize" -l debug -d 'Enable debug logging'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand parallelize" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand parallelize" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand parallelize" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand prev" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand prev" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand prev" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand prev" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand prev" -s e -l edit -d 'Edit the parent directly, instead of moving the working-copy commit'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand prev" -s n -l no-edit -d 'The inverse of `--edit`'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand prev" -l conflict -d 'Jump to the previous conflicted ancestor'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand prev" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand prev" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand prev" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand prev" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand prev" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand prev" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -s b -l branch -d 'Rebase the whole branch relative to destination\'s ancestors (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -s s -l source -d 'Rebase specified revision(s) together with their trees of descendants (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -s r -l revisions -d 'Rebase the given revisions, rebasing descendants onto this revision\'s parent(s)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -s d -l destination -d 'The revision(s) to rebase onto (can be repeated to create a merge commit)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -s A -l insert-after -l after -d 'The revision(s) to insert after (can be repeated to create a merge commit)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -s B -l insert-before -l before -d 'The revision(s) to insert before (can be repeated to create a merge commit)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -l skip-empty -d 'Deprecated. Use --skip-emptied instead'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -l skip-emptied -d 'If true, when rebasing would produce an empty commit, the commit is abandoned. It will not be abandoned if it was already empty before the rebase. Will never skip merge commits with multiple non-empty parents'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand rebase" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -s r -l revision -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -l tool -d 'Specify 3-way merge tool to be used' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -s l -l list -d 'Instead of resolving one conflict, list all the conflicts'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -l debug -d 'Enable debug logging'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand resolve" -s h -l help -d 'Print help (see more with \'--help\')'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand restore" -l from -d 'Revision to restore from (source)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand restore" -l to -d 'Revision to restore into (destination)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand restore" -s c -l changes-in -d 'Undo the changes in a revision as compared to the merge of its parents' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand restore" -s r -l revision -d 'Prints an error. DO NOT USE' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand restore" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand restore" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand restore" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand restore" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand restore" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand restore" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand restore" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand restore" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand restore" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand restore" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand revert" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
13	13	--> complete -c jj -n "__fish_jj_using_subcommand revert" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand revert" -l color -d 'When to colorize output (always, never, debug, auto)' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand revert" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand revert" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand revert" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand revert" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand revert" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand revert" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand revert" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand root" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
7	7	--> complete -c jj -n "__fish_jj_using_subcommand root" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand root" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand root" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand root" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand root" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand root" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand root" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand root" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand root" -s h -l help -d 'Print help (see more with \'--help\')'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand run" -s r -l revisions -d 'The revisions to change' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand run" -s j -l jobs -d 'How many processes should run in parallel, uses by default all cores' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand run" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
7	7	--> complete -c jj -n "__fish_jj_using_subcommand run" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand run" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand run" -l config-toml -d 'Additional configuration options (can be repeated)' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand run" -s x -d 'A no-op option to match the interface of `git rebase -x`'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand run" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand run" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand run" -l debug -d 'Enable debug logging'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand run" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand run" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand run" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand show" -s T -l template -d 'Render a revision using the given template' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand show" -l tool -d 'Generate diff by external command' -r
15	15	--> complete -c jj -n "__fish_jj_using_subcommand show" -l context -d 'Number of lines of context to show' -r
27	27	--> complete -c jj -n "__fish_jj_using_subcommand show" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
18	18	--> complete -c jj -n "__fish_jj_using_subcommand show" -l at-operation -l at-op -d 'Operation to load the repo at' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand show" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand show" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand show" -s r -d 'Ignored (but lets you pass `-r` for consistency with other commands)'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand show" -s s -l summary -d 'For each path, show only whether it was modified, added, or deleted'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand show" -l stat -d 'Show a histogram of the changes'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand show" -l types -d 'For each path, show only its type before and after'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand show" -l name-only -d 'For each path, show only its path'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand show" -l git -d 'Show a Git-format diff'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand show" -l color-words -d 'Show a word-level diff with changes indicated only by color'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand show" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand show" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand show" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand show" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand show" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand show" -s h -l help -d 'Print help (see more with \'--help\')'
17	17	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
14	14	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
23	23	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -l ignore-immutable -d 'Allow rewriting immutable commits'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -l debug -d 'Enable debug logging'
41	41	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -l quiet -d 'Silence non-primary command output'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -l no-pager -d 'Disable the pager'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -s h -l help -d 'Print help (see more with \'--help\')'
39	39	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -f -a "edit" -d 'Start an editor to update the patterns that are present in the working copy'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -f -a "list" -d 'List the patterns that are currently present in the working copy'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -f -a "reset" -d 'Reset the patterns to include all files in the working copy'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -f -a "set" -d 'Update the patterns that are present in the working copy'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and not __fish_seen_subcommand_from edit list reset set help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from edit" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from edit" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from edit" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from edit" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from edit" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from edit" -l ignore-immutable -d 'Allow rewriting immutable commits'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from edit" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from edit" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from edit" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from edit" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from list" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from list" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from list" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from list" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from list" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from list" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from list" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from list" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from list" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from reset" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from reset" -l at-operation -l at-op -d 'Operation to load the repo at' -r
13	13	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from reset" -l color -d 'When to colorize output (always, never, debug, auto)' -r
16	16	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from reset" -l config-toml -d 'Additional configuration options (can be repeated)' -r
15	15	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from reset" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from reset" -l ignore-immutable -d 'Allow rewriting immutable commits'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from reset" -l debug -d 'Enable debug logging'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from reset" -l quiet -d 'Silence non-primary command output'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from reset" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from reset" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l add -d 'Patterns to add to the working copy' -r -F
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l remove -d 'Patterns to remove from the working copy' -r -F
13	13	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l clear -d 'Include no files in the working copy (combine with --add)'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from set" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from help" -f -a "edit" -d 'Start an editor to update the patterns that are present in the working copy'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from help" -f -a "list" -d 'List the patterns that are currently present in the working copy'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from help" -f -a "reset" -d 'Reset the patterns to include all files in the working copy'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from help" -f -a "set" -d 'Update the patterns that are present in the working copy'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand sparse; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand split" -l tool -d 'Specify diff editor to be used (implies --interactive)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand split" -s r -l revision -d 'The revision to split' -r
42	42	--> complete -c jj -n "__fish_jj_using_subcommand split" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand split" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand split" -l color -d 'When to colorize output (always, never, debug, auto)' -r
34	34	--> complete -c jj -n "__fish_jj_using_subcommand split" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand split" -s i -l interactive -d 'Interactively choose which parts to split. This is the default if no paths are provided'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand split" -s p -l parallel -d 'Split the revision into two parallel revisions instead of a parent and child'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand split" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand split" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand split" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand split" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand split" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand split" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand squash" -s r -l revision -d 'Revision to squash into its parent (default: @)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l from -d 'Revision(s) to squash from (default: @)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l into -l to -d 'Revision to squash into (default: @)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand squash" -s m -l message -d 'The description to use for squashed revision (don\'t open editor)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l tool -d 'Specify diff editor to be used (implies --interactive)' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand squash" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand squash" -s u -l use-destination-message -d 'Use the description of the destination revision and discard the description(s) of the source revision(s)'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -s i -l interactive -d 'Interactively choose which parts to squash'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l keep-emptied -d 'The source revision will not be abandoned'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand squash" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand squash" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand status" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand status" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand status" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand status" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand status" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand status" -l ignore-immutable -d 'Allow rewriting immutable commits'
93	93	--> complete -c jj -n "__fish_jj_using_subcommand status" -l debug -d 'Enable debug logging'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand status" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand status" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand status" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand st" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand st" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand st" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand st" -l config-toml -d 'Additional configuration options (can be repeated)' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand st" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand st" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand st" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand st" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand st" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand st" -s h -l help -d 'Print help (see more with \'--help\')'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
11	11	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -f -a "list" -d 'List tags'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -f -a "l" -d 'List tags'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand tag; and not __fish_seen_subcommand_from list l help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -s T -l template -d 'Render each tag using the given template' -r
17	17	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -s T -l template -d 'Render each tag using the given template' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from l" -s h -l help -d 'Print help (see more with \'--help\')'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from help" -f -a "list" -d 'List tags'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand tag; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
16	16	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -l ignore-immutable -d 'Allow rewriting immutable commits'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -l debug -d 'Enable debug logging'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -l quiet -d 'Silence non-primary command output'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -l no-pager -d 'Disable the pager'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -f -a "completion" -d 'Print a command-line-completion script'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -f -a "gc" -d 'Run backend-dependent garbage collection'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -f -a "mangen" -d 'Print a ROFF (manpage)'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -f -a "markdown-help" -d 'Print the CLI help for all subcommands in Markdown'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -f -a "config-schema" -d 'Print the JSON schema for the jj TOML config format'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand util; and not __fish_seen_subcommand_from completion gc mangen markdown-help config-schema help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l bash -d 'Deprecated. Use the SHELL positional argument instead'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l fish -d 'Deprecated. Use the SHELL positional argument instead'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l zsh -d 'Deprecated. Use the SHELL positional argument instead'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from completion" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -l expire -d 'Time threshold' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from gc" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from mangen" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from mangen" -l at-operation -l at-op -d 'Operation to load the repo at' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from mangen" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from mangen" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from mangen" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from mangen" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from mangen" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from mangen" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from mangen" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from mangen" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from markdown-help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from markdown-help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from markdown-help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from markdown-help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from markdown-help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from markdown-help" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from markdown-help" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from markdown-help" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from markdown-help" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from markdown-help" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from config-schema" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from config-schema" -l at-operation -l at-op -d 'Operation to load the repo at' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from config-schema" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from config-schema" -l config-toml -d 'Additional configuration options (can be repeated)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from config-schema" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from config-schema" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from config-schema" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from config-schema" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from config-schema" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from config-schema" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from help" -f -a "completion" -d 'Print a command-line-completion script'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from help" -f -a "gc" -d 'Run backend-dependent garbage collection'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from help" -f -a "mangen" -d 'Print a ROFF (manpage)'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from help" -f -a "markdown-help" -d 'Print the CLI help for all subcommands in Markdown'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from help" -f -a "config-schema" -d 'Print the JSON schema for the jj TOML config format'
24	24	--> complete -c jj -n "__fish_jj_using_subcommand util; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand undo" -l what -d 'What portions of the local state to restore (can be repeated)' -r -f -a "{repo\t'The jj repo state and local branches',remote-tracking\t'The remote-tracking branches. Do not restore these if you\'d like to push after the undo'}"
12	12	--> complete -c jj -n "__fish_jj_using_subcommand undo" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand undo" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand undo" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand undo" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand undo" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand undo" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand undo" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand undo" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand undo" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand undo" -s h -l help -d 'Print help (see more with \'--help\')'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -s r -l revision -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -l tool -d 'Specify diff editor to be used (implies --interactive)' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -s i -l interactive -d 'Interactively choose which parts to unsquash'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -l quiet -d 'Silence non-primary command output'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand unsquash" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand untrack" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
8	8	--> complete -c jj -n "__fish_jj_using_subcommand untrack" -l at-operation -l at-op -d 'Operation to load the repo at' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand untrack" -l color -d 'When to colorize output (always, never, debug, auto)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand untrack" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand untrack" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand untrack" -l ignore-immutable -d 'Allow rewriting immutable commits'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand untrack" -l debug -d 'Enable debug logging'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand untrack" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand untrack" -l no-pager -d 'Disable the pager'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand untrack" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand version" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand version" -l at-operation -l at-op -d 'Operation to load the repo at' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand version" -l color -d 'When to colorize output (always, never, debug, auto)' -r
6	6	--> complete -c jj -n "__fish_jj_using_subcommand version" -l config-toml -d 'Additional configuration options (can be repeated)' -r
7	7	--> complete -c jj -n "__fish_jj_using_subcommand version" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand version" -l ignore-immutable -d 'Allow rewriting immutable commits'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand version" -l debug -d 'Enable debug logging'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand version" -l quiet -d 'Silence non-primary command output'
6	6	--> complete -c jj -n "__fish_jj_using_subcommand version" -l no-pager -d 'Disable the pager'
7	7	--> complete -c jj -n "__fish_jj_using_subcommand version" -s h -l help -d 'Print help (see more with \'--help\')'
16	16	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
12	12	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -l at-operation -l at-op -d 'Operation to load the repo at' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -l color -d 'When to colorize output (always, never, debug, auto)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -l config-toml -d 'Additional configuration options (can be repeated)' -r
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -l ignore-immutable -d 'Allow rewriting immutable commits'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -l debug -d 'Enable debug logging'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -l no-pager -d 'Disable the pager'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -f -a "add" -d 'Add a workspace'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -f -a "forget" -d 'Stop tracking a workspace\'s working-copy commit in the repo'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -f -a "list" -d 'List workspaces'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -f -a "root" -d 'Show the current workspace root directory'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -f -a "update-stale" -d 'Update a workspace that has become stale'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and not __fish_seen_subcommand_from add forget list root update-stale help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -l name -d 'A name for the workspace' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -s r -l revision -d 'A list of parent revisions for the working-copy commit of the newly created workspace. You may specify nothing, or any number of parents' -r
14	14	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -l at-operation -l at-op -d 'Operation to load the repo at' -r
17	17	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -l color -d 'When to colorize output (always, never, debug, auto)' -r
15	15	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -l quiet -d 'Silence non-primary command output'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from add" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from forget" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from forget" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from forget" -l color -d 'When to colorize output (always, never, debug, auto)' -r
12	12	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from forget" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from forget" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from forget" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from forget" -l debug -d 'Enable debug logging'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from forget" -l quiet -d 'Silence non-primary command output'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from forget" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from forget" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from list" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from list" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from list" -l color -d 'When to colorize output (always, never, debug, auto)' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from list" -l config-toml -d 'Additional configuration options (can be repeated)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from list" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from list" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from list" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from list" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from list" -l no-pager -d 'Disable the pager'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help (see more with \'--help\')'
13	13	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from root" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from root" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from root" -l color -d 'When to colorize output (always, never, debug, auto)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from root" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from root" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from root" -l ignore-immutable -d 'Allow rewriting immutable commits'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from root" -l debug -d 'Enable debug logging'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from root" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from root" -l no-pager -d 'Disable the pager'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from root" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from update-stale" -s R -l repository -d 'Path to repository to operate on' -r -f -a "(__fish_complete_directories)"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from update-stale" -l at-operation -l at-op -d 'Operation to load the repo at' -r
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from update-stale" -l color -d 'When to colorize output (always, never, debug, auto)' -r
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from update-stale" -l config-toml -d 'Additional configuration options (can be repeated)' -r
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from update-stale" -l ignore-working-copy -d 'Don\'t snapshot the working copy, and don\'t update it'
8	8	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from update-stale" -l ignore-immutable -d 'Allow rewriting immutable commits'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from update-stale" -l debug -d 'Enable debug logging'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from update-stale" -l quiet -d 'Silence non-primary command output'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from update-stale" -l no-pager -d 'Disable the pager'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from update-stale" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from help" -f -a "add" -d 'Add a workspace'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from help" -f -a "forget" -d 'Stop tracking a workspace\'s working-copy commit in the repo'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from help" -f -a "list" -d 'List workspaces'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from help" -f -a "root" -d 'Show the current workspace root directory'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from help" -f -a "update-stale" -d 'Update a workspace that has become stale'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand workspace; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
35	35	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "abandon" -d 'Abandon a revision'
31	31	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "backout" -d 'Apply the reverse of a revision on top of another revision'
29	29	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "branch" -d 'Manage branches'
121	121	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "cat" -d 'Print contents of files in a revision'
46	46	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "checkout" -d 'Create a new, empty change and edit it in the working copy (DEPRECATED, use `jj new`)'
32	32	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "chmod" -d 'Sets or removes the executable bit for paths in the repo'
30	30	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "commit" -d 'Update the description and create a new change on top'
31	31	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "config" -d 'Manage config options'
30	30	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "debug" -d 'Low-level commands not intended for users'
29	29	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "describe" -d 'Update the change description or other metadata'
61	61	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "diff" -d 'Compare file contents between two revisions'
58	58	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "diffedit" -d 'Touch up the content changes in a revision with a diff editor'
29	29	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "duplicate" -d 'Create a new change with the same content as an existing one'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "edit" -d 'Sets the specified revision as the working-copy revision'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "file" -d 'File operations'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "files" -d 'List files in a revision (DEPRECATED use `jj file list`)'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "fix" -d 'Update files with formatting fixes or other changes'
31	31	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "git" -d 'Commands for working with Git remotes and the underlying Git repo'
41	41	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "init" -d 'Create a new repo in the given directory'
37	37	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "interdiff" -d 'Compare the changes of two commits'
30	30	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "log" -d 'Show revision history'
30	30	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "merge" -d 'Merge work from multiple branches (DEPRECATED, use `jj new`)'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "move" -d 'Move changes from one revision into another (DEPRECATED, use `jj squash`)'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "new" -d 'Create a new, empty change and (by default) edit it in the working copy'
39	39	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "next" -d 'Move the working-copy commit to the child revision'
30	30	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "obslog" -d 'Show how a change has evolved over time'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "operation" -d 'Commands for working with the operation log'
29	29	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "parallelize" -d 'Parallelize revisions by making them siblings'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "prev" -d 'Change the working copy revision relative to the parent revision'
27	27	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "rebase" -d 'Move revisions to different parent(s)'
29	29	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "resolve" -d 'Resolve a conflicted file with an external merge tool'
27	27	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "restore" -d 'Restore paths from another revision'
29	29	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "revert" -d 'A dummy command that accepts any arguments'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "root" -d 'Show the current workspace root directory'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "run" -d '(**Stub**, does not work yet) Run a command across a set of revisions.'
27	27	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "show" -d 'Show commit description and changes in a revision'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "sparse" -d 'Manage which paths from the working-copy commit are present in the working copy'
27	27	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "split" -d 'Split a revision in two'
27	27	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "squash" -d 'Move changes from a revision into another revision'
41	41	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "status" -d 'Show high-level repo status'
29	29	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "tag" -d 'Manage tags'
29	29	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "util" -d 'Infrequently used commands such as for generating shell completions'
28	28	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "undo" -d 'Undo an operation (shortcut for `jj op undo`)'
31	31	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "unsquash" -d 'Move changes from a revision\'s parent into the revision'
27	27	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "untrack" -d 'Stop tracking specified paths in the working copy'
27	27	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "version" -d 'Display version information'
30	30	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "workspace" -d 'Commands for working with workspaces'
27	27	--> complete -c jj -n "__fish_jj_using_subcommand help; and not __fish_seen_subcommand_from abandon backout branch cat checkout chmod commit config debug describe diff diffedit duplicate edit file files fix git init interdiff log merge move new next obslog operation parallelize prev rebase resolve restore revert root run show sparse split squash status tag util undo unsquash untrack version workspace help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from branch" -f -a "create" -d 'Create a new branch'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from branch" -f -a "delete" -d 'Delete an existing branch and propagate the deletion to remotes on the next push'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from branch" -f -a "forget" -d 'Forget everything about a branch, including its local and remote targets'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from branch" -f -a "list" -d 'List branches and their targets'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from branch" -f -a "move" -d 'Move existing branches to target revision'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from branch" -f -a "rename" -d 'Rename `old` branch name to `new` branch name'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from branch" -f -a "set" -d 'Create or update a branch to point to a certain commit'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from branch" -f -a "track" -d 'Start tracking given remote branches'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from branch" -f -a "untrack" -d 'Stop tracking given remote branches'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "edit" -d 'Start an editor on a jj config file'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "get" -d 'Get the value of a given config option.'
15	15	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "list" -d 'List variables set in config file, along with their values'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "path" -d 'Print the path to the config file'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "set" -d 'Update config file to set the given option to a given value'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "copy-detection" -d 'Rebuild commit index'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "fileset" -d 'Parse fileset expression'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "index" -d 'Show commit index stats'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "local-working-copy" -d 'Show information about the local working copy state'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "operation" -d 'Show information about an operation and its view'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "reindex" -d 'Rebuild commit index'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "revset" -d 'Evaluate revset to full commit IDs'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "snapshot" -d 'Trigger a snapshot in the op log'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "template" -d 'Parse a template'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "tree" -d 'List the recursive entries of a tree'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "watchman"
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from debug" -f -a "working-copy" -d 'Show information about the working copy state'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from file" -f -a "chmod" -d 'Sets or removes the executable bit for paths in the repo'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from file" -f -a "list" -d 'List files in a revision'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from file" -f -a "show" -d 'Print contents of files in a revision'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from file" -f -a "untrack" -d 'Stop tracking specified paths in the working copy'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from git" -f -a "clone" -d 'Create a new repo backed by a clone of a Git repo'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from git" -f -a "export" -d 'Update the underlying Git repo with changes made in the repo'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from git" -f -a "fetch" -d 'Fetch from a Git remote'
14	14	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from git" -f -a "import" -d 'Update repo with changes made in the underlying Git repo'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from git" -f -a "init" -d 'Create a new Git backed repo'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from git" -f -a "push" -d 'Push to a Git remote'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from git" -f -a "remote" -d 'Manage Git remotes'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from git" -f -a "submodule" -d 'FOR INTERNAL USE ONLY Interact with git submodules'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from operation" -f -a "abandon" -d 'Abandon operation history'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from operation" -f -a "diff" -d 'Compare changes to the repository between two operations'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from operation" -f -a "log" -d 'Show the operation log'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from operation" -f -a "restore" -d 'Create a new operation that restores the repo to an earlier state'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from operation" -f -a "show" -d 'Show changes to the repository in an operation'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from operation" -f -a "undo" -d 'Create a new operation that undoes an earlier operation'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from sparse" -f -a "edit" -d 'Start an editor to update the patterns that are present in the working copy'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from sparse" -f -a "list" -d 'List the patterns that are currently present in the working copy'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from sparse" -f -a "reset" -d 'Reset the patterns to include all files in the working copy'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from sparse" -f -a "set" -d 'Update the patterns that are present in the working copy'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from tag" -f -a "list" -d 'List tags'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from util" -f -a "completion" -d 'Print a command-line-completion script'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from util" -f -a "gc" -d 'Run backend-dependent garbage collection'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from util" -f -a "mangen" -d 'Print a ROFF (manpage)'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from util" -f -a "markdown-help" -d 'Print the CLI help for all subcommands in Markdown'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from util" -f -a "config-schema" -d 'Print the JSON schema for the jj TOML config format'
10	10	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from workspace" -f -a "add" -d 'Add a workspace'
11	11	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from workspace" -f -a "forget" -d 'Stop tracking a workspace\'s working-copy commit in the repo'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from workspace" -f -a "list" -d 'List workspaces'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from workspace" -f -a "root" -d 'Show the current workspace root directory'
9	9	--> complete -c jj -n "__fish_jj_using_subcommand help; and __fish_seen_subcommand_from workspace" -f -a "update-stale" -d 'Update a workspace that has become stale'
2191	2226	-> fx --comp fish | source
35	35	--> complete --command fx --arguments '(COMP_FISH=(commandline -cp) fx)'
2765	3048	-> s --completion fish | source
6	6	--> function __s_debug...
1	1	--> function __s_perform_completion...
1	1	--> function __s_perform_completion_once...
1	1	--> function __s_clear_perform_completion_once_result...
1	1	--> function __s_requires_order_preservation...
2	2	--> function __s_prepare_completions...
14	226	--> if type -q "s"...
65	65	---> type -q "s"
147	147	---> complete --do-complete "s " > /dev/null 2>&1
7	7	--> complete -c s -e
11	11	--> complete -c s -n '__s_clear_perform_completion_once_result'
17	17	--> complete -c s -n 'not __s_requires_order_preservation && __s_prepare_completions' -f -a '$__s_comp_results'
10	10	--> complete -k -c s -n '__s_requires_order_preservation && __s_prepare_completions' -f -a '$__s_comp_results'
9118	17600	-> gix completions | source
41	41	--> complete -c gix -n "__fish_use_subcommand" -s r -l repository -d 'The repository to access' -r -F
10	10	--> complete -c gix -n "__fish_use_subcommand" -s c -l config -d 'Add these values to the configuration in the form of `key=value` or `key`' -r
9	9	--> complete -c gix -n "__fish_use_subcommand" -s t -l threads -d 'The amount of threads to use for some operations' -r
12	12	--> complete -c gix -n "__fish_use_subcommand" -s f -l format -d 'Determine the format to use when outputting statistics' -r -f -a "{human	'',json	''}"
12	12	--> complete -c gix -n "__fish_use_subcommand" -l object-hash -d 'The object format to assume when reading files that don\'t inherently know about it, or when writing files' -r -f -a "{SHA1	''}"
8	8	--> complete -c gix -n "__fish_use_subcommand" -s v -l verbose -d 'Display verbose messages and progress information'
7	7	--> complete -c gix -n "__fish_use_subcommand" -l trace -d 'Display structured `tracing` output in a tree-like structure'
7	7	--> complete -c gix -n "__fish_use_subcommand" -l no-verbose -d 'Turn off verbose message display for commands where these are shown by default'
7	7	--> complete -c gix -n "__fish_use_subcommand" -l progress -d 'Bring up a terminal user interface displaying progress visually'
8	8	--> complete -c gix -n "__fish_use_subcommand" -s s -l strict -d 'Don\'t default malformed configuration flags, but show an error instead. Ignore IO errors as well'
8	8	--> complete -c gix -n "__fish_use_subcommand" -l progress-keep-open -d 'The progress TUI will stay up even though the work is already completed'
7	7	--> complete -c gix -n "__fish_use_subcommand" -s h -l help -d 'Print help (see more with \'--help\')'
7	7	--> complete -c gix -n "__fish_use_subcommand" -s V -l version -d 'Print version'
9	9	--> complete -c gix -n "__fish_use_subcommand" -f -a "archive" -d 'Subcommands for creating worktree archives'
7	7	--> complete -c gix -n "__fish_use_subcommand" -f -a "clean"
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "commit-graph" -d 'Subcommands for interacting with commit-graphs'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "odb" -d 'Interact with the object database'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "fsck" -d 'Check for missing objects'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "tree" -d 'Interact with tree objects'
9	9	--> complete -c gix -n "__fish_use_subcommand" -f -a "commit" -d 'Interact with commit objects'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "verify" -d 'Verify the integrity of the entire repository'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "revision" -d 'Query and obtain information about revisions'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "credential" -d 'A program just like `git credential`'
7	7	--> complete -c gix -n "__fish_use_subcommand" -f -a "fetch" -d 'Fetch data from remotes and store it in the repository'
11	11	--> complete -c gix -n "__fish_use_subcommand" -f -a "clone"
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "mailmap" -d 'Interact with the mailmap'
7	7	--> complete -c gix -n "__fish_use_subcommand" -f -a "remote" -d 'Interact with the remote hosts'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "attributes" -d 'Interact with the attribute files like .gitattributes'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "exclude" -d 'Interact with the exclude files like .gitignore'
6	6	--> complete -c gix -n "__fish_use_subcommand" -f -a "index"
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "submodule" -d 'Interact with submodules'
7	7	--> complete -c gix -n "__fish_use_subcommand" -f -a "is-clean"
7	7	--> complete -c gix -n "__fish_use_subcommand" -f -a "is-changed"
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "config-tree" -d 'Show which git configuration values are used or planned'
7	7	--> complete -c gix -n "__fish_use_subcommand" -f -a "status" -d 'compute repository status similar to `git status`'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "config" -d 'Print all entries in a configuration file or access other sub-commands'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "corpus" -d 'run algorithms on a corpus of git repositories and store their results for later analysis'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "free" -d 'Subcommands that need no git repository to run'
8	8	--> complete -c gix -n "__fish_use_subcommand" -f -a "completions" -d 'Generate shell completions to stdout or a directory'
7	7	--> complete -c gix -n "__fish_use_subcommand" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from archive" -s f -l format -d 'Explicitly set the format. Otherwise derived from the suffix of the output file' -r -f -a "{internal	'An internal format that is for debugging, it should not be persisted and cannot be read back',tar	'Use the `.tar` file format, uncompressed',tar-gz	'Use the `.tar.gz` file format, compressed with `gzip`',zip	'Use the `.zip` container format'}"
10	10	--> complete -c gix -n "__fish_seen_subcommand_from archive" -l prefix -d 'Apply the prefix verbatim to any path we add to the archive. Use a trailing `/` if prefix is a directory' -r
10	10	--> complete -c gix -n "__fish_seen_subcommand_from archive" -s l -l compression-level -d 'The compression strength to use for `.zip` and `.tar.gz` archives, valid from 0-9' -r
9	9	--> complete -c gix -n "__fish_seen_subcommand_from archive" -s p -l add-path -d 'Add the given path to the archive. Directories will always be empty' -r -F
9	9	--> complete -c gix -n "__fish_seen_subcommand_from archive" -s v -l add-virtual-file -d 'Add the new file from a slash-separated path, which must happen in pairs of two, first the path, then the content' -r
9	9	--> complete -c gix -n "__fish_seen_subcommand_from archive" -s h -l help -d 'Print help (see more with \'--help\')'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from clean" -l skip-hidden-repositories -d 'Enter ignored directories to skip repositories contained within' -r -f -a "{all	'',non-bare	''}"
11	11	--> complete -c gix -n "__fish_seen_subcommand_from clean" -l find-untracked-repositories -d 'What kind of repositories to find inside of untracked directories' -r -f -a "{all	'',non-bare	''}"
9	9	--> complete -c gix -n "__fish_seen_subcommand_from clean" -l debug -d 'Print additional debug information to help understand decisions it made'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from clean" -s n -l dry-run -d 'A dummy to easy with muscle-memory. This flag is assumed if provided or not, and has no effect'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from clean" -s e -l execute -d 'Actually perform the operation, which deletes files on disk without chance of recovery'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from clean" -s x -l ignored -d 'Remove ignored (and expendable) files'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from clean" -s p -l precious -d 'Remove precious files'
7	7	--> complete -c gix -n "__fish_seen_subcommand_from clean" -s d -l directories -d 'Remove whole directories'
7	7	--> complete -c gix -n "__fish_seen_subcommand_from clean" -s r -l repositories -d 'Remove nested repositories'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from clean" -s m -l pathspec-matches-result -d 'Pathspec patterns are used to match the result of the dirwalk, not the dirwalk itself'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from clean" -s h -l help -d 'Print help (see more with \'--help\')'
26	26	--> complete -c gix -n "__fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify the integrity of a commit graph'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -f -a "list" -d 'List all entries in the commit-graph as reachable by starting from `HEAD`'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from commit-graph; and __fish_seen_subcommand_from verify" -s s -l statistics -d 'output statistical information about the pack'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from commit-graph; and __fish_seen_subcommand_from verify" -s h -l help -d 'Print help'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from commit-graph; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from commit-graph; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify the integrity of a commit graph'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from commit-graph; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -f -a "list" -d 'List all entries in the commit-graph as reachable by starting from `HEAD`'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from commit-graph; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats; and not __fish_seen_subcommand_from help" -f -a "entries" -d 'Print all object names'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats; and not __fish_seen_subcommand_from help" -f -a "info" -d 'Provide general information about the object database'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats; and not __fish_seen_subcommand_from help" -f -a "stats" -d 'Count and obtain information on all, possibly duplicate, objects in the database'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from odb; and __fish_seen_subcommand_from entries" -s h -l help -d 'Print help'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from odb; and __fish_seen_subcommand_from info" -s h -l help -d 'Print help'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from odb; and __fish_seen_subcommand_from stats" -s h -l help -d 'Print help'
19	19	--> complete -c gix -n "__fish_seen_subcommand_from odb; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats; and not __fish_seen_subcommand_from help" -f -a "entries" -d 'Print all object names'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from odb; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats; and not __fish_seen_subcommand_from help" -f -a "info" -d 'Provide general information about the object database'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from odb; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats; and not __fish_seen_subcommand_from help" -f -a "stats" -d 'Count and obtain information on all, possibly duplicate, objects in the database'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from odb; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from fsck" -s h -l help -d 'Print help'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from help" -f -a "entries" -d 'Print entries in a given tree'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from help" -f -a "info" -d 'Provide information about a tree'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from tree; and __fish_seen_subcommand_from entries" -s r -l recursive -d 'Traverse the entire tree and its subtrees respectively, not only this tree'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from tree; and __fish_seen_subcommand_from entries" -s e -l extended -d 'Provide files size as well. This is expensive as the object is decoded entirely'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from tree; and __fish_seen_subcommand_from entries" -s h -l help -d 'Print help'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from tree; and __fish_seen_subcommand_from info" -s e -l extended -d 'Provide files size as well. This is expensive as the object is decoded entirely'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from tree; and __fish_seen_subcommand_from info" -s h -l help -d 'Print help'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from tree; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from help" -f -a "entries" -d 'Print entries in a given tree'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from tree; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from help" -f -a "info" -d 'Provide information about a tree'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from tree; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify the signature of a commit'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from help" -f -a "describe" -d 'Describe the current commit or the given one using the name of the closest annotated tag in its ancestry'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from verify" -s h -l help -d 'Print help'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from describe" -s c -l max-candidates -d 'Consider only the given `n` candidates. This can take longer, but potentially produces more accurate results' -r
11	11	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from describe" -s d -l dirty-suffix -d 'Set the suffix to append if the repository is dirty (not counting untracked files)' -r
17	17	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from describe" -s t -l annotated-tags -d 'Use annotated tag references only, not all tags'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from describe" -s a -l all-refs -d 'Use all references under the `ref/` namespaces, which includes tag references, local and remote branches'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from describe" -s f -l first-parent -d 'Only follow the first parent when traversing the commit graph'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from describe" -s l -l long -d 'Always display the long format, even if that would not be necessary as the id is located directly on a reference'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from describe" -s s -l statistics -d 'Print information on stderr to inform about performance statistics'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from describe" -l always -d 'If there was no way to describe the commit, fallback to using the abbreviated input revision'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from describe" -s h -l help -d 'Print help'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify the signature of a commit'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from help" -f -a "describe" -d 'Describe the current commit or the given one using the name of the closest annotated tag in its ancestry'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from commit; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from describe; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from verify" -s a -l algorithm -d 'The algorithm used to verify packs. They differ in costs' -r -f -a "{less-time	'',less-memory	''}"
9	9	--> complete -c gix -n "__fish_seen_subcommand_from verify" -s s -l statistics -d 'output statistical information'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from verify" -l decode -d 'Decode and parse tags, commits and trees to validate their correctness beyond hashing correctly'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from verify" -l re-encode -d 'Decode and parse tags, commits and trees to validate their correctness, and re-encode them'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from verify" -s h -l help -d 'Print help (see more with \'--help\')'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -f -a "list" -d 'List all commits reachable from the given rev-spec'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -f -a "explain" -d 'Provide the revision specification like `@~1` to explain'
19	19	--> complete -c gix -n "__fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -f -a "resolve" -d 'Try to resolve the given revspec and print the object names'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -f -a "previous-branches" -d 'Return the names and hashes of all previously checked-out branches'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from list" -s l -l limit -d 'How many commits to list at most' -r
12	12	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from list" -s s -l svg -d 'Write the graph as SVG file to the given path' -r -F
10	10	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from explain" -s h -l help -d 'Print help'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from resolve" -s b -l blob-format -d 'How to display blobs' -r -f -a "{git	'The version stored in the Git Object Database',worktree	'The version that would be checked out into the worktree, including filters',diff	'The version that would be diffed (Worktree + Text-Conversion)',diff-or-git	'The version that would be diffed if there is a text-conversion, or the one stored in Git otherwise'}"
15	15	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from resolve" -s t -l tree-mode -d 'How to display trees as obtained with `@:dirname` or `@^{tree}`' -r -f -a "{raw	'Show the raw bytes - only useful for piping into files for use with tooling',pretty	'Display a tree in human-readable form'}"
10	10	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from resolve" -s e -l explain -d 'Instead of resolving a rev-spec, explain what would be done for the first spec'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from resolve" -s r -l reference -d 'Also show the name of the reference which led to the object'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from resolve" -s c -l cat-file -d 'Show the first resulting object similar to how `git cat-file` would, but don\'t show the resolved spec'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from resolve" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from previous-branches" -s h -l help -d 'Print help'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -f -a "list" -d 'List all commits reachable from the given rev-spec'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -f -a "explain" -d 'Provide the revision specification like `@~1` to explain'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -f -a "resolve" -d 'Try to resolve the given revspec and print the object names'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -f -a "previous-branches" -d 'Return the names and hashes of all previously checked-out branches'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from revision; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject; and not __fish_seen_subcommand_from help" -f -a "fill" -d 'Get the credentials fed for `url=<url>` via STDIN'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject; and not __fish_seen_subcommand_from help" -f -a "approve" -d 'Approve the information piped via STDIN as obtained with last call to `fill`'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject; and not __fish_seen_subcommand_from help" -f -a "reject" -d 'Try to resolve the given revspec and print the object names'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from credential; and __fish_seen_subcommand_from fill" -s h -l help -d 'Print help'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from credential; and __fish_seen_subcommand_from approve" -s h -l help -d 'Print help'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from credential; and __fish_seen_subcommand_from reject" -s h -l help -d 'Print help'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from credential; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject; and not __fish_seen_subcommand_from help" -f -a "fill" -d 'Get the credentials fed for `url=<url>` via STDIN'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from credential; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject; and not __fish_seen_subcommand_from help" -f -a "approve" -d 'Approve the information piped via STDIN as obtained with last call to `fill`'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from credential; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject; and not __fish_seen_subcommand_from help" -f -a "reject" -d 'Try to resolve the given revspec and print the object names'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from credential; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -s g -l open-negotiation-graph -d 'Open the commit graph used for negotiation and write an SVG file to PATH' -r -F
9	9	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -l depth -d 'Fetch with the history truncated to the given number of commits as seen from the remote' -r
9	9	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -l deepen -d 'Extend the current shallow boundary by the given amount of commits, with 0 meaning no change' -r
8	8	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -l shallow-since -d 'Cutoff all history past the given date. Can be combined with shallow-exclude' -r
7	7	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -l shallow-exclude -d 'Cutoff all history past the tag-name or ref-name. Can be combined with shallow-since' -r
9	9	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -s r -l remote -d 'The name of the remote to connect to, or the url of the remote to connect to directly' -r
9	9	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -s n -l dry-run -d 'Don\'t change the local repository, but otherwise try to be as accurate as possible'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -s H -l handshake-info -d 'Output additional typically information provided by the server as part of the connection handshake'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -s s -l negotiation-info -d 'Print statistics about negotiation phase'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -l unshallow -d 'Remove the shallow boundary and fetch the entire history available on the remote'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from fetch" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from clone" -l depth -d 'Create a shallow clone with the history truncated to the given number of commits' -r
8	8	--> complete -c gix -n "__fish_seen_subcommand_from clone" -l shallow-since -d 'Cutoff all history past the given date. Can be combined with shallow-exclude' -r
8	8	--> complete -c gix -n "__fish_seen_subcommand_from clone" -l shallow-exclude -d 'Cutoff all history past the tag-name or ref-name. Can be combined with shallow-since' -r
8	8	--> complete -c gix -n "__fish_seen_subcommand_from clone" -s H -l handshake-info -d 'Output additional typically information provided by the server as part of the connection handshake'
7	7	--> complete -c gix -n "__fish_seen_subcommand_from clone" -l bare -d 'The clone will be bare and a working tree checkout won\'t be available'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from clone" -l no-tags -d 'Do not clone any tags. Useful to reduce the size of the clone if only branches are needed'
7	7	--> complete -c gix -n "__fish_seen_subcommand_from clone" -s h -l help -d 'Print help'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from help" -f -a "entries" -d 'Print all entries in configured mailmaps, inform about errors as well'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from mailmap; and __fish_seen_subcommand_from entries" -s h -l help -d 'Print help'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from mailmap; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from help" -f -a "entries" -d 'Print all entries in configured mailmaps, inform about errors as well'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from mailmap; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map; and not __fish_seen_subcommand_from help" -s n -l name -d 'The name of the remote to connect to, or the URL of the remote to connect to directly' -r
15	15	--> complete -c gix -n "__fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map; and not __fish_seen_subcommand_from help" -s H -l handshake-info -d 'Output additional typically information provided by the server as part of the connection handshake'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map; and not __fish_seen_subcommand_from help" -f -a "refs" -d 'Print all references available on the remote'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map; and not __fish_seen_subcommand_from help" -f -a "ref-map" -d 'Print all references available on the remote as filtered through ref-specs'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from remote; and __fish_seen_subcommand_from refs" -s h -l help -d 'Print help'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from remote; and __fish_seen_subcommand_from ref-map" -s u -l show-unmapped-remote-refs -d 'Also display remote references that were sent by the server, but filtered by the refspec locally'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from remote; and __fish_seen_subcommand_from ref-map" -s h -l help -d 'Print help'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from remote; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map; and not __fish_seen_subcommand_from help" -f -a "refs" -d 'Print all references available on the remote'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from remote; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map; and not __fish_seen_subcommand_from help" -f -a "ref-map" -d 'Print all references available on the remote as filtered through ref-specs'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from remote; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from validate-baseline; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from validate-baseline; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -f -a "validate-baseline" -d 'Run `git check-attr`  and `git check-ignore` on all files of the index or all files passed via stdin and validate that we get the same outcome when computing attributes'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from validate-baseline; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -f -a "query" -d 'List all attributes of the given path-specs and display the result similar to `git check-attr`'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from validate-baseline; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and __fish_seen_subcommand_from validate-baseline" -s s -l statistics -d 'Print various statistics to stderr'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and __fish_seen_subcommand_from validate-baseline" -l no-ignore -d 'Don\'t validated excludes as obtaining them with `check-ignore` can be very slow'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and __fish_seen_subcommand_from validate-baseline" -s h -l help -d 'Print help'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and __fish_seen_subcommand_from query" -s s -l statistics -d 'Print various statistics to stderr'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and __fish_seen_subcommand_from query" -s h -l help -d 'Print help'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from validate-baseline; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -f -a "validate-baseline" -d 'Run `git check-attr`  and `git check-ignore` on all files of the index or all files passed via stdin and validate that we get the same outcome when computing attributes'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from validate-baseline; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -f -a "query" -d 'List all attributes of the given path-specs and display the result similar to `git check-attr`'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from attributes; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from validate-baseline; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -f -a "query" -d 'Check if path-specs are excluded and print the result similar to `git check-ignore`'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from exclude; and __fish_seen_subcommand_from query" -s p -l patterns -d 'Additional patterns to use for exclusions. They have the highest priority' -r
9	9	--> complete -c gix -n "__fish_seen_subcommand_from exclude; and __fish_seen_subcommand_from query" -s s -l statistics -d 'Print various statistics to stderr'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from exclude; and __fish_seen_subcommand_from query" -s i -l show-ignore-patterns -d 'Show actual ignore patterns instead of un-excluding an entry'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from exclude; and __fish_seen_subcommand_from query" -s h -l help -d 'Print help (see more with \'--help\')'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from exclude; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -f -a "query" -d 'Check if path-specs are excluded and print the result similar to `git check-ignore`'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from exclude; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from query; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from from-tree; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
19	19	--> complete -c gix -n "__fish_seen_subcommand_from index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from from-tree; and not __fish_seen_subcommand_from help" -f -a "entries" -d 'Print all entries to standard output'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from from-tree; and not __fish_seen_subcommand_from help" -f -a "from-tree" -d 'Create an index from a tree-ish'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from from-tree; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from entries" -s f -l format -d 'How to output index entries' -r -f -a "{simple	'Show only minimal information, useful for first glances',rich	'Show much more information that is still human-readable'}"
10	10	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from entries" -l no-attributes -d 'Do not visualize excluded entries or attributes per path'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from entries" -s i -l attributes-from-index -d 'Load attribute and ignore files from the index, don\'t look at the worktree'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from entries" -s r -l recurse-submodules -d 'Display submodule entries as well if their repository exists'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from entries" -s s -l statistics -d 'Print various statistics to stderr'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from entries" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from from-tree" -s i -l index-output-path -d 'Path to the index file to be written. If none is given it will be kept in memory only as a way to measure performance. One day we will probably write the index back by default, but that requires us to write more of the index to work' -r -F
10	10	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from from-tree" -s f -l force -d 'Overwrite the specified index file if it already exists'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from from-tree" -s s -l skip-hash -d 'Don\'t write the trailing hash for a performance gain'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from from-tree" -s h -l help -d 'Print help'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from from-tree; and not __fish_seen_subcommand_from help" -f -a "entries" -d 'Print all entries to standard output'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from from-tree; and not __fish_seen_subcommand_from help" -f -a "from-tree" -d 'Create an index from a tree-ish'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from from-tree; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -f -a "list" -d 'Print all direct submodules to standard output'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from submodule; and __fish_seen_subcommand_from list" -s d -l dirty-suffix -d 'Set the suffix to append if the repository is dirty (not counting untracked files)' -r
10	10	--> complete -c gix -n "__fish_seen_subcommand_from submodule; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from submodule; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -f -a "list" -d 'Print all direct submodules to standard output'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from submodule; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from is-clean" -s h -l help -d 'Print help'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from is-changed" -s h -l help -d 'Print help'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from config-tree" -s h -l help -d 'Print help'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from status" -s f -l format -d 'The way status data is displayed' -r -f -a "{simplified	'A basic format that is easy to read, and useful for a first glimpse as flat list',porcelain-v2	'Output very similar to `git status --porcelain=2`'}"
13	13	--> complete -c gix -n "__fish_seen_subcommand_from status" -l ignored -d 'If enabled, show ignored files and directories' -r -f -a "{collapsed	'display all ignored files and directories, but collapse them if possible to simplify',matching	'Show exact matches. Note that this may show directories if these are a match as well'}"
16	16	--> complete -c gix -n "__fish_seen_subcommand_from status" -l submodules -d 'Define how to display the submodule status. Defaults to git configuration if unset' -r -f -a "{all	'display all information about submodules, including ref changes, modifications and untracked files',ref-change	'Compare only the configuration of the superprojects commit with the actually checked out `HEAD` commit',modifications	'See if there are worktree modifications compared to the index, but do not check for untracked files',none	'Ignore all submodule changes'}"
8	8	--> complete -c gix -n "__fish_seen_subcommand_from status" -l index-worktree-renames -d 'Enable rename tracking between the index and the working tree, preventing the collapse of folders as well' -r
14	14	--> complete -c gix -n "__fish_seen_subcommand_from status" -s s -l statistics -d 'Print additional statistics to help understanding performance'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from status" -l no-write -d 'Don\'t write back a changed index, which forces this operation to always be idempotent'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from status" -s h -l help -d 'Print help (see more with \'--help\')'
8	8	--> complete -c gix -n "__fish_seen_subcommand_from config" -s h -l help -d 'Print help (see more with \'--help\')'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh; and not __fish_seen_subcommand_from help" -l db -d 'The path to the database to read and write depending on the sub-command' -r -F
16	16	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh; and not __fish_seen_subcommand_from help" -s p -l path -d 'The path to the root of the corpus to search repositories in' -r -F
13	13	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh; and not __fish_seen_subcommand_from help" -f -a "run" -d 'Perform a corpus run on all registered repositories'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh; and not __fish_seen_subcommand_from help" -f -a "refresh" -d 'Re-read all repositories under the corpus directory, and add or update them'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and __fish_seen_subcommand_from run" -s r -l repo-sql-suffix -d 'The SQL that will be appended to the actual select statement for repositories to apply additional filtering, like `LIMIT 10`' -r
11	11	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and __fish_seen_subcommand_from run" -s t -l include-task -d 'The short_names of the tasks to include when running' -r
10	10	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and __fish_seen_subcommand_from run" -s n -l dry-run -d 'Don\'t run any task, but print all repos that would be traversed once'
9	9	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and __fish_seen_subcommand_from run" -s h -l help -d 'Print help (see more with \'--help\')'
10	10	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and __fish_seen_subcommand_from refresh" -s h -l help -d 'Print help'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh; and not __fish_seen_subcommand_from help" -f -a "run" -d 'Perform a corpus run on all registered repositories'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh; and not __fish_seen_subcommand_from help" -f -a "refresh" -d 'Re-read all repositories under the corpus directory, and add or update them'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from corpus; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "commit-graph" -d 'Subcommands for interacting with commit-graphs'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "mailmap" -d 'Subcommands for interacting with mailmaps'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "pack" -d 'Subcommands for interacting with pack files and indices'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "index" -d 'Subcommands for interacting with a worktree index, typically at .git/index'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "discover" -d 'Show information about repository discovery and when opening a repository at the current path'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify the integrity of a commit graph'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from commit-graph; and __fish_seen_subcommand_from verify" -s s -l statistics -d 'output statistical information about the pack'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from commit-graph; and __fish_seen_subcommand_from verify" -s h -l help -d 'Print help'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from commit-graph; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify the integrity of a commit graph'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from commit-graph; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -s p -l path -d 'The path to the mailmap file' -r -F
14	14	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Parse all entries in the mailmap and report malformed lines or collisions'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from mailmap; and __fish_seen_subcommand_from verify" -s h -l help -d 'Print help'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from mailmap; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Parse all entries in the mailmap and report malformed lines or collisions'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from mailmap; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
26	26	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "index" -d 'Subcommands for interacting with pack indices (.idx)'
26	26	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "multi-index" -d 'Subcommands for interacting with multi-pack indices (named "multi-pack-index")'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "create" -d 'Create a new pack with a set of objects'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "receive" -d 'Use the gix-protocol to receive a pack, emulating a clone'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "explode" -d 'Dissolve a pack into its loose objects'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify the integrity of a pack, index or multi-index file'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "create" -d 'create a pack index from a pack data file'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
19	19	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from create" -s i -l iteration-mode -d 'Specify how to iterate the pack, defaults to \'verify\'' -r -f -a "{as-is	'',verify	'',restore	''}"
15	15	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from create" -s p -l pack-path -d 'Path to the pack file to read (with .pack extension)' -r -F
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from create" -s h -l help -d 'Print help (see more with \'--help\')'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "create" -d 'create a pack index from a pack data file'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
26	26	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -s i -l multi-index-path -d 'The path to the index file' -r -F
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "entries" -d 'Display all entries of a multi-index as: *oid* *pack-id* *pack-offset*'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "info" -d 'Print general information about a multi-index file'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify a multi-index quickly without inspecting objects themselves'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "create" -d 'Create a multi-pack index from one or more pack index files, overwriting possibly existing files'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and __fish_seen_subcommand_from entries" -s h -l help -d 'Print help'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and __fish_seen_subcommand_from info" -s h -l help -d 'Print help'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and __fish_seen_subcommand_from verify" -s h -l help -d 'Print help'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and __fish_seen_subcommand_from create" -s h -l help -d 'Print help (see more with \'--help\')'
28	28	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "entries" -d 'Display all entries of a multi-index as: *oid* *pack-id* *pack-offset*'
26	26	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "info" -d 'Print general information about a multi-index file'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify a multi-index quickly without inspecting objects themselves'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "create" -d 'Create a multi-pack index from one or more pack index files, overwriting possibly existing files'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from create" -s r -l repository -d 'the directory containing the \'.git\' repository from which objects should be read' -r -F
15	15	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from create" -s e -l expansion -d 'the way objects are expanded. They differ in costs' -r -f -a "{none	'',tree-traversal	'',tree-diff	''}"
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from create" -l counting-threads -d 'The amount of threads to use when counting and the `--nondeterminisitc-count` flag is set, defaulting to the globally configured threads' -r
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from create" -l pack-cache-size-mb -d 'The size in megabytes for a cache to speed up pack access for packs with long delta chains. It is shared among all threads, so 4 threads would use their own cache 1/4th of the size' -r
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from create" -l object-cache-size-mb -d 'The size in megabytes for a cache to speed up accessing entire objects, bypassing object database access when hit. It is shared among all threads, so 4 threads would use their own cache 1/4th of the size' -r
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from create" -s o -l output-directory -d 'The directory into which to write the pack file' -r -F
11	11	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from create" -l nondeterministic-count -d 'if set, the counting phase may be accelerated using multithreading'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from create" -s s -l statistics -d 'If set statistical information will be presented to inform about pack creation details. It\'s a form of instrumentation for developers to help improve pack generation'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from create" -l thin -d 'if set, delta-objects whose base object wouldn\'t be in the pack will not be recompressed as base object, but instead refer to its base object using its object id'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from create" -s h -l help -d 'Print help (see more with \'--help\')'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from receive" -s p -l protocol -d 'The protocol version to use. Valid values are 1 and 2' -r
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from receive" -s d -l refs-directory -d 'the directory into which to write references. Existing files will be overwritten' -r -F
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from receive" -s r -l reference -d 'If set once or more times, these references will be fetched instead of all advertised ones' -r
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from receive" -s h -l help -d 'Print help (see more with \'--help\')'
19	19	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from explode" -s c -l check -d 'The amount of checks to run' -r -f -a "{all	'',skip-file-checksum	'',skip-file-and-object-checksum	'',skip-file-and-object-checksum-and-no-abort-on-decode	''}"
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from explode" -l verify -d 'Read written objects back and assert they match their source. Fail the operation otherwise'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from explode" -l delete-pack -d 'delete the pack and index file after the operation is successful'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from explode" -l sink-compress -d 'Compress bytes even when using the sink, i.e. no object directory is specified'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from explode" -s h -l help -d 'Print help (see more with \'--help\')'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from verify" -s a -l algorithm -d 'The algorithm used to verify packs. They differ in costs' -r -f -a "{less-time	'',less-memory	''}"
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from verify" -s s -l statistics -d 'output statistical information'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from verify" -l decode -d 'Decode and parse tags, commits and trees to validate their correctness beyond hashing correctly'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from verify" -l re-encode -d 'Decode and parse tags, commits and trees to validate their correctness, and re-encode them'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from verify" -s h -l help -d 'Print help (see more with \'--help\')'
39	39	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "index" -d 'Subcommands for interacting with pack indices (.idx)'
28	28	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "multi-index" -d 'Subcommands for interacting with multi-pack indices (named "multi-pack-index")'
27	27	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "create" -d 'Create a new pack with a set of objects'
28	28	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "receive" -d 'Use the gix-protocol to receive a pack, emulating a clone'
26	26	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "explode" -d 'Dissolve a pack into its loose objects'
50	50	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify the integrity of a pack, index or multi-index file'
30	30	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from create" -f -a "create" -d 'create a pack index from a pack data file'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "entries" -d 'Display all entries of a multi-index as: *oid* *pack-id* *pack-offset*'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "info" -d 'Print general information about a multi-index file'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "verify" -d 'Verify a multi-index quickly without inspecting objects themselves'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "create" -d 'Create a multi-pack index from one or more pack index files, overwriting possibly existing files'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -l object-hash -d 'The object format to assume when reading files that don\'t inherently know about it, or when writing files' -r -f -a "{SHA1	''}"
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -s i -l index-path -d 'The path to the index file' -r -F
20	20	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -f -a "from-list" -d 'Create an index from a list of empty files, one per line of the input'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Validate constraints and assumptions of an index along with its integrity'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -f -a "info" -d 'Print information about the index structure'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -f -a "checkout-exclusive" -d 'Checkout the index into a directory with exclusive write access, similar to what would happen during clone'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from from-list" -s i -l index-output-path -d 'Path to the index file to be written. If none is given it will be kept in memory only as a way to measure performance. One day we will probably write the index back by default, but that requires us to write more of the index to work' -r -F
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from from-list" -s f -l force -d 'Overwrite the specified index file if it already exists'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from from-list" -s s -l skip-hash -d 'Don\'t write the trailing hash for a performance gain'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from from-list" -s h -l help -d 'Print help'
40	40	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from verify" -s h -l help -d 'Print help'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from info" -l no-details -d 'Do not extract specific extension information to gain only a superficial idea of the index\'s composition'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from info" -s h -l help -d 'Print help'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from checkout-exclusive" -s r -l repository -d 'The path to `.git` repository from which objects can be obtained to write the actual files referenced in the index. Use this measure the impact on extracting objects on overall performance' -r -F
14	14	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from checkout-exclusive" -s k -l keep-going -d 'Ignore errors and keep checking out as many files as possible, and report all errors at the end of the operation'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from checkout-exclusive" -s e -l empty-files -d 'Enable to query the object database yet write only empty files. This is useful to measure the overhead of ODB query compared to writing the bytes to disk'
12	12	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from checkout-exclusive" -s h -l help -d 'Print help'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -f -a "from-list" -d 'Create an index from a list of empty files, one per line of the input'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Validate constraints and assumptions of an index along with its integrity'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -f -a "info" -d 'Print information about the index structure'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -f -a "checkout-exclusive" -d 'Checkout the index into a directory with exclusive write access, similar to what would happen during clone'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
11	11	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from discover" -s h -l help -d 'Print help'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "commit-graph" -d 'Subcommands for interacting with commit-graphs'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "mailmap" -d 'Subcommands for interacting with mailmaps'
26	26	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "pack" -d 'Subcommands for interacting with pack files and indices'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "index" -d 'Subcommands for interacting with a worktree index, typically at .git/index'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "discover" -d 'Show information about repository discovery and when opening a repository at the current path'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify" -f -a "verify" -d 'Verify the integrity of a commit graph'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from verify" -f -a "verify" -d 'Parse all entries in the mailmap and report malformed lines or collisions'
26	26	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "index" -d 'Subcommands for interacting with pack indices (.idx)'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "multi-index" -d 'Subcommands for interacting with multi-pack indices (named "multi-pack-index")'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "create" -d 'Create a new pack with a set of objects'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "receive" -d 'Use the gix-protocol to receive a pack, emulating a clone'
33	33	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "explode" -d 'Dissolve a pack into its loose objects'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "verify" -d 'Verify the integrity of a pack, index or multi-index file'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from create" -f -a "create" -d 'create a pack index from a pack data file'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "entries" -d 'Display all entries of a multi-index as: *oid* *pack-id* *pack-offset*'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "info" -d 'Print general information about a multi-index file'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "verify" -d 'Verify a multi-index quickly without inspecting objects themselves'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "create" -d 'Create a multi-pack index from one or more pack index files, overwriting possibly existing files'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive" -f -a "from-list" -d 'Create an index from a list of empty files, one per line of the input'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive" -f -a "verify" -d 'Validate constraints and assumptions of an index along with its integrity'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive" -f -a "info" -d 'Print information about the index structure'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from free; and __fish_seen_subcommand_from help; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive" -f -a "checkout-exclusive" -d 'Checkout the index into a directory with exclusive write access, similar to what would happen during clone'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from completions" -s s -l shell -d 'The shell to generate completions for. Otherwise it\'s derived from the environment' -r -f -a "{bash	'',elvish	'',fish	'',powershell	'',zsh	''}"
10	10	--> complete -c gix -n "__fish_seen_subcommand_from completions" -s h -l help -d 'Print help'
73	73	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "archive" -d 'Subcommands for creating worktree archives'
72	72	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "clean"
64	64	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "commit-graph" -d 'Subcommands for interacting with commit-graphs'
62	62	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "odb" -d 'Interact with the object database'
63	63	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "fsck" -d 'Check for missing objects'
63	63	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "tree" -d 'Interact with tree objects'
64	64	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "commit" -d 'Interact with commit objects'
64	64	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "verify" -d 'Verify the integrity of the entire repository'
61	61	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "revision" -d 'Query and obtain information about revisions'
61	61	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "credential" -d 'A program just like `git credential`'
77	77	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "fetch" -d 'Fetch data from remotes and store it in the repository'
64	64	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "clone"
61	61	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "mailmap" -d 'Interact with the mailmap'
66	66	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "remote" -d 'Interact with the remote hosts'
62	62	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "attributes" -d 'Interact with the attribute files like .gitattributes'
62	62	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "exclude" -d 'Interact with the exclude files like .gitignore'
60	60	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "index"
61	61	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "submodule" -d 'Interact with submodules'
62	62	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "is-clean"
62	62	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "is-changed"
64	64	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "config-tree" -d 'Show which git configuration values are used or planned'
65	65	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "status" -d 'compute repository status similar to `git status`'
63	63	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "config" -d 'Print all entries in a configuration file or access other sub-commands'
60	60	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "corpus" -d 'run algorithms on a corpus of git repositories and store their results for later analysis'
61	61	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "free" -d 'Subcommands that need no git repository to run'
69	69	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "completions" -d 'Generate shell completions to stdout or a directory'
62	62	--> complete -c gix -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from archive; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from fsck; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fetch; and not __fish_seen_subcommand_from clone; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from is-clean; and not __fish_seen_subcommand_from is-changed; and not __fish_seen_subcommand_from config-tree; and not __fish_seen_subcommand_from status; and not __fish_seen_subcommand_from config; and not __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from list" -f -a "verify" -d 'Verify the integrity of a commit graph'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from list" -f -a "list" -d 'List all entries in the commit-graph as reachable by starting from `HEAD`'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats" -f -a "entries" -d 'Print all object names'
17	17	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats" -f -a "info" -d 'Provide general information about the object database'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from odb; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from stats" -f -a "stats" -d 'Count and obtain information on all, possibly duplicate, objects in the database'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info" -f -a "entries" -d 'Print entries in a given tree'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info" -f -a "info" -d 'Provide information about a tree'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from describe" -f -a "verify" -d 'Verify the signature of a commit'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from commit; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from describe" -f -a "describe" -d 'Describe the current commit or the given one using the name of the closest annotated tag in its ancestry'
21	21	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches" -f -a "list" -d 'List all commits reachable from the given rev-spec'
19	19	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches" -f -a "explain" -d 'Provide the revision specification like `@~1` to explain'
19	19	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches" -f -a "resolve" -d 'Try to resolve the given revspec and print the object names'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from revision; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from explain; and not __fish_seen_subcommand_from resolve; and not __fish_seen_subcommand_from previous-branches" -f -a "previous-branches" -d 'Return the names and hashes of all previously checked-out branches'
18	18	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject" -f -a "fill" -d 'Get the credentials fed for `url=<url>` via STDIN'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject" -f -a "approve" -d 'Approve the information piped via STDIN as obtained with last call to `fill`'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from credential; and not __fish_seen_subcommand_from fill; and not __fish_seen_subcommand_from approve; and not __fish_seen_subcommand_from reject" -f -a "reject" -d 'Try to resolve the given revspec and print the object names'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from entries" -f -a "entries" -d 'Print all entries in configured mailmaps, inform about errors as well'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map" -f -a "refs" -d 'Print all references available on the remote'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from remote; and not __fish_seen_subcommand_from refs; and not __fish_seen_subcommand_from ref-map" -f -a "ref-map" -d 'Print all references available on the remote as filtered through ref-specs'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from validate-baseline; and not __fish_seen_subcommand_from query" -f -a "validate-baseline" -d 'Run `git check-attr`  and `git check-ignore` on all files of the index or all files passed via stdin and validate that we get the same outcome when computing attributes'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from attributes; and not __fish_seen_subcommand_from validate-baseline; and not __fish_seen_subcommand_from query" -f -a "query" -d 'List all attributes of the given path-specs and display the result similar to `git check-attr`'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from exclude; and not __fish_seen_subcommand_from query" -f -a "query" -d 'Check if path-specs are excluded and print the result similar to `git check-ignore`'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from from-tree" -f -a "entries" -d 'Print all entries to standard output'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from from-tree" -f -a "from-tree" -d 'Create an index from a tree-ish'
13	13	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from submodule; and not __fish_seen_subcommand_from list" -f -a "list" -d 'Print all direct submodules to standard output'
14	14	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh" -f -a "run" -d 'Perform a corpus run on all registered repositories'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from corpus; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from refresh" -f -a "refresh" -d 'Re-read all repositories under the corpus directory, and add or update them'
26	26	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover" -f -a "commit-graph" -d 'Subcommands for interacting with commit-graphs'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover" -f -a "mailmap" -d 'Subcommands for interacting with mailmaps'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover" -f -a "pack" -d 'Subcommands for interacting with pack files and indices'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover" -f -a "index" -d 'Subcommands for interacting with a worktree index, typically at .git/index'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and not __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from discover" -f -a "discover" -d 'Show information about repository discovery and when opening a repository at the current path'
15	15	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from commit-graph; and not __fish_seen_subcommand_from verify" -f -a "verify" -d 'Verify the integrity of a commit graph'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from mailmap; and not __fish_seen_subcommand_from verify" -f -a "verify" -d 'Parse all entries in the mailmap and report malformed lines or collisions'
28	28	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "index" -d 'Subcommands for interacting with pack indices (.idx)'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "multi-index" -d 'Subcommands for interacting with multi-pack indices (named "multi-pack-index")'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "create" -d 'Create a new pack with a set of objects'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "receive" -d 'Use the gix-protocol to receive a pack, emulating a clone'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "explode" -d 'Dissolve a pack into its loose objects'
25	25	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and not __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from create; and not __fish_seen_subcommand_from receive; and not __fish_seen_subcommand_from explode; and not __fish_seen_subcommand_from verify" -f -a "verify" -d 'Verify the integrity of a pack, index or multi-index file'
16	16	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from create" -f -a "create" -d 'create a pack index from a pack data file'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "entries" -d 'Display all entries of a multi-index as: *oid* *pack-id* *pack-offset*'
23	23	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "info" -d 'Print general information about a multi-index file'
29	29	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "verify" -d 'Verify a multi-index quickly without inspecting objects themselves'
24	24	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from pack; and __fish_seen_subcommand_from multi-index; and not __fish_seen_subcommand_from entries; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from create" -f -a "create" -d 'Create a multi-pack index from one or more pack index files, overwriting possibly existing files'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive" -f -a "from-list" -d 'Create an index from a list of empty files, one per line of the input'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive" -f -a "verify" -d 'Validate constraints and assumptions of an index along with its integrity'
20	20	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive" -f -a "info" -d 'Print information about the index structure'
22	22	--> complete -c gix -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from free; and __fish_seen_subcommand_from index; and not __fish_seen_subcommand_from from-list; and not __fish_seen_subcommand_from verify; and not __fish_seen_subcommand_from info; and not __fish_seen_subcommand_from checkout-exclusive" -f -a "checkout-exclusive" -d 'Checkout the index into a directory with exclusive write access, similar to what would happen during clone'
3248	5553	-> cod init $fish_pid fish | source
18	18	--> set -g __COD_BINARY /usr/bin/cod
9	9	--> function __cod_complete_fish...
2	2	--> function __fish_cod_get_completions...
3	3	--> function __cod_postexec_fish --on-event fish_postexec...
2142	2142	--> cod api attach -- %self fish
36	36	--> complete --command timeshift --arguments '(__cod_complete_fish)'
9	9	--> complete --command tig --arguments '(__cod_complete_fish)'
7	7	--> complete --command rails --arguments '(__cod_complete_fish)'
7	7	--> complete --command cod --arguments '(__cod_complete_fish)'
8	8	--> complete --command wezterm --arguments '(__cod_complete_fish)'
7	7	--> complete --command batman --arguments '(__cod_complete_fish)'
7	7	--> complete --command fd --arguments '(__cod_complete_fish)'
6	6	--> complete --command dune --arguments '(__cod_complete_fish)'
6	6	--> complete --command modular --arguments '(__cod_complete_fish)'
6	6	--> complete --command dune --arguments '(__cod_complete_fish)'
6	6	--> complete --command auto-cpufreq --arguments '(__cod_complete_fish)'
7	7	--> complete --command gcalcli --arguments '(__cod_complete_fish)'
6	6	--> complete --command zeditor --arguments '(__cod_complete_fish)'
7	7	--> complete --command bs --arguments '(__cod_complete_fish)'
6	6	--> complete --command btm --arguments '(__cod_complete_fish)'
61	463	-> source /home/arpangreat/.opam/opam-init/init.fish >/dev/null 2>/dev/null
5	211	--> if isatty...
39	158	---> isatty
62	68	----> source /usr/share/fish/functions/isatty.fish
6	6	-----> function isatty -d "Tests if a file descriptor is a tty"...
9	9	----> set -l options h/help
10	10	----> argparse -n isatty $options -- $argv
1	5	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
0	4	----> if set -q argv[2]...
4	4	-----> set -q argv[2]
4	4	----> set -l fd
6	9	----> switch "$argv"...
3	3	-----> set fd 0
10	10	----> test -t "$fd"
37	48	---> source /home/arpangreat/.opam/opam-init/env_hook.fish > /dev/null 2> /dev/null
7	7	----> set -gx OPAMNOENVNOTICE true
4	4	----> function __opam_env_export_eval --on-event fish_prompt...
59	191	--> source /home/arpangreat/.opam/opam-init/variables.fish > /dev/null 2> /dev/null
8	8	---> set -gx OPAM_SWITCH_PREFIX '/home/arpangreat/.opam/default'
5	5	---> set -gx CAML_LD_LIBRARY_PATH '/home/arpangreat/.opam/default/lib/stublibs'
5	5	---> set -gx CAML_LD_LIBRARY_PATH '/home/arpangreat/.opam/default/lib/ocaml/stublibs:/home/arpangreat/.opam/default/lib/ocaml'
6	6	---> set -gx CAML_LD_LIBRARY_PATH '/home/arpangreat/.opam/default/lib/stublibs':"$CAML_LD_LIBRARY_PATH"
4	4	---> set -gx OCAML_TOPLEVEL_PATH '/home/arpangreat/.opam/default/lib/toplevel'
3	83	---> if [ (count $MANPATH) -gt 0 ]...
56	68	----> [ (count $MANPATH) -gt 0 ]
12	12	-----> count $MANPATH
12	12	----> set -gx MANPATH $MANPATH '/home/arpangreat/.opam/default/man'
21	21	---> set -gx PATH '/home/arpangreat/.opam/default/bin' $PATH
6	6	-> set -gx PNPM_HOME "/home/arpangreat/.local/share/pnpm"
1	22	-> if not string match -q -- $PNPM_HOME $PATH...
21	21	--> not string match -q -- $PNPM_HOME $PATH
7	547	-> if set -q KITTY_INSTALLATION_DIR...
3	3	--> set -q KITTY_INSTALLATION_DIR
4	4	--> set --global KITTY_SHELL_INTEGRATION enabled
475	513	--> source "$KITTY_INSTALLATION_DIR/shell-integration/fish/vendor_conf.d/kitty-shell-integration.fish"
1	7	---> if set -q KITTY_FISH_XDG_DATA_DIR...
6	6	----> set -q KITTY_FISH_XDG_DATA_DIR
4	4	---> status is-interactive
6	6	---> not functions -q __ksi_schedule
21	21	---> exit 0
20	20	--> set --prepend fish_complete_path "$KITTY_INSTALLATION_DIR/shell-integration/fish/vendor_completions.d"
