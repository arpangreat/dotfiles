Time	Sum	Command
15782	315565	> builtin source /usr/share/fish/config.fish
516	516	-> set -g IFS \n\ \t
112	112	-> set -qg __fish_added_user_paths
103	103	-> set -g __fish_added_user_paths
67	67	-> function __fish_default_command_not_found_handler...
31	183	-> if not status --is-interactive...
152	152	--> not status --is-interactive
115	115	-> set -l __extra_completionsdir
86	86	-> set -l __extra_functionsdir
118	118	-> set -l __extra_confdir
95	1642	-> if test -f $__fish_data_dir/__fish_build_paths.fish...
418	418	--> test -f $__fish_data_dir/__fish_build_paths.fish
1079	1129	--> source $__fish_data_dir/__fish_build_paths.fish
39	39	---> set __extra_completionsdir /usr/share/fish/vendor_completions.d
6	6	---> set __extra_functionsdir /usr/share/fish/vendor_functions.d
5	5	---> set __extra_confdir /usr/share/fish/vendor_conf.d
117	117	-> set -l xdg_data_dirs
409	4029	-> if set -q XDG_DATA_DIRS...
65	65	--> set -q XDG_DATA_DIRS
164	164	--> set --path xdg_data_dirs $XDG_DATA_DIRS
1807	3391	--> set xdg_data_dirs (string replace -r '([^/])/$' '$1' -- $xdg_data_dirs)/fish
1584	1584	---> string replace -r '([^/])/$' '$1' -- $xdg_data_dirs
193	193	-> set -g __fish_vendor_completionsdirs
97	97	-> set -g __fish_vendor_functionsdirs
84	84	-> set -g __fish_vendor_confdirs
192	2199	-> if not set -q FISH_UNIT_TESTS_RUNNING...
100	100	--> not set -q FISH_UNIT_TESTS_RUNNING
420	420	--> set __fish_vendor_completionsdirs $__fish_user_data_dir/vendor_completions.d $xdg_data_dirs/vendor_completions.d
234	234	--> set __fish_vendor_functionsdirs $__fish_user_data_dir/vendor_functions.d $xdg_data_dirs/vendor_functions.d
216	216	--> set __fish_vendor_confdirs $__fish_user_data_dir/vendor_conf.d $xdg_data_dirs/vendor_conf.d
36	695	--> if not contains -- $__extra_completionsdir $__fish_vendor_completionsdirs...
659	659	---> not contains -- $__extra_completionsdir $__fish_vendor_completionsdirs
16	190	--> if not contains -- $__extra_functionsdir $__fish_vendor_functionsdirs...
174	174	---> not contains -- $__extra_functionsdir $__fish_vendor_functionsdirs
15	152	--> if not contains -- $__extra_confdir $__fish_vendor_confdirs...
137	137	---> not contains -- $__extra_confdir $__fish_vendor_confdirs
87	547	-> if not set -q fish_function_path...
117	117	--> not set -q fish_function_path
343	343	--> set fish_function_path $__fish_config_dir/functions $__fish_sysconf_dir/functions $__fish_vendor_functionsdirs $__fish_data_dir/functions
60	579	-> if not set -q fish_complete_path...
88	88	--> not set -q fish_complete_path
431	431	--> set fish_complete_path $__fish_config_dir/completions $__fish_sysconf_dir/completions $__fish_vendor_completionsdirs $__fish_data_dir/completions $__fish_user_data_dir/generated_completions
152	152	-> function __fish_reconstruct_path -d "Update PATH when fish_user_paths changes" --on-variable fish_user_paths...
141	141	-> function fish_sigtrap_handler --on-signal TRAP --no-scope-shadowing --description "TRAP handler: debug prompt"...
80	80	-> function __fish_on_interactive --on-event fish_prompt --on-event fish_read...
2646	8963	-> __fish_set_locale
4836	4902	--> source /usr/share/fish/functions/__fish_set_locale.fish
66	66	---> function __fish_set_locale...
216	216	--> set -l LOCALE_VARS
224	224	--> set -a LOCALE_VARS LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE
148	148	--> set -a LOCALE_VARS LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS
133	133	--> set -a LOCALE_VARS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION
405	694	--> for locale_var in $LOCALE_VARS LC_ALL...
65	289	---> if set -q $locale_var...
143	143	----> set -q $locale_var
81	81	----> return 0
21	105	-> if status --is-login...
84	84	--> status --is-login
373	33287	-> __fish_reconstruct_path
126	126	--> set -l new_user_path
1792	6824	--> for path in (string split : -- $fish_user_paths)...
755	755	---> string split : -- $fish_user_paths
133	994	---> if not contains -- $path $new_user_path...
687	687	----> not contains -- $path $new_user_path
174	174	----> set -a new_user_path $path
56	318	---> if not contains -- $path $new_user_path...
139	139	----> not contains -- $path $new_user_path
123	123	----> set -a new_user_path $path
31	254	---> if not contains -- $path $new_user_path...
152	152	----> not contains -- $path $new_user_path
71	71	----> set -a new_user_path $path
50	343	---> if not contains -- $path $new_user_path...
170	170	----> not contains -- $path $new_user_path
123	123	----> set -a new_user_path $path
39	304	---> if not contains -- $path $new_user_path...
155	155	----> not contains -- $path $new_user_path
110	110	----> set -a new_user_path $path
43	288	---> if not contains -- $path $new_user_path...
146	146	----> not contains -- $path $new_user_path
99	99	----> set -a new_user_path $path
52	418	---> if not contains -- $path $new_user_path...
257	257	----> not contains -- $path $new_user_path
109	109	----> set -a new_user_path $path
42	314	---> if not contains -- $path $new_user_path...
167	167	----> not contains -- $path $new_user_path
105	105	----> set -a new_user_path $path
90	369	---> if not contains -- $path $new_user_path...
180	180	----> not contains -- $path $new_user_path
99	99	----> set -a new_user_path $path
49	431	---> if not contains -- $path $new_user_path...
253	253	----> not contains -- $path $new_user_path
129	129	----> set -a new_user_path $path
32	244	---> if not contains -- $path $new_user_path...
144	144	----> not contains -- $path $new_user_path
68	68	----> set -a new_user_path $path
31	2871	--> if test (count $new_user_path) -lt (count $fish_user_paths)...
1518	2840	---> test (count $new_user_path) -lt (count $fish_user_paths)
1166	1166	----> count $new_user_path
156	156	----> count $fish_user_paths
427	427	--> set -l local_path $PATH
116	116	--> for x in $__fish_added_user_paths...
119	119	--> set -g __fish_added_user_paths
73	22009	--> if set -q fish_user_paths...
80	80	---> set -q fish_user_paths
2068	21856	---> for x in (string split ":" -- $fish_user_paths[-1..1])...
722	722	----> string split ":" -- $fish_user_paths[-1..1]
78	1717	----> if set -l idx (contains --index -- $x $local_path)...
1012	1470	-----> set -l idx (contains --index -- $x $local_path)
458	458	------> contains --index -- $x $local_path
169	169	-----> set -e local_path[$idx]
115	115	----> set -p local_path $x
79	1488	----> if set -l idx (contains --index -- $x $local_path)...
676	1183	-----> set -l idx (contains --index -- $x $local_path)
507	507	------> contains --index -- $x $local_path
226	226	-----> set -e local_path[$idx]
137	137	----> set -p local_path $x
65	1320	----> if set -l idx (contains --index -- $x $local_path)...
780	1104	-----> set -l idx (contains --index -- $x $local_path)
324	324	------> contains --index -- $x $local_path
151	151	-----> set -e local_path[$idx]
126	126	----> set -p local_path $x
124	1422	----> if set -l idx (contains --index -- $x $local_path)...
699	1152	-----> set -l idx (contains --index -- $x $local_path)
453	453	------> contains --index -- $x $local_path
146	146	-----> set -e local_path[$idx]
107	107	----> set -p local_path $x
137	2540	----> if set -l idx (contains --index -- $x $local_path)...
1801	2111	-----> set -l idx (contains --index -- $x $local_path)
310	310	------> contains --index -- $x $local_path
292	292	-----> set -e local_path[$idx]
266	266	----> set -p local_path $x
94	1282	----> if set -l idx (contains --index -- $x $local_path)...
809	978	-----> set -l idx (contains --index -- $x $local_path)
169	169	------> contains --index -- $x $local_path
210	210	-----> set -e local_path[$idx]
150	150	----> set -p local_path $x
74	1632	----> if set -l idx (contains --index -- $x $local_path)...
888	1369	-----> set -l idx (contains --index -- $x $local_path)
481	481	------> contains --index -- $x $local_path
189	189	-----> set -e local_path[$idx]
137	137	----> set -p local_path $x
63	1313	----> if set -l idx (contains --index -- $x $local_path)...
662	1085	-----> set -l idx (contains --index -- $x $local_path)
423	423	------> contains --index -- $x $local_path
165	165	-----> set -e local_path[$idx]
310	310	----> set -p local_path $x
78	1547	----> if set -l idx (contains --index -- $x $local_path)...
913	1307	-----> set -l idx (contains --index -- $x $local_path)
394	394	------> contains --index -- $x $local_path
162	162	-----> set -e local_path[$idx]
148	148	----> set -p local_path $x
73	1416	----> if set -l idx (contains --index -- $x $local_path)...
767	1171	-----> set -l idx (contains --index -- $x $local_path)
404	404	------> contains --index -- $x $local_path
172	172	-----> set -e local_path[$idx]
127	127	----> set -p local_path $x
69	1628	----> if set -l idx (contains --index -- $x $local_path)...
863	1355	-----> set -l idx (contains --index -- $x $local_path)
492	492	------> contains --index -- $x $local_path
204	204	-----> set -e local_path[$idx]
138	138	----> set -p local_path $x
422	422	--> set -xg PATH $local_path
57	57	-> function __fish_expand_pid_args...
180	437	-> for jobbltn in bg wait disown...
106	106	--> function $jobbltn -V jobbltn...
75	75	--> function $jobbltn -V jobbltn...
76	76	--> function $jobbltn -V jobbltn...
29	29	-> function fg...
28	28	-> function kill...
113	113	-> set -l sourcelist
4030	245604	-> for file in $__fish_config_dir/conf.d/*.fish $__fish_sysconf_dir/conf.d/*.fish $__fish_vendor_confdirs/*.fish...
1132	2276	--> set -l basename (string replace -r '^.*/' '' -- $file)
1144	1144	---> string replace -r '^.*/' '' -- $file
198	198	--> contains -- $basename $sourcelist
143	143	--> set sourcelist $sourcelist $basename
359	359	--> test -f $file -a -r $file
1915	3197	--> source $file
453	453	---> contains $HOME/.local/bin $PATH
829	829	---> command -qv fig
1226	1903	--> set -l basename (string replace -r '^.*/' '' -- $file)
677	677	---> string replace -r '^.*/' '' -- $file
170	170	--> contains -- $basename $sourcelist
632	632	--> set sourcelist $sourcelist $basename
894	894	--> test -f $file -a -r $file
1916	2470	--> source $file
481	481	---> contains $HOME/.local/bin $PATH
73	73	---> command -qv fig
9867	9923	--> set -l basename (string replace -r '^.*/' '' -- $file)
56	56	---> string replace -r '^.*/' '' -- $file
211	211	--> contains -- $basename $sourcelist
165	165	--> set sourcelist $sourcelist $basename
2548	2548	--> test -f $file -a -r $file
1138	3971	--> source $file
1104	1579	---> abbr nv nvim
475	475	----> source /usr/share/fish/functions/abbr.fish
155	155	---> abbr e emacs
82	82	---> abbr h hx
181	181	---> abbr en emacs -nw
124	124	---> abbr ec emacsclient
71	71	---> abbr g git
73	73	---> abbr lg lazygit
79	79	---> abbr .. cd ../
96	96	---> abbr ... cd ../../
97	97	---> abbr .... cd ../../../
86	86	---> abbr ..... cd ../../../../
124	124	---> abbr open xdg-open
86	86	---> abbr man batman
829	1361	--> set -l basename (string replace -r '^.*/' '' -- $file)
532	532	---> string replace -r '^.*/' '' -- $file
189	189	--> contains -- $basename $sourcelist
238	238	--> set sourcelist $sourcelist $basename
357	357	--> test -f $file -a -r $file
3872	24591	--> source $file
203	1445	---> for mode in default insert...
84	957	----> if not set --query --universal fifc_keybinding...
158	158	-----> not set --query --universal fifc_keybinding
715	715	-----> bind --mode $mode \t _fifc
48	285	----> if not set --query --universal fifc_keybinding...
98	98	-----> not set --query --universal fifc_keybinding
139	139	-----> bind --mode $mode \t _fifc
21	96	---> if not set --query --universal fifc_open_keybinding...
75	75	----> not set --query --universal fifc_open_keybinding
123	123	---> set -gx _fifc_comp_count 0
100	100	---> set -gx _fifc_unordered_comp
123	123	---> set -gx _fifc_ordered_comp
265	2494	---> fifc \
    -n 'test "$fifc_group" = "directories"' \
    -s _fifc_source_directories
1940	1954	----> source /home/arpangreat/.config/fish/functions/fifc.fish
11	11	-----> function __fifc_check_flag -d "Check flag value for fifc"...
3	3	-----> function fifc -d "Add your own fish fzf completions"...
14	14	----> set -l option_spec 'n/condition=' 'p/preview=' 'o/open=' 's/source=' 'e/extract=' 'f/fzf-options=' h/help
7	7	----> set -a option_spec 'r/regex=!__fifc_check_flag' 'O/order=!__fifc_check_flag'
33	33	----> argparse --name fifc $option_spec -- $argv
2	10	----> if test "$status" != 0...
8	8	-----> test "$status" != 0
1	6	----> if test -n "$_flag_h"...
5	5	-----> test -n "$_flag_h"
2	36	----> if test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)...
34	34	-----> test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)
55	100	----> set _fifc_comp_count (math $_fifc_comp_count + 1)
45	45	-----> math $_fifc_comp_count + 1
6	6	----> set -l count $_fifc_comp_count
7	7	----> set -e "_fifc_comp_$count"
4	4	----> set -gx "_fifc_comp_$count"
6	6	----> set -a "_fifc_comp_$count" "$_flag_n"
5	5	----> set -a "_fifc_comp_$count" "$_flag_r"
5	5	----> set -a "_fifc_comp_$count" "$_flag_p"
5	5	----> set -a "_fifc_comp_$count" "$_flag_o"
8	8	----> set -a "_fifc_comp_$count" "$_flag_s"
5	5	----> set -a "_fifc_comp_$count" "$_flag_f"
5	5	----> set -a "_fifc_comp_$count" "$_flag_e"
4	13	----> if test -z "$_flag_O"...
4	4	-----> test -z "$_flag_O"
5	5	-----> set -a _fifc_unordered_comp "_fifc_comp_$count"
24	210	---> fifc \
    -n 'test "$fifc_group" = "files"' \
    -s _fifc_source_files
9	9	----> set -l option_spec 'n/condition=' 'p/preview=' 'o/open=' 's/source=' 'e/extract=' 'f/fzf-options=' h/help
6	6	----> set -a option_spec 'r/regex=!__fifc_check_flag' 'O/order=!__fifc_check_flag'
28	28	----> argparse --name fifc $option_spec -- $argv
2	7	----> if test "$status" != 0...
5	5	-----> test "$status" != 0
1	4	----> if test -n "$_flag_h"...
3	3	-----> test -n "$_flag_h"
2	26	----> if test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)...
24	24	-----> test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)
35	46	----> set _fifc_comp_count (math $_fifc_comp_count + 1)
11	11	-----> math $_fifc_comp_count + 1
5	5	----> set -l count $_fifc_comp_count
5	5	----> set -e "_fifc_comp_$count"
4	4	----> set -gx "_fifc_comp_$count"
5	5	----> set -a "_fifc_comp_$count" "$_flag_n"
4	4	----> set -a "_fifc_comp_$count" "$_flag_r"
4	4	----> set -a "_fifc_comp_$count" "$_flag_p"
4	4	----> set -a "_fifc_comp_$count" "$_flag_o"
5	5	----> set -a "_fifc_comp_$count" "$_flag_s"
5	5	----> set -a "_fifc_comp_$count" "$_flag_f"
8	8	----> set -a "_fifc_comp_$count" "$_flag_e"
3	11	----> if test -z "$_flag_O"...
4	4	-----> test -z "$_flag_O"
4	4	-----> set -a _fifc_unordered_comp "_fifc_comp_$count"
19	204	---> fifc \
    -n 'test "$fifc_group" = processes' \
    -s 'ps -ax -o pid=,command='
11	11	----> set -l option_spec 'n/condition=' 'p/preview=' 'o/open=' 's/source=' 'e/extract=' 'f/fzf-options=' h/help
6	6	----> set -a option_spec 'r/regex=!__fifc_check_flag' 'O/order=!__fifc_check_flag'
21	21	----> argparse --name fifc $option_spec -- $argv
1	7	----> if test "$status" != 0...
6	6	-----> test "$status" != 0
1	6	----> if test -n "$_flag_h"...
5	5	-----> test -n "$_flag_h"
1	24	----> if test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)...
23	23	-----> test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)
31	40	----> set _fifc_comp_count (math $_fifc_comp_count + 1)
9	9	-----> math $_fifc_comp_count + 1
7	7	----> set -l count $_fifc_comp_count
5	5	----> set -e "_fifc_comp_$count"
4	4	----> set -gx "_fifc_comp_$count"
5	5	----> set -a "_fifc_comp_$count" "$_flag_n"
5	5	----> set -a "_fifc_comp_$count" "$_flag_r"
5	5	----> set -a "_fifc_comp_$count" "$_flag_p"
5	5	----> set -a "_fifc_comp_$count" "$_flag_o"
5	5	----> set -a "_fifc_comp_$count" "$_flag_s"
4	4	----> set -a "_fifc_comp_$count" "$_flag_f"
5	5	----> set -a "_fifc_comp_$count" "$_flag_e"
9	20	----> if test -z "$_flag_O"...
3	3	-----> test -z "$_flag_O"
8	8	-----> set -a _fifc_unordered_comp "_fifc_comp_$count"
28	217	---> fifc \
    -n 'test "$fifc_group" = "options"' \
    -p _fifc_preview_opt \
    -o _fifc_open_opt
9	9	----> set -l option_spec 'n/condition=' 'p/preview=' 'o/open=' 's/source=' 'e/extract=' 'f/fzf-options=' h/help
6	6	----> set -a option_spec 'r/regex=!__fifc_check_flag' 'O/order=!__fifc_check_flag'
25	25	----> argparse --name fifc $option_spec -- $argv
1	9	----> if test "$status" != 0...
8	8	-----> test "$status" != 0
1	7	----> if test -n "$_flag_h"...
6	6	-----> test -n "$_flag_h"
1	32	----> if test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)...
31	31	-----> test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)
33	42	----> set _fifc_comp_count (math $_fifc_comp_count + 1)
9	9	-----> math $_fifc_comp_count + 1
5	5	----> set -l count $_fifc_comp_count
5	5	----> set -e "_fifc_comp_$count"
4	4	----> set -gx "_fifc_comp_$count"
5	5	----> set -a "_fifc_comp_$count" "$_flag_n"
5	5	----> set -a "_fifc_comp_$count" "$_flag_r"
5	5	----> set -a "_fifc_comp_$count" "$_flag_p"
5	5	----> set -a "_fifc_comp_$count" "$_flag_o"
5	5	----> set -a "_fifc_comp_$count" "$_flag_s"
4	4	----> set -a "_fifc_comp_$count" "$_flag_f"
5	5	----> set -a "_fifc_comp_$count" "$_flag_e"
2	11	----> if test -z "$_flag_O"...
4	4	-----> test -z "$_flag_O"
5	5	-----> set -a _fifc_unordered_comp "_fifc_comp_$count"
33	351	---> fifc \
    -n 'test \( -n "$fifc_desc" -o -z "$fifc_commandline" \); and type -q -f -- "$fifc_candidate"' \
    -r '^(?!\\w+\\h+)' \
    -p _fifc_preview_cmd \
    -o _fifc_open_cmd
9	9	----> set -l option_spec 'n/condition=' 'p/preview=' 'o/open=' 's/source=' 'e/extract=' 'f/fzf-options=' h/help
5	5	----> set -a option_spec 'r/regex=!__fifc_check_flag' 'O/order=!__fifc_check_flag'
53	152	----> argparse --name fifc $option_spec -- $argv
7	99	-----> __fifc_check_flag
9	92	------> switch $_flag_name...
40	76	-------> set -l out (string match --regex --quiet $_flag_value 2>&1 | string join '\n')
36	36	--------> string match --regex --quiet $_flag_value 2>&1 | string join '\n'
0	7	-------> if test -n "$out"...
7	7	--------> test -n "$out"
1	8	----> if test "$status" != 0...
7	7	-----> test "$status" != 0
0	5	----> if test -n "$_flag_h"...
5	5	-----> test -n "$_flag_h"
1	38	----> if test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)...
37	37	-----> test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)
31	41	----> set _fifc_comp_count (math $_fifc_comp_count + 1)
10	10	-----> math $_fifc_comp_count + 1
5	5	----> set -l count $_fifc_comp_count
5	5	----> set -e "_fifc_comp_$count"
4	4	----> set -gx "_fifc_comp_$count"
6	6	----> set -a "_fifc_comp_$count" "$_flag_n"
5	5	----> set -a "_fifc_comp_$count" "$_flag_r"
5	5	----> set -a "_fifc_comp_$count" "$_flag_p"
5	5	----> set -a "_fifc_comp_$count" "$_flag_o"
5	5	----> set -a "_fifc_comp_$count" "$_flag_s"
5	5	----> set -a "_fifc_comp_$count" "$_flag_f"
4	4	----> set -a "_fifc_comp_$count" "$_flag_e"
3	11	----> if test -z "$_flag_O"...
3	3	-----> test -z "$_flag_O"
5	5	-----> set -a _fifc_unordered_comp "_fifc_comp_$count"
205	2318	---> fifc \
    -n 'test -n "$fifc_desc" -o -z "$fifc_commandline"' \
    -r '^(functions)?\\h+' \
    -p _fifc_preview_fn \
    -o _fifc_open_fn
8	8	----> set -l option_spec 'n/condition=' 'p/preview=' 'o/open=' 's/source=' 'e/extract=' 'f/fzf-options=' h/help
5	5	----> set -a option_spec 'r/regex=!__fifc_check_flag' 'O/order=!__fifc_check_flag'
57	152	----> argparse --name fifc $option_spec -- $argv
9	95	-----> __fifc_check_flag
8	86	------> switch $_flag_name...
42	70	-------> set -l out (string match --regex --quiet $_flag_value 2>&1 | string join '\n')
28	28	--------> string match --regex --quiet $_flag_value 2>&1 | string join '\n'
1	8	-------> if test -n "$out"...
7	7	--------> test -n "$out"
0	8	----> if test "$status" != 0...
8	8	-----> test "$status" != 0
0	4	----> if test -n "$_flag_h"...
4	4	-----> test -n "$_flag_h"
1	28	----> if test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)...
27	27	-----> test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)
360	645	----> set _fifc_comp_count (math $_fifc_comp_count + 1)
285	285	-----> math $_fifc_comp_count + 1
109	109	----> set -l count $_fifc_comp_count
124	124	----> set -e "_fifc_comp_$count"
102	102	----> set -gx "_fifc_comp_$count"
218	218	----> set -a "_fifc_comp_$count" "$_flag_n"
99	99	----> set -a "_fifc_comp_$count" "$_flag_r"
84	84	----> set -a "_fifc_comp_$count" "$_flag_p"
83	83	----> set -a "_fifc_comp_$count" "$_flag_o"
86	86	----> set -a "_fifc_comp_$count" "$_flag_s"
80	80	----> set -a "_fifc_comp_$count" "$_flag_f"
78	78	----> set -a "_fifc_comp_$count" "$_flag_e"
46	200	----> if test -z "$_flag_O"...
64	64	-----> test -z "$_flag_O"
90	90	-----> set -a _fifc_unordered_comp "_fifc_comp_$count"
574	4927	---> fifc \
    -n 'test -f "$fifc_candidate"' \
    -p _fifc_preview_file \
    -o _fifc_open_file
165	165	----> set -l option_spec 'n/condition=' 'p/preview=' 'o/open=' 's/source=' 'e/extract=' 'f/fzf-options=' h/help
143	143	----> set -a option_spec 'r/regex=!__fifc_check_flag' 'O/order=!__fifc_check_flag'
606	606	----> argparse --name fifc $option_spec -- $argv
24	140	----> if test "$status" != 0...
116	116	-----> test "$status" != 0
16	97	----> if test -n "$_flag_h"...
81	81	-----> test -n "$_flag_h"
25	534	----> if test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)...
509	509	-----> test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)
765	959	----> set _fifc_comp_count (math $_fifc_comp_count + 1)
194	194	-----> math $_fifc_comp_count + 1
181	181	----> set -l count $_fifc_comp_count
116	116	----> set -e "_fifc_comp_$count"
93	93	----> set -gx "_fifc_comp_$count"
126	126	----> set -a "_fifc_comp_$count" "$_flag_n"
120	120	----> set -a "_fifc_comp_$count" "$_flag_r"
137	137	----> set -a "_fifc_comp_$count" "$_flag_p"
137	137	----> set -a "_fifc_comp_$count" "$_flag_o"
170	170	----> set -a "_fifc_comp_$count" "$_flag_s"
147	147	----> set -a "_fifc_comp_$count" "$_flag_f"
136	136	----> set -a "_fifc_comp_$count" "$_flag_e"
73	346	----> if test -z "$_flag_O"...
94	94	-----> test -z "$_flag_O"
179	179	-----> set -a _fifc_unordered_comp "_fifc_comp_$count"
617	5106	---> fifc \
    -n 'test -d "$fifc_candidate"' \
    -p _fifc_preview_dir \
    -o _fifc_open_dir
201	201	----> set -l option_spec 'n/condition=' 'p/preview=' 'o/open=' 's/source=' 'e/extract=' 'f/fzf-options=' h/help
125	125	----> set -a option_spec 'r/regex=!__fifc_check_flag' 'O/order=!__fifc_check_flag'
539	539	----> argparse --name fifc $option_spec -- $argv
22	135	----> if test "$status" != 0...
113	113	-----> test "$status" != 0
18	96	----> if test -n "$_flag_h"...
78	78	-----> test -n "$_flag_h"
28	520	----> if test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)...
492	492	-----> test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)
931	1128	----> set _fifc_comp_count (math $_fifc_comp_count + 1)
197	197	-----> math $_fifc_comp_count + 1
169	169	----> set -l count $_fifc_comp_count
126	126	----> set -e "_fifc_comp_$count"
111	111	----> set -gx "_fifc_comp_$count"
134	134	----> set -a "_fifc_comp_$count" "$_flag_n"
146	146	----> set -a "_fifc_comp_$count" "$_flag_r"
146	146	----> set -a "_fifc_comp_$count" "$_flag_p"
192	192	----> set -a "_fifc_comp_$count" "$_flag_o"
139	139	----> set -a "_fifc_comp_$count" "$_flag_s"
138	138	----> set -a "_fifc_comp_$count" "$_flag_f"
137	137	----> set -a "_fifc_comp_$count" "$_flag_e"
65	307	----> if test -z "$_flag_O"...
96	96	-----> test -z "$_flag_O"
146	146	-----> set -a _fifc_unordered_comp "_fifc_comp_$count"
481	2869	---> fifc \
    -n 'test "$fifc_group" = processes -a (ps -p (_fifc_parse_pid "$fifc_candidate") &>/dev/null)' \
    -p _fifc_preview_process \
    -o _fifc_open_process \
    -e '^\\h*([0-9]+)'
289	289	----> set -l option_spec 'n/condition=' 'p/preview=' 'o/open=' 's/source=' 'e/extract=' 'f/fzf-options=' h/help
150	150	----> set -a option_spec 'r/regex=!__fifc_check_flag' 'O/order=!__fifc_check_flag'
598	598	----> argparse --name fifc $option_spec -- $argv
2	10	----> if test "$status" != 0...
8	8	-----> test "$status" != 0
1	6	----> if test -n "$_flag_h"...
5	5	-----> test -n "$_flag_h"
2	43	----> if test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)...
41	41	-----> test \( -n "$_flag_n" -o -n "$_flag_r" \) \
            -a \( -z "$_flag_p" -a -z "$_flag_o" -a -z "$_flag_s" -a -z "$_flag_e" -a -z "$_flag_f" \)
61	81	----> set _fifc_comp_count (math $_fifc_comp_count + 1)
20	20	-----> math $_fifc_comp_count + 1
8	8	----> set -l count $_fifc_comp_count
8	8	----> set -e "_fifc_comp_$count"
5	5	----> set -gx "_fifc_comp_$count"
15	15	----> set -a "_fifc_comp_$count" "$_flag_n"
120	120	----> set -a "_fifc_comp_$count" "$_flag_r"
141	141	----> set -a "_fifc_comp_$count" "$_flag_p"
131	131	----> set -a "_fifc_comp_$count" "$_flag_o"
187	187	----> set -a "_fifc_comp_$count" "$_flag_s"
135	135	----> set -a "_fifc_comp_$count" "$_flag_f"
146	146	----> set -a "_fifc_comp_$count" "$_flag_e"
70	315	----> if test -z "$_flag_O"...
100	100	-----> test -z "$_flag_O"
145	145	-----> set -a _fifc_unordered_comp "_fifc_comp_$count"
136	136	---> function _fifc_uninstall --on-event fifc_uninstall...
945	1440	--> set -l basename (string replace -r '^.*/' '' -- $file)
495	495	---> string replace -r '^.*/' '' -- $file
206	206	--> contains -- $basename $sourcelist
1609	1609	--> set sourcelist $sourcelist $basename
382	382	--> test -f $file -a -r $file
8726	169473	--> source $file
3127	18949	---> set -l install_dir (dirname (status dirname))
15558	15822	----> dirname (status dirname)
264	264	-----> status dirname
244	244	---> set -x FORGIT_INSTALL_DIR "$install_dir/conf.d"
2519	2519	---> set -x FORGIT "$FORGIT_INSTALL_DIR/bin/git-forgit"
30	332	---> if not test -e "$FORGIT"...
302	302	----> not test -e "$FORGIT"
52	52	---> function forgit::warn...
157	157	---> set unexported_vars 0
39361	105933	---> set | awk -F ' ' '{ print $1 }' | grep FORGIT_ | while read var
    if not set -x | grep -q "^$var\b"
        if test $unexported_vars = 0
            forgit::warn "Config options have to be exported in future versions of forgit."
            forgit::warn "Please update your config accordingly:"
        end
        forgit::warn "  set -x $var \"$$var\""
        set unexported_vars (math $unexported_vars + 1)
        set -x $var $$var
    end
end
2041	16493	----> source /usr/share/fish/functions/grep.fish
247	14452	-----> if echo | command grep --color=auto "" >/dev/null 2>&1...
14122	14122	------> echo | command grep --color=auto "" >/dev/null 2>&1
83	83	------> function grep...
35436	35436	----> command grep --color=auto $argv
486	486	----> read var
42	13954	----> if not set -x | grep -q "^$var\b"...
6599	13912	-----> not set -x | grep -q "^$var\b"
7313	7313	------> command grep --color=auto $argv
203	203	----> read var
1059	13938	---> alias git-forgit "$FORGIT"
4878	4897	----> source /usr/share/fish/functions/alias.fish
19	19	-----> function alias --description 'Creates a function wrapping a command'...
16	16	----> set -l options h/help s/save
35	35	----> argparse -n alias --max-args=2 $options -- $argv
1	11	----> if set -q _flag_help...
10	10	-----> set -q _flag_help
10	10	----> set -l name
8	8	----> set -l body
6	6	----> set -l prefix
14	48	----> if not set -q argv[1]...
9	9	-----> not set -q argv[1]
7	7	-----> not set -q argv[2]
10	10	-----> set name $argv[1]
8	8	-----> set body $argv[2]
18	114	----> if test -z "$name"...
12	12	-----> test -z "$name"
84	84	-----> test -z "$body"
1503	1503	----> printf '%s\n' $body | read -l --list words
177	177	----> set -l first_word $words[1]
121	121	----> set -l last_word $words[-1]
22	159	----> if test $first_word = $name...
137	137	-----> test $first_word = $name
2041	2297	----> set -l cmd_string (string escape -- "alias $argv")
256	256	-----> string escape -- "alias $argv"
109	109	----> set -l wraps
117	1686	----> if test $first_word != $name...
160	160	-----> test $first_word != $name
126	126	-----> test $last_word != $name
1024	1283	-----> set wraps --wraps (string escape -- $body)
259	259	------> string escape -- $body
1398	1552	----> echo "function $name $wraps --description $cmd_string; $prefix $body \$argv
        end" | source
154	154	-----> function git-forgit --wraps /home/arpangreat/.config/fish/conf.d/bin/git-forgit --description 'alias git-forgit /home/arpangreat/.config/fish/conf.d/bin/git-forgit'...
24	130	----> if set -q _flag_save...
106	106	-----> set -q _flag_save
446	18623	---> if test -z "$FORGIT_NO_ALIASES"...
133	133	----> test -z "$FORGIT_NO_ALIASES"
1214	1478	----> abbr -a -- (string collect $forgit_add; or string collect "ga") git-forgit add
156	156	-----> string collect $forgit_add
108	108	-----> string collect "ga"
947	1180	----> abbr -a -- (string collect $forgit_reset_head; or string collect "grh") git-forgit reset_head
132	132	-----> string collect $forgit_reset_head
101	101	-----> string collect "grh"
725	1007	----> abbr -a -- (string collect $forgit_log; or string collect "glo") git-forgit log
194	194	-----> string collect $forgit_log
88	88	-----> string collect "glo"
831	1073	----> abbr -a -- (string collect $forgit_reflog; or string collect "grl") git-forgit reflog
143	143	-----> string collect $forgit_reflog
99	99	-----> string collect "grl"
47	59	----> abbr -a -- (string collect $forgit_diff; or string collect "gd") git-forgit diff
7	7	-----> string collect $forgit_diff
5	5	-----> string collect "gd"
78	90	----> abbr -a -- (string collect $forgit_ignore; or string collect "gi") git-forgit ignore
8	8	-----> string collect $forgit_ignore
4	4	-----> string collect "gi"
54	74	----> abbr -a -- (string collect $forgit_checkout_file; or string collect "gcf") git-forgit checkout_file
14	14	-----> string collect $forgit_checkout_file
6	6	-----> string collect "gcf"
265	277	----> abbr -a -- (string collect $forgit_checkout_branch; or string collect "gcb") git-forgit checkout_branch
7	7	-----> string collect $forgit_checkout_branch
5	5	-----> string collect "gcb"
605	769	----> abbr -a -- (string collect $forgit_branch_delete; or string collect "gbd") git-forgit branch_delete
96	96	-----> string collect $forgit_branch_delete
68	68	-----> string collect "gbd"
1107	1321	----> abbr -a -- (string collect $forgit_clean; or string collect "gclean") git-forgit clean
117	117	-----> string collect $forgit_clean
97	97	-----> string collect "gclean"
1147	1462	----> abbr -a -- (string collect $forgit_stash_show; or string collect "gss") git-forgit stash_show
197	197	-----> string collect $forgit_stash_show
118	118	-----> string collect "gss"
1000	1235	----> abbr -a -- (string collect $forgit_stash_push; or string collect "gsp") git-forgit stash_push
140	140	-----> string collect $forgit_stash_push
95	95	-----> string collect "gsp"
1975	2265	----> abbr -a -- (string collect $forgit_cherry_pick; or string collect "gcp") git-forgit cherry_pick_from_branch
192	192	-----> string collect $forgit_cherry_pick
98	98	-----> string collect "gcp"
687	959	----> abbr -a -- (string collect $forgit_rebase; or string collect "grb") git-forgit rebase
123	123	-----> string collect $forgit_rebase
149	149	-----> string collect "grb"
871	1129	----> abbr -a -- (string collect $forgit_fixup; or string collect "gfu") git-forgit fixup
167	167	-----> string collect $forgit_fixup
91	91	-----> string collect "gfu"
2193	2413	----> abbr -a -- (string collect $forgit_checkout_commit; or string collect "gco") git-forgit checkout_commit
130	130	-----> string collect $forgit_checkout_commit
90	90	-----> string collect "gco"
870	1117	----> abbr -a -- (string collect $forgit_revert_commit; or string collect "grc") git-forgit revert_commit
151	151	-----> string collect $forgit_revert_commit
96	96	-----> string collect "grc"
55	70	----> abbr -a -- (string collect $forgit_blame; or string collect "gbl") git-forgit blame
9	9	-----> string collect $forgit_blame
6	6	-----> string collect "gbl"
53	66	----> abbr -a -- (string collect $forgit_checkout_tag; or string collect "gct") git-forgit checkout_tag
8	8	-----> string collect $forgit_checkout_tag
5	5	-----> string collect "gct"
113	164	--> set -l basename (string replace -r '^.*/' '' -- $file)
51	51	---> string replace -r '^.*/' '' -- $file
234	234	--> contains -- $basename $sourcelist
576	576	--> set sourcelist $sourcelist $basename
657	657	--> test -f $file -a -r $file
2495	3732	--> source $file
107	107	---> function _plugin-bang-bang_key_bindings --on-variable fish_key_bindings...
60	60	---> function _plugin-bang-bang_uninstall --on-event plugin-bang-bang_uninstall...
241	1070	---> _plugin-bang-bang_key_bindings
185	185	----> bind --erase !
116	116	----> bind --erase '$'
271	528	----> switch "$fish_key_bindings"...
130	130	-----> bind --mode insert ! __history_previous_command
127	127	-----> bind --mode insert '$' __history_previous_command_arguments
1366	1750	--> set -l basename (string replace -r '^.*/' '' -- $file)
384	384	---> string replace -r '^.*/' '' -- $file
330	330	--> contains -- $basename $sourcelist
245	245	--> set sourcelist $sourcelist $basename
466	466	--> test -f $file -a -r $file
2541	4514	--> source $file
117	117	---> status is-interactive
99	99	---> function _puffer_fish_key_bindings --on-variable fish_key_bindings...
271	1441	---> _puffer_fish_key_bindings
135	135	----> set -l modes
142	429	----> if test "$fish_key_bindings" = fish_default_key_bindings...
171	171	-----> test "$fish_key_bindings" = fish_default_key_bindings
116	116	-----> set modes insert default
187	187	----> bind --mode $modes[1] . _puffer_fish_expand_dots
117	117	----> bind --mode $modes[1] ! _puffer_fish_expand_bang
147	147	----> bind --mode $modes[1] '$' _puffer_fish_expand_lastarg
155	155	----> bind --mode $modes[2] --erase . ! '$'
171	171	---> set -l uninstall_event puffer_fish_key_bindings_uninstall
145	145	---> function _$uninstall_event --on-event $uninstall_event...
167	167	> builtin source /etc/fish/config.fish
1683	1085270	> builtin source /home/arpangreat/.config/fish/config.fish
49829	90036	-> starship init fish | source
-2774	40207	--> source (/usr/bin/starship init fish --print-full-init | psub)
3605	28912	---> /usr/bin/starship init fish --print-full-init | psub
796	1047	----> source /usr/share/fish/functions/psub.fish
251	251	-----> function psub --description "Read from stdin into a file and output the filename. Remove the file when the command that called psub exits."...
313	313	----> set -l options -x 'f,F' -x 'F,s' h/help f/file F/fifo 's/suffix=' T-testing
537	537	----> argparse -n psub --max-args=0 $options -- $argv
29	124	----> if set -q _flag_help...
95	95	-----> set -q _flag_help
98	98	----> set -l dirname
78	78	----> set -l filename
68	68	----> set -l funcname
19	97	----> if not status --is-command-substitution...
78	78	-----> not status --is-command-substitution
95	95	----> set -l tmpdir /tmp
58	58	----> set -q TMPDIR
204	17793	----> if set -q _flag_fifo...
2183	2183	-----> set -q _flag_fifo
141	141	-----> test -z "$_flag_suffix"
524	6681	-----> set filename (mktemp $tmpdir/.psub.XXXXXXXXXX)
6157	6157	------> mktemp $tmpdir/.psub.XXXXXXXXXX
8584	8584	-----> command cat >$filename
303	303	----> echo $filename
20	115	----> if set -q _flag_testing...
95	95	-----> set -q _flag_testing
84	4353	----> while true
...
506	506	-----> true
1732	2968	-----> set funcname __fish_psub_(random)
1236	1236	------> random
55	795	-----> if not functions $funcname >/dev/null 2>/dev/null...
725	725	------> not functions $funcname >/dev/null 2>/dev/null
15	15	------> break
228	228	----> function $funcname --on-job-exit caller --inherit-variable filename --inherit-variable dirname --inherit-variable funcname...
55	55	---> function fish_prompt...
30	30	---> function fish_right_prompt...
188	188	---> set -g VIRTUAL_ENV_DISABLE_PROMPT 1
87	87	---> builtin functions -e fish_mode_prompt
302	302	---> set -gx STARSHIP_SHELL "fish"
68	68	---> function reset-transient --on-event fish_postexec...
28	28	---> function transient_execute...
70	70	---> function enable_transience --description 'enable transient prompt keybindings'...
66	66	---> function disable_transience --description 'remove transient prompt keybindings'...
1059	4694	---> set -gx STARSHIP_SESSION_KEY (string sub -s1 -l16 (random)(random)(random)(random)(random)0000000000000000)
2901	3635	----> string sub -s1 -l16 (random)(random)(random)(random)(random)0000000000000000
163	163	-----> random
211	211	-----> random
102	102	-----> random
111	111	-----> random
147	147	-----> random
322	8481	---> __fish_psub_223 JOB_EXIT 0 0
7707	7707	----> command rm $filename
17	272	----> if test -n "$dirname"...
255	255	-----> test -n "$dirname"
180	180	----> functions -e $funcname
52	52	-> function fish_greeting...
95	95	-> function fish_hybrid_key_bindings --description \
    "Vi-style bindings that inherit emacs-style bindings in all modes"...
603	2907	-> set -g fish_key_bindings fish_hybrid_key_bindings
208	1032	--> _plugin-bang-bang_key_bindings VARIABLE SET fish_key_bindings
285	285	---> bind --erase !
99	99	---> bind --erase '$'
227	440	---> switch "$fish_key_bindings"...
115	115	----> bind --mode insert ! __history_previous_command
98	98	----> bind --mode insert '$' __history_previous_command_arguments
247	1272	--> _puffer_fish_key_bindings VARIABLE SET fish_key_bindings
117	117	---> set -l modes
66	330	---> if test "$fish_key_bindings" = fish_default_key_bindings...
158	158	----> test "$fish_key_bindings" = fish_default_key_bindings
106	106	----> set modes insert default
157	157	---> bind --mode $modes[1] . _puffer_fish_expand_dots
111	111	---> bind --mode $modes[1] ! _puffer_fish_expand_bang
167	167	---> bind --mode $modes[1] '$' _puffer_fish_expand_lastarg
143	143	---> bind --mode $modes[2] --erase . ! '$'
42	42	-> function ya...
31872	37187	-> fzf --fish | source
230	230	--> status is-interactive
52	52	--> function fzf_key_bindings...
595	5033	--> fzf_key_bindings
35	35	---> function __fzf_defaults...
96	96	---> function fzf-file-widget -d "List files and folders"...
153	153	---> function fzf-history-widget -d "Show command history"...
63	63	---> function fzf-cd-widget -d "Change directory"...
29	29	---> function __fzfcmd...
194	194	---> bind \cr fzf-history-widget
162	380	---> if not set -q FZF_CTRL_T_COMMAND...
107	107	----> not set -q FZF_CTRL_T_COMMAND
111	111	----> bind \ct fzf-file-widget
57	371	---> if not set -q FZF_ALT_C_COMMAND...
71	71	----> not set -q FZF_ALT_C_COMMAND
243	243	----> bind \ec fzf-cd-widget
209	2874	---> if bind -M insert >/dev/null 2>&1...
1632	1632	----> bind -M insert >/dev/null 2>&1
380	380	----> bind -M insert \cr fzf-history-widget
77	357	----> if not set -q FZF_CTRL_T_COMMAND...
152	152	-----> not set -q FZF_CTRL_T_COMMAND
128	128	-----> bind -M insert \ct fzf-file-widget
57	296	----> if not set -q FZF_ALT_C_COMMAND...
73	73	-----> not set -q FZF_ALT_C_COMMAND
166	166	-----> bind -M insert \ec fzf-cd-widget
115	115	---> function __fzf_parse_commandline -d 'Parse the current command line token and return split of existing filepath, fzf query, and optional -option= prefix'...
128	128	---> function __fzf_get_dir -d 'Find the longest existing filepath from input string'...
152	152	-> set fish_vi_force_cursor
224	224	-> set fish_cursor_default block
98	98	-> set fish_cursor_insert line
102	102	-> set fish_cursor_replace_one underscore
86	86	-> set fish_cursor_visual block
45	203	-> if status --is-interactive...
81	81	--> status --is-interactive
77	77	--> not set -q TMUX
104	104	-> set -gx EDITOR nvim
113	113	-> set -gx MANPAGER "sh -c 'col -bx | bat -l man'"
152	152	-> set -g DENO_INSTALL "/home/arpangreat/.deno"
932	35575	-> fish_add_path $DENO_INSTALL/bin:$PATH
4754	4862	--> source /usr/share/fish/functions/fish_add_path.fish
108	108	---> function fish_add_path --description "Add paths to the PATH"...
70	70	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
4	17	--> if set -q _flag_help...
13	13	---> set -q _flag_help
21	21	--> set -l scope $_flag_global $_flag_universal
3	17	--> if not set -q scope[1]...
8	8	---> not set -q scope[1]
6	6	---> not set -q fish_user_paths
8	8	--> set -l var fish_user_paths
7	7	--> set -q _flag_path
13	13	--> set -l mode $_flag_prepend $_flag_append
4	4	--> set -q mode[1]
6	6	--> set mode -p
7	7	--> set -l newpaths
5	5	--> set -l indexes
1376	28694	--> for path in $argv...
898	1477	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
579	579	----> builtin realpath -s -- $path 2>/dev/null
89	611	---> if not test -d "$p"...
348	348	----> not test -d "$p"
26	120	----> if set -q _flag_verbose...
94	94	-----> set -q _flag_verbose
54	54	----> continue
925	1866	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
941	941	----> builtin realpath -s -- $path 2>/dev/null
75	408	---> if not test -d "$p"...
188	188	----> not test -d "$p"
21	100	----> if set -q _flag_verbose...
79	79	-----> set -q _flag_verbose
45	45	----> continue
1013	1373	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
360	360	----> builtin realpath -s -- $path 2>/dev/null
61	351	---> if not test -d "$p"...
168	168	----> not test -d "$p"
22	85	----> if set -q _flag_verbose...
63	63	-----> set -q _flag_verbose
37	37	----> continue
823	1318	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
495	495	----> builtin realpath -s -- $path 2>/dev/null
75	491	---> if not test -d "$p"...
277	277	----> not test -d "$p"
22	97	----> if set -q _flag_verbose...
75	75	-----> set -q _flag_verbose
42	42	----> continue
746	1188	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
442	442	----> builtin realpath -s -- $path 2>/dev/null
68	499	---> if not test -d "$p"...
187	187	----> not test -d "$p"
24	206	----> if set -q _flag_verbose...
182	182	-----> set -q _flag_verbose
38	38	----> continue
960	1371	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
411	411	----> builtin realpath -s -- $path 2>/dev/null
72	532	---> if not test -d "$p"...
196	196	----> not test -d "$p"
19	94	----> if set -q _flag_verbose...
75	75	-----> set -q _flag_verbose
170	170	----> continue
523	924	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
401	401	----> builtin realpath -s -- $path 2>/dev/null
40	218	---> if not test -d "$p"...
22	22	----> not test -d "$p"
23	109	----> if set -q _flag_verbose...
86	86	-----> set -q _flag_verbose
47	47	----> continue
891	1486	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
595	595	----> builtin realpath -s -- $path 2>/dev/null
84	515	---> if not test -d "$p"...
265	265	----> not test -d "$p"
25	117	----> if set -q _flag_verbose...
92	92	-----> set -q _flag_verbose
49	49	----> continue
1869	2313	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
444	444	----> builtin realpath -s -- $path 2>/dev/null
157	669	---> if not test -d "$p"...
333	333	----> not test -d "$p"
25	131	----> if set -q _flag_verbose...
106	106	-----> set -q _flag_verbose
48	48	----> continue
1175	1706	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
531	531	----> builtin realpath -s -- $path 2>/dev/null
68	409	---> if not test -d "$p"...
199	199	----> not test -d "$p"
24	98	----> if set -q _flag_verbose...
74	74	-----> set -q _flag_verbose
44	44	----> continue
780	1226	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
446	446	----> builtin realpath -s -- $path 2>/dev/null
78	507	---> if not test -d "$p"...
275	275	----> not test -d "$p"
24	110	----> if set -q _flag_verbose...
86	86	-----> set -q _flag_verbose
44	44	----> continue
778	1238	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
460	460	----> builtin realpath -s -- $path 2>/dev/null
86	563	---> if not test -d "$p"...
319	319	----> not test -d "$p"
22	113	----> if set -q _flag_verbose...
91	91	-----> set -q _flag_verbose
45	45	----> continue
1433	1942	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
509	509	----> builtin realpath -s -- $path 2>/dev/null
11	159	---> if not test -d "$p"...
140	140	----> not test -d "$p"
1	6	----> if set -q _flag_verbose...
5	5	-----> set -q _flag_verbose
2	2	----> continue
62	89	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
27	27	----> builtin realpath -s -- $path 2>/dev/null
52	115	---> if not test -d "$p"...
11	11	----> not test -d "$p"
9	14	----> if set -q _flag_verbose...
5	5	-----> set -q _flag_verbose
38	38	----> continue
928	1387	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
459	459	----> builtin realpath -s -- $path 2>/dev/null
71	367	---> if not test -d "$p"...
163	163	----> not test -d "$p"
19	92	----> if set -q _flag_verbose...
73	73	-----> set -q _flag_verbose
41	41	----> continue
331	331	--> set -l newvar $$var
24	144	--> if set -q _flag_move...
120	120	---> set -q _flag_move
165	165	--> set $mode newvar $newpaths
99	272	--> if set -q newpaths[1]...
67	67	---> set -q newpaths[1]
51	51	---> set -q indexes[1]
55	55	---> return 1
101	101	-> set -g JAVA_HOME /usr/lib/jvm/default
134	134	-> set -g GOPATH $HOME/go
271	271	-> set -g LLVM_ROOT $HOME/llvm-project
96	96	-> set -g CHROME_EXECUTABLE /usr/bin/brave
88	88	-> set -g ANDROID_HOME /home/arpangreat/Android/Sdk
102	102	-> set -g BUN_INSTALL "/home/arpangreat/.bun"
80	80	-> set -g SFML_INCLUDE_DIR /usr/include/SFML/
82	82	-> set -g SFML_LIBS_DIR /usr/lib/SFML/
120	120	-> set -g LD_LIBRARY_PATH /usr/lib/SFML/
449	61228	-> set -Ua fish_user_paths /home/arpangreat/.rye/env
243	60779	--> __fish_reconstruct_path VARIABLE SET fish_user_paths
8670	8670	---> set -l new_user_path
3143	12230	---> for path in (string split : -- $fish_user_paths)...
336	336	----> string split : -- $fish_user_paths
77	467	----> if not contains -- $path $new_user_path...
227	227	-----> not contains -- $path $new_user_path
163	163	-----> set -a new_user_path $path
80	2584	----> if not contains -- $path $new_user_path...
142	142	-----> not contains -- $path $new_user_path
2362	2362	-----> set -a new_user_path $path
66	489	----> if not contains -- $path $new_user_path...
259	259	-----> not contains -- $path $new_user_path
164	164	-----> set -a new_user_path $path
106	1517	----> if not contains -- $path $new_user_path...
1181	1181	-----> not contains -- $path $new_user_path
230	230	-----> set -a new_user_path $path
69	474	----> if not contains -- $path $new_user_path...
247	247	-----> not contains -- $path $new_user_path
158	158	-----> set -a new_user_path $path
70	494	----> if not contains -- $path $new_user_path...
270	270	-----> not contains -- $path $new_user_path
154	154	-----> set -a new_user_path $path
61	433	----> if not contains -- $path $new_user_path...
222	222	-----> not contains -- $path $new_user_path
150	150	-----> set -a new_user_path $path
65	492	----> if not contains -- $path $new_user_path...
279	279	-----> not contains -- $path $new_user_path
148	148	-----> set -a new_user_path $path
65	452	----> if not contains -- $path $new_user_path...
236	236	-----> not contains -- $path $new_user_path
151	151	-----> set -a new_user_path $path
63	535	----> if not contains -- $path $new_user_path...
316	316	-----> not contains -- $path $new_user_path
156	156	-----> set -a new_user_path $path
110	519	----> if not contains -- $path $new_user_path...
255	255	-----> not contains -- $path $new_user_path
154	154	-----> set -a new_user_path $path
29	295	----> if not contains -- $path $new_user_path...
266	266	-----> not contains -- $path $new_user_path
57	39636	---> if test (count $new_user_path) -lt (count $fish_user_paths)...
597	1085	----> test (count $new_user_path) -lt (count $fish_user_paths)
467	467	-----> count $new_user_path
21	21	-----> count $fish_user_paths
126	38381	----> set fish_user_paths $new_user_path
641	38255	-----> __fish_reconstruct_path VARIABLE SET fish_user_paths
8877	8877	------> set -l new_user_path
1649	4194	------> for path in (string split : -- $fish_user_paths)...
769	769	-------> string split : -- $fish_user_paths
78	438	-------> if not contains -- $path $new_user_path...
201	201	--------> not contains -- $path $new_user_path
159	159	--------> set -a new_user_path $path
64	318	-------> if not contains -- $path $new_user_path...
126	126	--------> not contains -- $path $new_user_path
128	128	--------> set -a new_user_path $path
57	389	-------> if not contains -- $path $new_user_path...
198	198	--------> not contains -- $path $new_user_path
134	134	--------> set -a new_user_path $path
54	334	-------> if not contains -- $path $new_user_path...
153	153	--------> not contains -- $path $new_user_path
127	127	--------> set -a new_user_path $path
5	143	-------> if not contains -- $path $new_user_path...
131	131	--------> not contains -- $path $new_user_path
7	7	--------> set -a new_user_path $path
3	21	-------> if not contains -- $path $new_user_path...
10	10	--------> not contains -- $path $new_user_path
8	8	--------> set -a new_user_path $path
3	21	-------> if not contains -- $path $new_user_path...
11	11	--------> not contains -- $path $new_user_path
7	7	--------> set -a new_user_path $path
3	23	-------> if not contains -- $path $new_user_path...
12	12	--------> not contains -- $path $new_user_path
8	8	--------> set -a new_user_path $path
4	27	-------> if not contains -- $path $new_user_path...
16	16	--------> not contains -- $path $new_user_path
7	7	--------> set -a new_user_path $path
4	32	-------> if not contains -- $path $new_user_path...
19	19	--------> not contains -- $path $new_user_path
9	9	--------> set -a new_user_path $path
7	30	-------> if not contains -- $path $new_user_path...
15	15	--------> not contains -- $path $new_user_path
8	8	--------> set -a new_user_path $path
31	2520	------> if test (count $new_user_path) -lt (count $fish_user_paths)...
1693	2489	-------> test (count $new_user_path) -lt (count $fish_user_paths)
468	468	--------> count $new_user_path
328	328	--------> count $fish_user_paths
366	366	------> set -l local_path $PATH
154	154	------> for x in $__fish_added_user_paths...
121	121	------> set -g __fish_added_user_paths
78	20941	------> if set -q fish_user_paths...
75	75	-------> set -q fish_user_paths
1919	20788	-------> for x in (string split ":" -- $fish_user_paths[-1..1])...
737	737	--------> string split ":" -- $fish_user_paths[-1..1]
72	1778	--------> if set -l idx (contains --index -- $x $local_path)...
1023	1521	---------> set -l idx (contains --index -- $x $local_path)
498	498	----------> contains --index -- $x $local_path
185	185	---------> set -e local_path[$idx]
137	137	--------> set -p local_path $x
66	1574	--------> if set -l idx (contains --index -- $x $local_path)...
880	1314	---------> set -l idx (contains --index -- $x $local_path)
434	434	----------> contains --index -- $x $local_path
194	194	---------> set -e local_path[$idx]
122	122	--------> set -p local_path $x
63	1340	--------> if set -l idx (contains --index -- $x $local_path)...
797	1117	---------> set -l idx (contains --index -- $x $local_path)
320	320	----------> contains --index -- $x $local_path
160	160	---------> set -e local_path[$idx]
126	126	--------> set -p local_path $x
118	1395	--------> if set -l idx (contains --index -- $x $local_path)...
784	1141	---------> set -l idx (contains --index -- $x $local_path)
357	357	----------> contains --index -- $x $local_path
136	136	---------> set -e local_path[$idx]
109	109	--------> set -p local_path $x
34	976	--------> if set -l idx (contains --index -- $x $local_path)...
593	932	---------> set -l idx (contains --index -- $x $local_path)
339	339	----------> contains --index -- $x $local_path
10	10	---------> set -e local_path[$idx]
7	7	--------> set -p local_path $x
5	100	--------> if set -l idx (contains --index -- $x $local_path)...
63	86	---------> set -l idx (contains --index -- $x $local_path)
23	23	----------> contains --index -- $x $local_path
9	9	---------> set -e local_path[$idx]
8	8	--------> set -p local_path $x
120	2750	--------> if set -l idx (contains --index -- $x $local_path)...
2293	2314	---------> set -l idx (contains --index -- $x $local_path)
21	21	----------> contains --index -- $x $local_path
316	316	---------> set -e local_path[$idx]
186	186	--------> set -p local_path $x
81	2314	--------> if set -l idx (contains --index -- $x $local_path)...
1579	2041	---------> set -l idx (contains --index -- $x $local_path)
462	462	----------> contains --index -- $x $local_path
192	192	---------> set -e local_path[$idx]
127	127	--------> set -p local_path $x
75	1496	--------> if set -l idx (contains --index -- $x $local_path)...
909	1248	---------> set -l idx (contains --index -- $x $local_path)
339	339	----------> contains --index -- $x $local_path
173	173	---------> set -e local_path[$idx]
141	141	--------> set -p local_path $x
79	1528	--------> if set -l idx (contains --index -- $x $local_path)...
788	1222	---------> set -l idx (contains --index -- $x $local_path)
434	434	----------> contains --index -- $x $local_path
227	227	---------> set -e local_path[$idx]
132	132	--------> set -p local_path $x
107	1582	--------> if set -l idx (contains --index -- $x $local_path)...
877	1298	---------> set -l idx (contains --index -- $x $local_path)
421	421	----------> contains --index -- $x $local_path
177	177	---------> set -e local_path[$idx]
204	204	--------> set -p local_path $x
441	441	------> set -xg PATH $local_path
113	113	----> return
142	142	-> set -g BROWSER /usr/bin/zen-browser
157	157	-> set -x DEBUGINFOD_URLS "https://debuginfod.archlinux.org"
469	3616	-> fish_add_path $GOPATH/go/bin
573	573	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
27	130	--> if set -q _flag_help...
103	103	---> set -q _flag_help
180	180	--> set -l scope $_flag_global $_flag_universal
4	61	--> if not set -q scope[1]...
52	52	---> not set -q scope[1]
5	5	---> not set -q fish_user_paths
7	7	--> set -l var fish_user_paths
5	5	--> set -q _flag_path
11	11	--> set -l mode $_flag_prepend $_flag_append
4	4	--> set -q mode[1]
5	5	--> set mode -p
5	5	--> set -l newpaths
5	5	--> set -l indexes
96	1037	--> for path in $argv...
404	449	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
45	45	----> builtin realpath -s -- $path 2>/dev/null
92	492	---> if not test -d "$p"...
228	228	----> not test -d "$p"
24	114	----> if set -q _flag_verbose...
90	90	-----> set -q _flag_verbose
58	58	----> continue
468	468	--> set -l newvar $$var
23	105	--> if set -q _flag_move...
82	82	---> set -q _flag_move
175	175	--> set $mode newvar $newpaths
119	376	--> if set -q newpaths[1]...
77	77	---> set -q newpaths[1]
59	59	---> set -q indexes[1]
121	121	---> return 1
502	6776	-> fish_add_path /usr/local/go/bin/
428	428	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
24	108	--> if set -q _flag_help...
84	84	---> set -q _flag_help
261	261	--> set -l scope $_flag_global $_flag_universal
47	185	--> if not set -q scope[1]...
73	73	---> not set -q scope[1]
65	65	---> not set -q fish_user_paths
101	101	--> set -l var fish_user_paths
65	65	--> set -q _flag_path
154	154	--> set -l mode $_flag_prepend $_flag_append
67	67	--> set -q mode[1]
92	92	--> set mode -p
139	139	--> set -l newpaths
87	87	--> set -l indexes
248	3658	--> for path in $argv...
993	1512	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
519	519	----> builtin realpath -s -- $path 2>/dev/null
31	313	---> if not test -d "$p"...
282	282	----> not test -d "$p"
77	1585	---> if set -l ind (contains -i -- $p $$var)...
930	1386	----> set -l ind (contains -i -- $p $$var)
456	456	-----> contains -i -- $p $$var
29	122	----> if set -q _flag_move...
93	93	-----> set -q _flag_move
366	366	--> set -l newvar $$var
23	97	--> if set -q _flag_move...
74	74	---> set -q _flag_move
165	165	--> set $mode newvar $newpaths
103	301	--> if set -q newpaths[1]...
75	75	---> set -q newpaths[1]
62	62	---> set -q indexes[1]
61	61	---> return 1
359	4244	-> fish_add_path $HOME/.cargo/env
366	366	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
19	80	--> if set -q _flag_help...
61	61	---> set -q _flag_help
118	118	--> set -l scope $_flag_global $_flag_universal
31	220	--> if not set -q scope[1]...
70	70	---> not set -q scope[1]
119	119	---> not set -q fish_user_paths
79	79	--> set -l var fish_user_paths
50	50	--> set -q _flag_path
117	117	--> set -l mode $_flag_prepend $_flag_append
51	51	--> set -q mode[1]
68	68	--> set mode -p
66	66	--> set -l newpaths
64	64	--> set -l indexes
140	2568	--> for path in $argv...
1867	2398	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
531	531	----> builtin realpath -s -- $path 2>/dev/null
3	30	---> if not test -d "$p"...
18	18	----> not test -d "$p"
2	6	----> if set -q _flag_verbose...
4	4	-----> set -q _flag_verbose
3	3	----> continue
15	15	--> set -l newvar $$var
0	3	--> if set -q _flag_move...
3	3	---> set -q _flag_move
6	6	--> set $mode newvar $newpaths
5	14	--> if set -q newpaths[1]...
3	3	---> set -q newpaths[1]
2	2	---> set -q indexes[1]
4	4	---> return 1
154	3974	-> fish_add_path $HOME/.cargo/bin
24	24	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	5	--> if set -q _flag_help...
4	4	---> set -q _flag_help
8	8	--> set -l scope $_flag_global $_flag_universal
2	8	--> if not set -q scope[1]...
3	3	---> not set -q scope[1]
3	3	---> not set -q fish_user_paths
5	5	--> set -l var fish_user_paths
4	4	--> set -q _flag_path
6	6	--> set -l mode $_flag_prepend $_flag_append
3	3	--> set -q mode[1]
4	4	--> set mode -p
4	4	--> set -l newpaths
4	4	--> set -l indexes
182	2951	--> for path in $argv...
754	1177	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
423	423	----> builtin realpath -s -- $path 2>/dev/null
25	210	---> if not test -d "$p"...
185	185	----> not test -d "$p"
76	1382	---> if set -l ind (contains -i -- $p $$var)...
806	1201	----> set -l ind (contains -i -- $p $$var)
395	395	-----> contains -i -- $p $$var
24	105	----> if set -q _flag_move...
81	81	-----> set -q _flag_move
264	264	--> set -l newvar $$var
17	70	--> if set -q _flag_move...
53	53	---> set -q _flag_move
125	125	--> set $mode newvar $newpaths
91	335	--> if set -q newpaths[1]...
56	56	---> set -q newpaths[1]
133	133	---> set -q indexes[1]
55	55	---> return 1
466	5438	-> fish_add_path $HOME/.opam/default/bin
340	340	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
17	80	--> if set -q _flag_help...
63	63	---> set -q _flag_help
181	181	--> set -l scope $_flag_global $_flag_universal
29	144	--> if not set -q scope[1]...
60	60	---> not set -q scope[1]
55	55	---> not set -q fish_user_paths
77	77	--> set -l var fish_user_paths
52	52	--> set -q _flag_path
138	138	--> set -l mode $_flag_prepend $_flag_append
58	58	--> set -q mode[1]
75	75	--> set mode -p
75	75	--> set -l newpaths
75	75	--> set -l indexes
254	2901	--> for path in $argv...
860	1248	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
388	388	----> builtin realpath -s -- $path 2>/dev/null
20	200	---> if not test -d "$p"...
180	180	----> not test -d "$p"
60	1199	---> if set -l ind (contains -i -- $p $$var)...
653	1050	----> set -l ind (contains -i -- $p $$var)
397	397	-----> contains -i -- $p $$var
20	89	----> if set -q _flag_move...
69	69	-----> set -q _flag_move
315	315	--> set -l newvar $$var
21	93	--> if set -q _flag_move...
72	72	---> set -q _flag_move
131	131	--> set $mode newvar $newpaths
85	237	--> if set -q newpaths[1]...
55	55	---> set -q newpaths[1]
47	47	---> set -q indexes[1]
50	50	---> return 1
370	4485	-> fish_add_path /home/arpangreat/.local/bin
394	394	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
17	79	--> if set -q _flag_help...
62	62	---> set -q _flag_help
122	122	--> set -l scope $_flag_global $_flag_universal
34	151	--> if not set -q scope[1]...
59	59	---> not set -q scope[1]
58	58	---> not set -q fish_user_paths
85	85	--> set -l var fish_user_paths
55	55	--> set -q _flag_path
179	179	--> set -l mode $_flag_prepend $_flag_append
56	56	--> set -q mode[1]
62	62	--> set mode -p
64	64	--> set -l newpaths
61	61	--> set -l indexes
186	2359	--> for path in $argv...
919	1353	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
434	434	----> builtin realpath -s -- $path 2>/dev/null
29	270	---> if not test -d "$p"...
241	241	----> not test -d "$p"
8	550	---> if set -l ind (contains -i -- $p $$var)...
345	536	----> set -l ind (contains -i -- $p $$var)
191	191	-----> contains -i -- $p $$var
2	6	----> if set -q _flag_move...
4	4	-----> set -q _flag_move
16	16	--> set -l newvar $$var
2	5	--> if set -q _flag_move...
3	3	---> set -q _flag_move
110	110	--> set $mode newvar $newpaths
91	317	--> if set -q newpaths[1]...
56	56	---> set -q newpaths[1]
114	114	---> set -q indexes[1]
56	56	---> return 1
739	5935	-> fish_add_path /home/arpangreat/.local/share/nvim/mason/bin
326	326	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
20	76	--> if set -q _flag_help...
56	56	---> set -q _flag_help
126	126	--> set -l scope $_flag_global $_flag_universal
30	144	--> if not set -q scope[1]...
65	65	---> not set -q scope[1]
49	49	---> not set -q fish_user_paths
81	81	--> set -l var fish_user_paths
58	58	--> set -q _flag_path
122	122	--> set -l mode $_flag_prepend $_flag_append
50	50	--> set -q mode[1]
61	61	--> set mode -p
64	64	--> set -l newpaths
62	62	--> set -l indexes
218	2961	--> for path in $argv...
941	1347	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
406	406	----> builtin realpath -s -- $path 2>/dev/null
24	214	---> if not test -d "$p"...
190	190	----> not test -d "$p"
64	1182	---> if set -l ind (contains -i -- $p $$var)...
628	1033	----> set -l ind (contains -i -- $p $$var)
405	405	-----> contains -i -- $p $$var
21	85	----> if set -q _flag_move...
64	64	-----> set -q _flag_move
310	310	--> set -l newvar $$var
16	73	--> if set -q _flag_move...
57	57	---> set -q _flag_move
124	124	--> set $mode newvar $newpaths
361	558	--> if set -q newpaths[1]...
74	74	---> set -q newpaths[1]
48	48	---> set -q indexes[1]
75	75	---> return 1
388	4039	-> fish_add_path /home/arpangreat/.ghcup/bin
322	322	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
18	73	--> if set -q _flag_help...
55	55	---> set -q _flag_help
118	118	--> set -l scope $_flag_global $_flag_universal
31	207	--> if not set -q scope[1]...
121	121	---> not set -q scope[1]
55	55	---> not set -q fish_user_paths
74	74	--> set -l var fish_user_paths
48	48	--> set -q _flag_path
115	115	--> set -l mode $_flag_prepend $_flag_append
49	49	--> set -q mode[1]
59	59	--> set mode -p
62	62	--> set -l newpaths
63	63	--> set -l indexes
178	1677	--> for path in $argv...
719	1070	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
351	351	----> builtin realpath -s -- $path 2>/dev/null
70	429	---> if not test -d "$p"...
227	227	----> not test -d "$p"
23	87	----> if set -q _flag_verbose...
64	64	-----> set -q _flag_verbose
45	45	----> continue
315	315	--> set -l newvar $$var
17	67	--> if set -q _flag_move...
50	50	---> set -q _flag_move
121	121	--> set $mode newvar $newpaths
92	281	--> if set -q newpaths[1]...
96	96	---> set -q newpaths[1]
47	47	---> set -q indexes[1]
46	46	---> return 1
340	3001	-> fish_add_path $HOME/.config/composer/vendor/bin
304	304	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
16	72	--> if set -q _flag_help...
56	56	---> set -q _flag_help
109	109	--> set -l scope $_flag_global $_flag_universal
40	152	--> if not set -q scope[1]...
60	60	---> not set -q scope[1]
52	52	---> not set -q fish_user_paths
75	75	--> set -l var fish_user_paths
45	45	--> set -q _flag_path
105	105	--> set -l mode $_flag_prepend $_flag_append
47	47	--> set -q mode[1]
59	59	--> set mode -p
61	61	--> set -l newpaths
64	64	--> set -l indexes
215	1518	--> for path in $argv...
741	1101	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
360	360	----> builtin realpath -s -- $path 2>/dev/null
5	108	---> if not test -d "$p"...
103	103	----> not test -d "$p"
6	94	---> if set -l ind (contains -i -- $p $$var)...
50	81	----> set -l ind (contains -i -- $p $$var)
31	31	-----> contains -i -- $p $$var
2	7	----> if set -q _flag_move...
5	5	-----> set -q _flag_move
20	20	--> set -l newvar $$var
1	4	--> if set -q _flag_move...
3	3	---> set -q _flag_move
8	8	--> set $mode newvar $newpaths
7	18	--> if set -q newpaths[1]...
4	4	---> set -q newpaths[1]
3	3	---> set -q indexes[1]
4	4	---> return 1
537	26550	-> fish_add_path $HOME/.tmux/plugins/t-smart-tmux-session-manager/bin:$PATH
856	856	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
19	86	--> if set -q _flag_help...
67	67	---> set -q _flag_help
122	122	--> set -l scope $_flag_global $_flag_universal
30	136	--> if not set -q scope[1]...
57	57	---> not set -q scope[1]
49	49	---> not set -q fish_user_paths
68	68	--> set -l var fish_user_paths
48	48	--> set -q _flag_path
160	160	--> set -l mode $_flag_prepend $_flag_append
53	53	--> set -q mode[1]
62	62	--> set mode -p
62	62	--> set -l newpaths
61	61	--> set -l indexes
1044	23374	--> for path in $argv...
630	1096	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
466	466	----> builtin realpath -s -- $path 2>/dev/null
67	473	---> if not test -d "$p"...
274	274	----> not test -d "$p"
21	87	----> if set -q _flag_verbose...
66	66	-----> set -q _flag_verbose
45	45	----> continue
738	1143	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
405	405	----> builtin realpath -s -- $path 2>/dev/null
64	384	---> if not test -d "$p"...
202	202	----> not test -d "$p"
19	82	----> if set -q _flag_verbose...
63	63	-----> set -q _flag_verbose
36	36	----> continue
656	1041	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
385	385	----> builtin realpath -s -- $path 2>/dev/null
73	516	---> if not test -d "$p"...
307	307	----> not test -d "$p"
22	97	----> if set -q _flag_verbose...
75	75	-----> set -q _flag_verbose
39	39	----> continue
733	1203	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
470	470	----> builtin realpath -s -- $path 2>/dev/null
70	441	---> if not test -d "$p"...
206	206	----> not test -d "$p"
19	128	----> if set -q _flag_verbose...
109	109	-----> set -q _flag_verbose
37	37	----> continue
946	1364	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
418	418	----> builtin realpath -s -- $path 2>/dev/null
73	502	---> if not test -d "$p"...
236	236	----> not test -d "$p"
25	97	----> if set -q _flag_verbose...
72	72	-----> set -q _flag_verbose
96	96	----> continue
812	1199	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
387	387	----> builtin realpath -s -- $path 2>/dev/null
57	360	---> if not test -d "$p"...
191	191	----> not test -d "$p"
18	78	----> if set -q _flag_verbose...
60	60	-----> set -q _flag_verbose
34	34	----> continue
536	930	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
394	394	----> builtin realpath -s -- $path 2>/dev/null
7	30	---> if not test -d "$p"...
15	15	----> not test -d "$p"
1	6	----> if set -q _flag_verbose...
5	5	-----> set -q _flag_verbose
2	2	----> continue
102	160	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
58	58	----> builtin realpath -s -- $path 2>/dev/null
7	40	---> if not test -d "$p"...
15	15	----> not test -d "$p"
11	16	----> if set -q _flag_verbose...
5	5	-----> set -q _flag_verbose
2	2	----> continue
60	91	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
31	31	----> builtin realpath -s -- $path 2>/dev/null
4	33	---> if not test -d "$p"...
13	13	----> not test -d "$p"
2	14	----> if set -q _flag_verbose...
12	12	-----> set -q _flag_verbose
2	2	----> continue
526	847	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
321	321	----> builtin realpath -s -- $path 2>/dev/null
67	451	---> if not test -d "$p"...
242	242	----> not test -d "$p"
21	99	----> if set -q _flag_verbose...
78	78	-----> set -q _flag_verbose
43	43	----> continue
850	1284	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
434	434	----> builtin realpath -s -- $path 2>/dev/null
70	485	---> if not test -d "$p"...
216	216	----> not test -d "$p"
25	161	----> if set -q _flag_verbose...
136	136	-----> set -q _flag_verbose
38	38	----> continue
666	1066	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
400	400	----> builtin realpath -s -- $path 2>/dev/null
64	369	---> if not test -d "$p"...
190	190	----> not test -d "$p"
17	79	----> if set -q _flag_verbose...
62	62	-----> set -q _flag_verbose
36	36	----> continue
816	1246	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
430	430	----> builtin realpath -s -- $path 2>/dev/null
278	771	---> if not test -d "$p"...
307	307	----> not test -d "$p"
27	134	----> if set -q _flag_verbose...
107	107	-----> set -q _flag_verbose
52	52	----> continue
1936	2410	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
474	474	----> builtin realpath -s -- $path 2>/dev/null
70	425	---> if not test -d "$p"...
223	223	----> not test -d "$p"
22	97	----> if set -q _flag_verbose...
75	75	-----> set -q _flag_verbose
35	35	----> continue
1053	1438	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
385	385	----> builtin realpath -s -- $path 2>/dev/null
73	532	---> if not test -d "$p"...
317	317	----> not test -d "$p"
21	102	----> if set -q _flag_verbose...
81	81	-----> set -q _flag_verbose
40	40	----> continue
437	437	--> set -l newvar $$var
21	91	--> if set -q _flag_move...
70	70	---> set -q _flag_move
138	138	--> set $mode newvar $newpaths
94	259	--> if set -q newpaths[1]...
61	61	---> set -q newpaths[1]
50	50	---> set -q indexes[1]
54	54	---> return 1
170	505	-> fish_add_path $BUN_INSTALL/bin
31	31	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
2	6	--> if set -q _flag_help...
4	4	---> set -q _flag_help
10	10	--> set -l scope $_flag_global $_flag_universal
1	9	--> if not set -q scope[1]...
4	4	---> not set -q scope[1]
4	4	---> not set -q fish_user_paths
6	6	--> set -l var fish_user_paths
5	5	--> set -q _flag_path
10	10	--> set -l mode $_flag_prepend $_flag_append
3	3	--> set -q mode[1]
5	5	--> set mode -p
7	7	--> set -l newpaths
4	4	--> set -l indexes
18	184	--> for path in $argv...
95	141	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
46	46	----> builtin realpath -s -- $path 2>/dev/null
5	25	---> if not test -d "$p"...
12	12	----> not test -d "$p"
1	5	----> if set -q _flag_verbose...
4	4	-----> set -q _flag_verbose
3	3	----> continue
22	22	--> set -l newvar $$var
1	5	--> if set -q _flag_move...
4	4	---> set -q _flag_move
9	9	--> set $mode newvar $newpaths
8	19	--> if set -q newpaths[1]...
4	4	---> set -q newpaths[1]
3	3	---> set -q indexes[1]
4	4	---> return 1
135	1307	-> fish_add_path $HOME/.local/share/nvim/mason/bin
27	27	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	7	--> if set -q _flag_help...
6	6	---> set -q _flag_help
10	10	--> set -l scope $_flag_global $_flag_universal
2	9	--> if not set -q scope[1]...
4	4	---> not set -q scope[1]
3	3	---> not set -q fish_user_paths
5	5	--> set -l var fish_user_paths
3	3	--> set -q _flag_path
9	9	--> set -l mode $_flag_prepend $_flag_append
4	4	--> set -q mode[1]
5	5	--> set mode -p
4	4	--> set -l newpaths
4	4	--> set -l indexes
15	319	--> for path in $argv...
173	199	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
26	26	----> builtin realpath -s -- $path 2>/dev/null
1	18	---> if not test -d "$p"...
17	17	----> not test -d "$p"
4	87	---> if set -l ind (contains -i -- $p $$var)...
46	77	----> set -l ind (contains -i -- $p $$var)
31	31	-----> contains -i -- $p $$var
1	6	----> if set -q _flag_move...
5	5	-----> set -q _flag_move
327	327	--> set -l newvar $$var
25	80	--> if set -q _flag_move...
55	55	---> set -q _flag_move
125	125	--> set $mode newvar $newpaths
83	234	--> if set -q newpaths[1]...
52	52	---> set -q newpaths[1]
49	49	---> set -q indexes[1]
50	50	---> return 1
939	6723	-> fish_add_path $HOME/.ruby/bin
386	386	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
20	83	--> if set -q _flag_help...
63	63	---> set -q _flag_help
120	120	--> set -l scope $_flag_global $_flag_universal
29	138	--> if not set -q scope[1]...
58	58	---> not set -q scope[1]
51	51	---> not set -q fish_user_paths
73	73	--> set -l var fish_user_paths
51	51	--> set -q _flag_path
135	135	--> set -l mode $_flag_prepend $_flag_append
64	64	--> set -q mode[1]
74	74	--> set mode -p
79	79	--> set -l newpaths
78	78	--> set -l indexes
222	3824	--> for path in $argv...
1736	2137	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
401	401	----> builtin realpath -s -- $path 2>/dev/null
27	216	---> if not test -d "$p"...
189	189	----> not test -d "$p"
129	1249	---> if set -l ind (contains -i -- $p $$var)...
658	1030	----> set -l ind (contains -i -- $p $$var)
372	372	-----> contains -i -- $p $$var
20	90	----> if set -q _flag_move...
70	70	-----> set -q _flag_move
245	245	--> set -l newvar $$var
15	67	--> if set -q _flag_move...
52	52	---> set -q _flag_move
117	117	--> set $mode newvar $newpaths
84	250	--> if set -q newpaths[1]...
56	56	---> set -q newpaths[1]
49	49	---> set -q indexes[1]
61	61	---> return 1
601	5085	-> fish_add_path $JAVA_HOME/bin
422	422	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
20	94	--> if set -q _flag_help...
74	74	---> set -q _flag_help
100	100	--> set -l scope $_flag_global $_flag_universal
21	95	--> if not set -q scope[1]...
39	39	---> not set -q scope[1]
35	35	---> not set -q fish_user_paths
51	51	--> set -l var fish_user_paths
45	45	--> set -q _flag_path
79	79	--> set -l mode $_flag_prepend $_flag_append
30	30	--> set -q mode[1]
43	43	--> set mode -p
75	75	--> set -l newpaths
44	44	--> set -l indexes
135	3355	--> for path in $argv...
749	1135	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
386	386	----> builtin realpath -s -- $path 2>/dev/null
22	202	---> if not test -d "$p"...
180	180	----> not test -d "$p"
37	1883	---> if set -l ind (contains -i -- $p $$var)...
983	1836	----> set -l ind (contains -i -- $p $$var)
853	853	-----> contains -i -- $p $$var
3	10	----> if set -q _flag_move...
7	7	-----> set -q _flag_move
22	22	--> set -l newvar $$var
0	5	--> if set -q _flag_move...
5	5	---> set -q _flag_move
7	7	--> set $mode newvar $newpaths
6	17	--> if set -q newpaths[1]...
4	4	---> set -q newpaths[1]
4	4	---> set -q indexes[1]
3	3	---> return 1
35	366	-> fish_add_path /usr/bin/flutter/bin
28	28	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	6	--> if set -q _flag_help...
5	5	---> set -q _flag_help
10	10	--> set -l scope $_flag_global $_flag_universal
3	10	--> if not set -q scope[1]...
4	4	---> not set -q scope[1]
3	3	---> not set -q fish_user_paths
6	6	--> set -l var fish_user_paths
4	4	--> set -q _flag_path
10	10	--> set -l mode $_flag_prepend $_flag_append
4	4	--> set -q mode[1]
4	4	--> set mode -p
5	5	--> set -l newpaths
4	4	--> set -l indexes
27	180	--> for path in $argv...
79	119	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
40	40	----> builtin realpath -s -- $path 2>/dev/null
6	34	---> if not test -d "$p"...
17	17	----> not test -d "$p"
1	8	----> if set -q _flag_verbose...
7	7	-----> set -q _flag_verbose
3	3	----> continue
23	23	--> set -l newvar $$var
0	5	--> if set -q _flag_move...
5	5	---> set -q _flag_move
10	10	--> set $mode newvar $newpaths
8	22	--> if set -q newpaths[1]...
5	5	---> set -q newpaths[1]
4	4	---> set -q indexes[1]
5	5	---> return 1
42	317	-> fish_add_path $HOME/Downloads/RustRover-2024.1/bin
33	33	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	5	--> if set -q _flag_help...
4	4	---> set -q _flag_help
8	8	--> set -l scope $_flag_global $_flag_universal
3	10	--> if not set -q scope[1]...
4	4	---> not set -q scope[1]
3	3	---> not set -q fish_user_paths
4	4	--> set -l var fish_user_paths
3	3	--> set -q _flag_path
7	7	--> set -l mode $_flag_prepend $_flag_append
3	3	--> set -q mode[1]
4	4	--> set mode -p
4	4	--> set -l newpaths
5	5	--> set -l indexes
13	139	--> for path in $argv...
71	101	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
30	30	----> builtin realpath -s -- $path 2>/dev/null
5	25	---> if not test -d "$p"...
13	13	----> not test -d "$p"
1	5	----> if set -q _flag_verbose...
4	4	-----> set -q _flag_verbose
2	2	----> continue
23	23	--> set -l newvar $$var
1	5	--> if set -q _flag_move...
4	4	---> set -q _flag_move
7	7	--> set $mode newvar $newpaths
5	15	--> if set -q newpaths[1]...
4	4	---> set -q newpaths[1]
3	3	---> set -q indexes[1]
3	3	---> return 1
39	297	-> fish_add_path $KITTY_INSTALLATION_DIR:$HOME/kitty
21	21	--> argparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv
1	5	--> if set -q _flag_help...
4	4	---> set -q _flag_help
9	9	--> set -l scope $_flag_global $_flag_universal
2	9	--> if not set -q scope[1]...
4	4	---> not set -q scope[1]
3	3	---> not set -q fish_user_paths
5	5	--> set -l var fish_user_paths
4	4	--> set -q _flag_path
8	8	--> set -l mode $_flag_prepend $_flag_append
3	3	--> set -q mode[1]
4	4	--> set mode -p
4	4	--> set -l newpaths
3	3	--> set -l indexes
14	129	--> for path in $argv...
52	82	---> set -l p (builtin realpath -s -- $path 2>/dev/null)
30	30	----> builtin realpath -s -- $path 2>/dev/null
6	33	---> if not test -d "$p"...
17	17	----> not test -d "$p"
1	7	----> if set -q _flag_verbose...
6	6	-----> set -q _flag_verbose
3	3	----> continue
21	21	--> set -l newvar $$var
1	6	--> if set -q _flag_move...
5	5	---> set -q _flag_move
9	9	--> set $mode newvar $newpaths
5	18	--> if set -q newpaths[1]...
5	5	---> set -q newpaths[1]
4	4	---> set -q indexes[1]
4	4	---> return 1
27617	48180	-> zoxide init fish --cmd cd | source
68	68	--> function __zoxide_pwd...
77	2132	--> if ! builtin functions --query __zoxide_cd_internal...
307	307	---> ! builtin functions --query __zoxide_cd_internal
1623	1748	---> string replace --regex -- '^function cd\s' 'function __zoxide_cd_internal ' <$__fish_data_dir/functions/cd.fish | source
125	125	----> function __zoxide_cd_internal --description "Change directory"...
34	34	--> function __zoxide_cd...
66	66	--> function __zoxide_hook --on-variable PWD...
21	21	--> function __zoxide_z...
23	23	--> function __zoxide_z_complete...
926	926	--> complete --command __zoxide_z --no-files --arguments '(__zoxide_z_complete)'
30	30	--> function __zoxide_zi...
3869	3869	--> builtin abbr --erase cd &>/dev/null
599	6636	--> alias cd=__zoxide_z
172	172	---> set -l options h/help s/save
383	383	---> argparse -n alias --max-args=2 $options -- $argv
23	121	---> if set -q _flag_help...
98	98	----> set -q _flag_help
97	97	---> set -l name
76	76	---> set -l body
75	75	---> set -l prefix
169	2447	---> if not set -q argv[1]...
67	67	----> not set -q argv[1]
51	51	----> not set -q argv[2]
1609	1887	----> set -l tmp (string split -m 1 "=" -- $argv) ""
278	278	-----> string split -m 1 "=" -- $argv
162	162	----> set name $tmp[1]
111	111	----> set body $tmp[2]
36	241	---> if test -z "$name"...
123	123	----> test -z "$name"
82	82	----> test -z "$body"
825	825	---> printf '%s\n' $body | read -l --list words
173	173	---> set -l first_word $words[1]
114	114	---> set -l last_word $words[-1]
24	154	---> if test $first_word = $name...
130	130	----> test $first_word = $name
707	906	---> set -l cmd_string (string escape -- "alias $argv")
199	199	----> string escape -- "alias $argv"
7	7	---> set -l wraps
9	102	---> if test $first_word != $name...
10	10	----> test $first_word != $name
6	6	----> test $last_word != $name
65	77	----> set wraps --wraps (string escape -- $body)
12	12	-----> string escape -- $body
116	134	---> echo "function $name $wraps --description $cmd_string; $prefix $body \$argv
        end" | source
18	18	----> function cd --wraps __zoxide_z --description 'alias cd=__zoxide_z'...
1	10	---> if set -q _flag_save...
9	9	----> set -q _flag_save
62	62	--> builtin abbr --erase cdi &>/dev/null
303	6696	--> alias cdi=__zoxide_zi
11	11	---> set -l options h/help s/save
25	25	---> argparse -n alias --max-args=2 $options -- $argv
2	8	---> if set -q _flag_help...
6	6	----> set -q _flag_help
5	5	---> set -l name
12	12	---> set -l body
6	6	---> set -l prefix
71	1443	---> if not set -q argv[1]...
5	5	----> not set -q argv[1]
4	4	----> not set -q argv[2]
915	1130	----> set -l tmp (string split -m 1 "=" -- $argv) ""
215	215	-----> string split -m 1 "=" -- $argv
131	131	----> set name $tmp[1]
102	102	----> set body $tmp[2]
33	222	---> if test -z "$name"...
100	100	----> test -z "$name"
89	89	----> test -z "$body"
663	663	---> printf '%s\n' $body | read -l --list words
145	145	---> set -l first_word $words[1]
103	103	---> set -l last_word $words[-1]
17	128	---> if test $first_word = $name...
111	111	----> test $first_word = $name
776	949	---> set -l cmd_string (string escape -- "alias $argv")
173	173	----> string escape -- "alias $argv"
108	108	---> set -l wraps
89	1281	---> if test $first_word != $name...
232	232	----> test $first_word != $name
97	97	----> test $last_word != $name
744	863	----> set wraps --wraps (string escape -- $body)
119	119	-----> string escape -- $body
1062	1187	---> echo "function $name $wraps --description $cmd_string; $prefix $body \$argv
        end" | source
125	125	----> function cdi --wraps __zoxide_zi --description 'alias cdi=__zoxide_zi'...
18	97	---> if set -q _flag_save...
79	79	----> set -q _flag_save
1357	465479	-> eval (batpipe)
463464	463464	--> batpipe
254	254	--> set -x LESSOPEN "|/usr/bin/batpipe %s"
97	97	--> set -e LESSCLOSE
200	200	--> set -x LESS "$LESS -R"
107	107	--> set -x BATPIPE "color"
13962	15508	-> source $HOME/kitty/shell-integration/fish/vendor_conf.d/kitty-shell-integration.fish
47	282	--> if set -q KITTY_FISH_XDG_DATA_DIR...
235	235	---> set -q KITTY_FISH_XDG_DATA_DIR
81	81	--> status is-interactive
635	635	--> not functions -q __ksi_schedule
158	158	--> set -q fish_killring
133	133	--> function __ksi_schedule --on-event fish_prompt -d "Setup kitty integration after other scripts have run, we hope"...
114	114	--> function edit-in-kitty --wraps "kitten edit-in-kitty" -d "Edit the specified file in a kitty overlay window with your locally installed editor"...
63	63	--> function __ksi_transmit_data -d "Transmit data to kitty using chunked DCS escapes"...
80	80	--> function clone-in-kitty -d "Clone the current fish session into a new kitty window"...
92499	92993	-> v complete setup fish | source
69	69	--> function __v_completions...
425	425	--> complete -f -c v -a "(__v_completions)"
66553	118522	-> cod init $fish_pid fish | source
324	324	--> set -g __COD_BINARY /usr/bin/cod
56	56	--> function __cod_complete_fish...
32	32	--> function __fish_cod_get_completions...
68	68	--> function __cod_postexec_fish --on-event fish_postexec...
46208	46208	--> cod api attach -- %self fish
597	597	--> complete --command dune --arguments '(__cod_complete_fish)'
327	327	--> complete --command bs --arguments '(__cod_complete_fish)'
287	287	--> complete --command fd --arguments '(__cod_complete_fish)'
217	217	--> complete --command wezterm --arguments '(__cod_complete_fish)'
211	211	--> complete --command batman --arguments '(__cod_complete_fish)'
187	187	--> complete --command tig --arguments '(__cod_complete_fish)'
3336	3336	--> complete --command zeditor --arguments '(__cod_complete_fish)'
31	31	--> complete --command cod --arguments '(__cod_complete_fish)'
13	13	--> complete --command btm --arguments '(__cod_complete_fish)'
20	20	--> complete --command timeshift --arguments '(__cod_complete_fish)'
12	12	--> complete --command dune --arguments '(__cod_complete_fish)'
10	10	--> complete --command rails --arguments '(__cod_complete_fish)'
11	11	--> complete --command modular --arguments '(__cod_complete_fish)'
11	11	--> complete --command auto-cpufreq --arguments '(__cod_complete_fish)'
11	11	--> complete --command gcalcli --arguments '(__cod_complete_fish)'
1249	17431	-> source /home/arpangreat/.opam/opam-init/init.fish >/dev/null 2>/dev/null
81	10713	--> if isatty...
1067	6125	---> isatty
3678	3859	----> source /usr/share/fish/functions/isatty.fish
181	181	-----> function isatty -d "Tests if a file descriptor is a tty"...
190	190	----> set -l options h/help
205	205	----> argparse -n isatty $options -- $argv
26	116	----> if set -q _flag_help...
90	90	-----> set -q _flag_help
21	102	----> if set -q argv[2]...
81	81	-----> set -q argv[2]
159	159	----> set -l fd
160	253	----> switch "$argv"...
93	93	-----> set fd 0
174	174	----> test -t "$fd"
4106	4507	---> source /home/arpangreat/.opam/opam-init/env_hook.fish > /dev/null 2> /dev/null
222	222	----> set -gx OPAMNOENVNOTICE true
179	179	----> function __opam_env_export_eval --on-event fish_prompt...
1647	5469	--> source /home/arpangreat/.opam/opam-init/variables.fish > /dev/null 2> /dev/null
17	17	---> set -gx OPAM_SWITCH_PREFIX '/home/arpangreat/.opam/default'
12	12	---> set -gx CAML_LD_LIBRARY_PATH '/home/arpangreat/.opam/default/lib/stublibs'
9	9	---> set -gx CAML_LD_LIBRARY_PATH '/home/arpangreat/.opam/default/lib/ocaml/stublibs:/home/arpangreat/.opam/default/lib/ocaml'
11	11	---> set -gx CAML_LD_LIBRARY_PATH '/home/arpangreat/.opam/default/lib/stublibs':"$CAML_LD_LIBRARY_PATH"
9	9	---> set -gx OCAML_TOPLEVEL_PATH '/home/arpangreat/.opam/default/lib/toplevel'
81	3200	---> if [ (count $MANPATH) -gt 0 ]...
2764	2858	----> [ (count $MANPATH) -gt 0 ]
94	94	-----> count $MANPATH
261	261	----> set -gx MANPATH $MANPATH '/home/arpangreat/.opam/default/man'
564	564	---> set -gx PATH '/home/arpangreat/.opam/default/bin' $PATH
209	209	-> set -gx PNPM_HOME "/home/arpangreat/.local/share/pnpm"
39	505	-> if not string match -q -- $PNPM_HOME $PATH...
466	466	--> not string match -q -- $PNPM_HOME $PATH
132	12373	-> if set -q KITTY_INSTALLATION_DIR...
79	79	--> set -q KITTY_INSTALLATION_DIR
122	122	--> set --global KITTY_SHELL_INTEGRATION enabled
10600	11716	--> source "$KITTY_INSTALLATION_DIR/shell-integration/fish/vendor_conf.d/kitty-shell-integration.fish"
48	236	---> if set -q KITTY_FISH_XDG_DATA_DIR...
188	188	----> set -q KITTY_FISH_XDG_DATA_DIR
90	90	---> status is-interactive
140	140	---> not functions -q __ksi_schedule
650	650	---> exit 0
324	324	--> set --prepend fish_complete_path "$KITTY_INSTALLATION_DIR/shell-integration/fish/vendor_completions.d"
